// ============================================================================
// Azure Data Explorer KQL Script for NXLog_DNS_Server_CL
// ============================================================================
// Generated: 2025-09-19 14:23:08
// Table type: Custom (presumed for JSON exports)
// Schema imported from JSON export file
// ============================================================================

.create-merge table NXLog_DNS_Server_CLRaw (records:dynamic)

.alter-merge table NXLog_DNS_Server_CLRaw policy retention softdelete = 1d

.alter table NXLog_DNS_Server_CLRaw policy caching hot = 1h

// JSON mapping - choose appropriate option based on data structure
.create-or-alter table NXLog_DNS_Server_CLRaw ingestion json mapping 'NXLog_DNS_Server_CLRawMapping' '[{"column":"records","Properties":{"path":"$.records"}}]'
// Alternative for direct events: '[{"column":"records","Properties":{"path":"$"}}]'

.create-merge table NXLog_DNS_Server_CL(
TimeGenerated:datetime,
TenantId:guid,
QNAME_s:string,
QTYPE_s:string,
XID_s:string,
RecursionDepth_s:string,
Port_s:string,
RecursionScope_s:string,
CacheScope_s:string,
BufferSize_s:string,
PacketData_s:string,
AdditionalInfo_s:string,
GUID_g:string,
EventReceivedTime_t:datetime,
SourceModuleName_s:string,
SourceModuleType_s:string,
HostIP_s:string,
Destination_s:string,
RD_s:string,
QXID_s:string,
PolicyName_s:string,
DNSSEC_s:string,
RCODE_s:string,
Scope_s:string,
Zone_s:string,
ElapsedTime_s:string,
Type_s:string,
NAME_s:string,
TTL_s:string,
RDATA_s:string,
ZoneScope_s:string,
AD_s:string,
VirtualizationID_s:string,
AA_s:string,
Source_s:string,
SourceSystem:string,
MG:string,
ManagementGroupName:string,
Computer:string,
RawData:string,
DNS_LogType_s:string,
FilePath_s:string,
DNSSeverType_s:string,
SourceName_s:string,
ProviderGuid_g:string,
EventID_d:real,
Version_d:real,
ChannelID_d:real,
OpcodeValue_d:real,
TaskValue_d:real,
Keywords_s:string,
EventTime_t:datetime,
ExecutionProcessID_d:real,
ExecutionThreadID_d:real,
EventType_s:string,
SeverityValue_d:real,
Severity_s:string,
Hostname_s:string,
Domain_s:string,
AccountName_s:string,
UserID_s:string,
AccountType_s:string,
Flags_s:string,
TCP_s:string,
InterfaceIP_s:string,
Reason_s:string,
Type:string,
_ItemId:string,
_ResourceId:string,
_TimeReceived:datetime)

.alter table NXLog_DNS_Server_CL policy caching hot = 1d

.create-or-alter function NXLog_DNS_Server_CLExpand() {
NXLog_DNS_Server_CLRaw
| mv-expand events = records
// Alternative for non-nested: | extend events = records
| project
TimeGenerated=todatetime(events.TimeGenerated),
TenantId=toguid(events.TenantId),
QNAME_s=tostring(events.QNAME_s),
QTYPE_s=tostring(events.QTYPE_s),
XID_s=tostring(events.XID_s),
RecursionDepth_s=tostring(events.RecursionDepth_s),
Port_s=tostring(events.Port_s),
RecursionScope_s=tostring(events.RecursionScope_s),
CacheScope_s=tostring(events.CacheScope_s),
BufferSize_s=tostring(events.BufferSize_s),
PacketData_s=tostring(events.PacketData_s),
AdditionalInfo_s=tostring(events.AdditionalInfo_s),
GUID_g=tostring(events.GUID_g),
EventReceivedTime_t=todatetime(events.EventReceivedTime_t),
SourceModuleName_s=tostring(events.SourceModuleName_s),
SourceModuleType_s=tostring(events.SourceModuleType_s),
HostIP_s=tostring(events.HostIP_s),
Destination_s=tostring(events.Destination_s),
RD_s=tostring(events.RD_s),
QXID_s=tostring(events.QXID_s),
PolicyName_s=tostring(events.PolicyName_s),
DNSSEC_s=tostring(events.DNSSEC_s),
RCODE_s=tostring(events.RCODE_s),
Scope_s=tostring(events.Scope_s),
Zone_s=tostring(events.Zone_s),
ElapsedTime_s=tostring(events.ElapsedTime_s),
Type_s=tostring(events.Type_s),
NAME_s=tostring(events.NAME_s),
TTL_s=tostring(events.TTL_s),
RDATA_s=tostring(events.RDATA_s),
ZoneScope_s=tostring(events.ZoneScope_s),
AD_s=tostring(events.AD_s),
VirtualizationID_s=tostring(events.VirtualizationID_s),
AA_s=tostring(events.AA_s),
Source_s=tostring(events.Source_s),
SourceSystem=tostring(events.SourceSystem),
MG=tostring(events.MG),
ManagementGroupName=tostring(events.ManagementGroupName),
Computer=tostring(events.Computer),
RawData=tostring(events.RawData),
DNS_LogType_s=tostring(events.DNS_LogType_s),
FilePath_s=tostring(events.FilePath_s),
DNSSeverType_s=tostring(events.DNSSeverType_s),
SourceName_s=tostring(events.SourceName_s),
ProviderGuid_g=tostring(events.ProviderGuid_g),
EventID_d=toreal(events.EventID_d),
Version_d=toreal(events.Version_d),
ChannelID_d=toreal(events.ChannelID_d),
OpcodeValue_d=toreal(events.OpcodeValue_d),
TaskValue_d=toreal(events.TaskValue_d),
Keywords_s=tostring(events.Keywords_s),
EventTime_t=todatetime(events.EventTime_t),
ExecutionProcessID_d=toreal(events.ExecutionProcessID_d),
ExecutionThreadID_d=toreal(events.ExecutionThreadID_d),
EventType_s=tostring(events.EventType_s),
SeverityValue_d=toreal(events.SeverityValue_d),
Severity_s=tostring(events.Severity_s),
Hostname_s=tostring(events.Hostname_s),
Domain_s=tostring(events.Domain_s),
AccountName_s=tostring(events.AccountName_s),
UserID_s=tostring(events.UserID_s),
AccountType_s=tostring(events.AccountType_s),
Flags_s=tostring(events.Flags_s),
TCP_s=tostring(events.TCP_s),
InterfaceIP_s=tostring(events.InterfaceIP_s),
Reason_s=tostring(events.Reason_s),
Type=tostring(events.Type),
_ItemId=tostring(events._ItemId),
_ResourceId=tostring(events._ResourceId),
_TimeReceived=todatetime(now())
}

.alter table NXLog_DNS_Server_CL policy update @'[{"Source": "NXLog_DNS_Server_CLRaw", "Query": "NXLog_DNS_Server_CLExpand()", "IsEnabled": "True", "IsTransactional": true}]'
