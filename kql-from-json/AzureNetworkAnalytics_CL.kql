// ============================================================================
// Azure Data Explorer KQL Script for AzureNetworkAnalytics_CL
// ============================================================================
// Generated: 2025-09-13 20:17:11
// Table type: Custom (presumed for JSON exports)
// Schema imported from JSON export file
// ============================================================================

.create-merge table AzureNetworkAnalytics_CLRaw (records:dynamic)

.alter-merge table AzureNetworkAnalytics_CLRaw policy retention softdelete = 1d

.alter table AzureNetworkAnalytics_CLRaw policy caching hot = 1h

// JSON mapping - choose appropriate option based on data structure
.create-or-alter table AzureNetworkAnalytics_CLRaw ingestion json mapping 'AzureNetworkAnalytics_CLRawMapping' '[{"column":"records","Properties":{"path":"$.records"}}]'
// Alternative for direct events: '[{"column":"records","Properties":{"path":"$"}}]'

.create-merge table AzureNetworkAnalytics_CL(
TimeGenerated:datetime,
TenantId:guid,
Peer_s:string,
RoutingWeight_d:real,
VirtualNetworkGateway1_s:string,
VirtualNetworkGateway2_s:string,
AllowForwardedTraffic_b:string,
AllowGatewayTransit_b:string,
AllowVirtualNetworkAccess_b:string,
UseRemoteGateways_b:string,
LocalNetworkGateway_s:string,
VirtualNetwork1_s:string,
AppGatewayType_s:string,
GatewaySubnet_s:string,
PrivateFrontendIPs_s:string,
PublicFrontendIPs_s:string,
BackendSubnets_s:string,
FrontendIPs_s:string,
FrontendSubnet_s:string,
FrontendSubnets_s:string,
VirtualNetwork2_s:string,
LoadBalancerType_s:string,
IngressBytesTransferred_d:real,
EgressBytesTransferred_d:real,
LoadBalancerBackendPools_s:string,
MACAddress_s:string,
NSG_s:string,
PrivateIPAddresses_s:string,
PublicIPAddresses_s:string,
Subnetwork_s:string,
VirtualMachine_s:string,
IsVirtualAppliance_b:string,
GatewayConnectionType_s:string,
IPAddress:string,
BGPEnabled_b:string,
GatewayType_s:string,
SKU_s:string,
VIPAddress_s:string,
VirtualSubnetwork_s:string,
VpnClientAddressPrefixes_s:string,
ConnectionStatus_s:string,
ConnectionType_s:string,
SubnetPrefixes_s:string,
EnableIPForwarding_b:string,
Subnet1_s:string,
SubnetRegion1_s:string,
SecondarybytesIn_d:real,
SecondarybytesOut_d:real,
State_s:string,
VlanId_d:real,
SchemaVersion_s:string,
Name_s:string,
Region_s:string,
Network_s:string,
SecondaryPeerAddressPrefix_s:string,
PrimaryNextHop_s:string,
Weight_d:real,
ComponentType_s:string,
DiscoveryRegion_s:string,
ResourceType:string,
Status_s:string,
SubType_s:string,
Subscription_g:string,
SubscriptionName_s:string,
SecondaryNextHop_s:string,
Subnet2_s:string,
SecondaryAzurePort_s:string,
PrimarybytesIn_d:real,
SubnetRegion2_s:string,
VirtualAppliances_s:string,
BackendIPAddress_s:string,
BackendAddressPool_s:string,
BackendPort_d:real,
FloatingIPEnabled_b:string,
FrontendIPAddress_s:string,
FrontendPort_d:real,
PrimarybytesOut_d:real,
Protocol_s:string,
ServiceProviderProperties_s:string,
ServiceProviderProvisioningState_s:string,
SkuDetail_s:string,
AzureASN_d:real,
PeerASN_d:real,
PeeringType_s:string,
PrimaryAzurePort_s:string,
PrimaryPeerAddressPrefix_s:string,
CircuitProvisioningState_s:string,
ApplicationGatewayBackendPools_s:string,
SourcePortRange_s:string,
SourceAddressPrefix_s:string,
NetworkFlowType_s:string,
SrcIP_s:string,
DestIP_s:string,
VMIP_s:string,
DestPort_d:real,
L4Protocol_s:string,
IsFlowCapturedAtUDRHop_b:string,
NSGList_s:string,
FlowEndTime_t:datetime,
NSGRules_s:string,
NSGRuleType_s:string,
Subscription1_g:string,
Subscription2_g:string,
Region1_s:string,
Region2_s:string,
NIC_s:string,
NIC1_s:string,
NIC2_s:string,
NSGRule_s:string,
VM_s:string,
FlowStartTime_t:datetime,
FlowIntervalStartTime_t:datetime,
PublicIPs_s:string,
FlowStatus_s:string,
Computer:string,
FlowDirection_s:string,
FlowType_s:string,
SrcPublicIPs_s:string,
L7Protocol_s:string,
DestPublicIPs_s:string,
FlowIntervalEndTime_t:datetime,
DestPort_d:real,
MG:string,
ManagementGroupName:string,
RawData:string,
FlowEndTime_s:string,
FlowStartTime_s:string,
Subscription2_s:string,
Subscription1_s:string,
FASchemaVersion_s:string,
SourceSystem:string,
VM1_s:string,
VM2_s:string,
Subnet_s:string,
CompletedFlows_d:real,
batchSizeInBytes_d:real,
Priority_d:real,
Tags_s:string,
VmssName_s:string,
AddressPrefixes_s:string,
RouteTable_s:string,
AddressPrefix_s:string,
OutboundBytes_d:real,
NextHopIP_s:string,
FlowLogStorageAccount_s:string,
IsFlowEnabled_b:string,
Access_s:string,
Description_s:string,
DestinationAddressPrefix_s:string,
DestinationPortRange_s:string,
Direction_s:string,
RuleType_s:string,
NextHopType_s:string,
InboundBytes_d:real,
OutboundPackets_d:real,
InboundPackets_d:real,
Routes_s:string,
ApplicationGateway1_s:string,
ApplicationGateway2_s:string,
LoadBalancer1_s:string,
LoadBalancer2_s:string,
LocalNetworkGateway1_s:string,
LocalNetworkGateway2_s:string,
ExpressRouteCircuit1_s:string,
ExpressRouteCircuit2_s:string,
ExpressRouteCircuitPeeringType_s:string,
ConnectionName_s:string,
ConnectingVNets_s:string,
Country_s:string,
AzureRegion_s:string,
AllowedInFlows_d:real,
DeniedInFlows_d:real,
AllowedOutFlows_d:real,
DeniedOutFlows_d:real,
FlowCount_d:real,
TimeProcessed_t:datetime,
TopologyVersion_s:string,
Type:string,
_ResourceId:string,
_TimeReceived:datetime)

.alter table AzureNetworkAnalytics_CL policy caching hot = 1d

.create-or-alter function AzureNetworkAnalytics_CLExpand() {
AzureNetworkAnalytics_CLRaw
| mv-expand events = records
// Alternative for non-nested: | extend events = records
| project
TimeGenerated=todatetime(events.TimeGenerated),
TenantId=toguid(events.TenantId),
Peer_s=tostring(events.Peer_s),
RoutingWeight_d=toreal(events.RoutingWeight_d),
VirtualNetworkGateway1_s=tostring(events.VirtualNetworkGateway1_s),
VirtualNetworkGateway2_s=tostring(events.VirtualNetworkGateway2_s),
AllowForwardedTraffic_b=tostring(events.AllowForwardedTraffic_b),
AllowGatewayTransit_b=tostring(events.AllowGatewayTransit_b),
AllowVirtualNetworkAccess_b=tostring(events.AllowVirtualNetworkAccess_b),
UseRemoteGateways_b=tostring(events.UseRemoteGateways_b),
LocalNetworkGateway_s=tostring(events.LocalNetworkGateway_s),
VirtualNetwork1_s=tostring(events.VirtualNetwork1_s),
AppGatewayType_s=tostring(events.AppGatewayType_s),
GatewaySubnet_s=tostring(events.GatewaySubnet_s),
PrivateFrontendIPs_s=tostring(events.PrivateFrontendIPs_s),
PublicFrontendIPs_s=tostring(events.PublicFrontendIPs_s),
BackendSubnets_s=tostring(events.BackendSubnets_s),
FrontendIPs_s=tostring(events.FrontendIPs_s),
FrontendSubnet_s=tostring(events.FrontendSubnet_s),
FrontendSubnets_s=tostring(events.FrontendSubnets_s),
VirtualNetwork2_s=tostring(events.VirtualNetwork2_s),
LoadBalancerType_s=tostring(events.LoadBalancerType_s),
IngressBytesTransferred_d=toreal(events.IngressBytesTransferred_d),
EgressBytesTransferred_d=toreal(events.EgressBytesTransferred_d),
LoadBalancerBackendPools_s=tostring(events.LoadBalancerBackendPools_s),
MACAddress_s=tostring(events.MACAddress_s),
NSG_s=tostring(events.NSG_s),
PrivateIPAddresses_s=tostring(events.PrivateIPAddresses_s),
PublicIPAddresses_s=tostring(events.PublicIPAddresses_s),
Subnetwork_s=tostring(events.Subnetwork_s),
VirtualMachine_s=tostring(events.VirtualMachine_s),
IsVirtualAppliance_b=tostring(events.IsVirtualAppliance_b),
GatewayConnectionType_s=tostring(events.GatewayConnectionType_s),
IPAddress=tostring(events.IPAddress),
BGPEnabled_b=tostring(events.BGPEnabled_b),
GatewayType_s=tostring(events.GatewayType_s),
SKU_s=tostring(events.SKU_s),
VIPAddress_s=tostring(events.VIPAddress_s),
VirtualSubnetwork_s=tostring(events.VirtualSubnetwork_s),
VpnClientAddressPrefixes_s=tostring(events.VpnClientAddressPrefixes_s),
ConnectionStatus_s=tostring(events.ConnectionStatus_s),
ConnectionType_s=tostring(events.ConnectionType_s),
SubnetPrefixes_s=tostring(events.SubnetPrefixes_s),
EnableIPForwarding_b=tostring(events.EnableIPForwarding_b),
Subnet1_s=tostring(events.Subnet1_s),
SubnetRegion1_s=tostring(events.SubnetRegion1_s),
SecondarybytesIn_d=toreal(events.SecondarybytesIn_d),
SecondarybytesOut_d=toreal(events.SecondarybytesOut_d),
State_s=tostring(events.State_s),
VlanId_d=toreal(events.VlanId_d),
SchemaVersion_s=tostring(events.SchemaVersion_s),
Name_s=tostring(events.Name_s),
Region_s=tostring(events.Region_s),
Network_s=tostring(events.Network_s),
SecondaryPeerAddressPrefix_s=tostring(events.SecondaryPeerAddressPrefix_s),
PrimaryNextHop_s=tostring(events.PrimaryNextHop_s),
Weight_d=toreal(events.Weight_d),
ComponentType_s=tostring(events.ComponentType_s),
DiscoveryRegion_s=tostring(events.DiscoveryRegion_s),
ResourceType=tostring(events.ResourceType),
Status_s=tostring(events.Status_s),
SubType_s=tostring(events.SubType_s),
Subscription_g=tostring(events.Subscription_g),
SubscriptionName_s=tostring(events.SubscriptionName_s),
SecondaryNextHop_s=tostring(events.SecondaryNextHop_s),
Subnet2_s=tostring(events.Subnet2_s),
SecondaryAzurePort_s=tostring(events.SecondaryAzurePort_s),
PrimarybytesIn_d=toreal(events.PrimarybytesIn_d),
SubnetRegion2_s=tostring(events.SubnetRegion2_s),
VirtualAppliances_s=tostring(events.VirtualAppliances_s),
BackendIPAddress_s=tostring(events.BackendIPAddress_s),
BackendAddressPool_s=tostring(events.BackendAddressPool_s),
BackendPort_d=toreal(events.BackendPort_d),
FloatingIPEnabled_b=tostring(events.FloatingIPEnabled_b),
FrontendIPAddress_s=tostring(events.FrontendIPAddress_s),
FrontendPort_d=toreal(events.FrontendPort_d),
PrimarybytesOut_d=toreal(events.PrimarybytesOut_d),
Protocol_s=tostring(events.Protocol_s),
ServiceProviderProperties_s=tostring(events.ServiceProviderProperties_s),
ServiceProviderProvisioningState_s=tostring(events.ServiceProviderProvisioningState_s),
SkuDetail_s=tostring(events.SkuDetail_s),
AzureASN_d=toreal(events.AzureASN_d),
PeerASN_d=toreal(events.PeerASN_d),
PeeringType_s=tostring(events.PeeringType_s),
PrimaryAzurePort_s=tostring(events.PrimaryAzurePort_s),
PrimaryPeerAddressPrefix_s=tostring(events.PrimaryPeerAddressPrefix_s),
CircuitProvisioningState_s=tostring(events.CircuitProvisioningState_s),
ApplicationGatewayBackendPools_s=tostring(events.ApplicationGatewayBackendPools_s),
SourcePortRange_s=tostring(events.SourcePortRange_s),
SourceAddressPrefix_s=tostring(events.SourceAddressPrefix_s),
NetworkFlowType_s=tostring(events.NetworkFlowType_s),
SrcIP_s=tostring(events.SrcIP_s),
DestIP_s=tostring(events.DestIP_s),
VMIP_s=tostring(events.VMIP_s),
DestPort_d=toreal(events.DestPort_d),
L4Protocol_s=tostring(events.L4Protocol_s),
IsFlowCapturedAtUDRHop_b=tostring(events.IsFlowCapturedAtUDRHop_b),
NSGList_s=tostring(events.NSGList_s),
FlowEndTime_t=todatetime(events.FlowEndTime_t),
NSGRules_s=tostring(events.NSGRules_s),
NSGRuleType_s=tostring(events.NSGRuleType_s),
Subscription1_g=tostring(events.Subscription1_g),
Subscription2_g=tostring(events.Subscription2_g),
Region1_s=tostring(events.Region1_s),
Region2_s=tostring(events.Region2_s),
NIC_s=tostring(events.NIC_s),
NIC1_s=tostring(events.NIC1_s),
NIC2_s=tostring(events.NIC2_s),
NSGRule_s=tostring(events.NSGRule_s),
VM_s=tostring(events.VM_s),
FlowStartTime_t=todatetime(events.FlowStartTime_t),
FlowIntervalStartTime_t=todatetime(events.FlowIntervalStartTime_t),
PublicIPs_s=tostring(events.PublicIPs_s),
FlowStatus_s=tostring(events.FlowStatus_s),
Computer=tostring(events.Computer),
FlowDirection_s=tostring(events.FlowDirection_s),
FlowType_s=tostring(events.FlowType_s),
SrcPublicIPs_s=tostring(events.SrcPublicIPs_s),
L7Protocol_s=tostring(events.L7Protocol_s),
DestPublicIPs_s=tostring(events.DestPublicIPs_s),
FlowIntervalEndTime_t=todatetime(events.FlowIntervalEndTime_t),
DestPort_d=toreal(events.DestPort_d),
MG=tostring(events.MG),
ManagementGroupName=tostring(events.ManagementGroupName),
RawData=tostring(events.RawData),
FlowEndTime_s=tostring(events.FlowEndTime_s),
FlowStartTime_s=tostring(events.FlowStartTime_s),
Subscription2_s=tostring(events.Subscription2_s),
Subscription1_s=tostring(events.Subscription1_s),
FASchemaVersion_s=tostring(events.FASchemaVersion_s),
SourceSystem=tostring(events.SourceSystem),
VM1_s=tostring(events.VM1_s),
VM2_s=tostring(events.VM2_s),
Subnet_s=tostring(events.Subnet_s),
CompletedFlows_d=toreal(events.CompletedFlows_d),
batchSizeInBytes_d=toreal(events.batchSizeInBytes_d),
Priority_d=toreal(events.Priority_d),
Tags_s=tostring(events.Tags_s),
VmssName_s=tostring(events.VmssName_s),
AddressPrefixes_s=tostring(events.AddressPrefixes_s),
RouteTable_s=tostring(events.RouteTable_s),
AddressPrefix_s=tostring(events.AddressPrefix_s),
OutboundBytes_d=toreal(events.OutboundBytes_d),
NextHopIP_s=tostring(events.NextHopIP_s),
FlowLogStorageAccount_s=tostring(events.FlowLogStorageAccount_s),
IsFlowEnabled_b=tostring(events.IsFlowEnabled_b),
Access_s=tostring(events.Access_s),
Description_s=tostring(events.Description_s),
DestinationAddressPrefix_s=tostring(events.DestinationAddressPrefix_s),
DestinationPortRange_s=tostring(events.DestinationPortRange_s),
Direction_s=tostring(events.Direction_s),
RuleType_s=tostring(events.RuleType_s),
NextHopType_s=tostring(events.NextHopType_s),
InboundBytes_d=toreal(events.InboundBytes_d),
OutboundPackets_d=toreal(events.OutboundPackets_d),
InboundPackets_d=toreal(events.InboundPackets_d),
Routes_s=tostring(events.Routes_s),
ApplicationGateway1_s=tostring(events.ApplicationGateway1_s),
ApplicationGateway2_s=tostring(events.ApplicationGateway2_s),
LoadBalancer1_s=tostring(events.LoadBalancer1_s),
LoadBalancer2_s=tostring(events.LoadBalancer2_s),
LocalNetworkGateway1_s=tostring(events.LocalNetworkGateway1_s),
LocalNetworkGateway2_s=tostring(events.LocalNetworkGateway2_s),
ExpressRouteCircuit1_s=tostring(events.ExpressRouteCircuit1_s),
ExpressRouteCircuit2_s=tostring(events.ExpressRouteCircuit2_s),
ExpressRouteCircuitPeeringType_s=tostring(events.ExpressRouteCircuitPeeringType_s),
ConnectionName_s=tostring(events.ConnectionName_s),
ConnectingVNets_s=tostring(events.ConnectingVNets_s),
Country_s=tostring(events.Country_s),
AzureRegion_s=tostring(events.AzureRegion_s),
AllowedInFlows_d=toreal(events.AllowedInFlows_d),
DeniedInFlows_d=toreal(events.DeniedInFlows_d),
AllowedOutFlows_d=toreal(events.AllowedOutFlows_d),
DeniedOutFlows_d=toreal(events.DeniedOutFlows_d),
FlowCount_d=toreal(events.FlowCount_d),
TimeProcessed_t=todatetime(events.TimeProcessed_t),
TopologyVersion_s=tostring(events.TopologyVersion_s),
Type=tostring(events.Type),
_ResourceId=tostring(events._ResourceId),
_TimeReceived=todatetime(now())
}

.alter table AzureNetworkAnalytics_CL policy update @'[{"Source": "AzureNetworkAnalytics_CLRaw", "Query": "AzureNetworkAnalytics_CLExpand()", "IsEnabled": "True", "IsTransactional": true}]'
