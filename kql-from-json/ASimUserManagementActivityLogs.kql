// ============================================================================
// Azure Data Explorer KQL Script for ASimUserManagementActivityLogs
// ============================================================================
// Generated: 2025-09-19 14:22:59
// Table type: Custom (presumed for JSON exports)
// Schema imported from JSON export file
// ============================================================================

.create-merge table ASimUserManagementActivityLogsRaw (records:dynamic)

.alter-merge table ASimUserManagementActivityLogsRaw policy retention softdelete = 1d

.alter table ASimUserManagementActivityLogsRaw policy caching hot = 1h

// JSON mapping - choose appropriate option based on data structure
.create-or-alter table ASimUserManagementActivityLogsRaw ingestion json mapping 'ASimUserManagementActivityLogsRawMapping' '[{"column":"records","Properties":{"path":"$.records"}}]'
// Alternative for direct events: '[{"column":"records","Properties":{"path":"$"}}]'

.create-merge table ASimUserManagementActivityLogs(
TimeGenerated:datetime,
TenantId:guid,
SrcGeoRegion:string,
SrcGeoLongitude:real,
SrcGeoLatitude:real,
SrcGeoCountry:string,
SrcDeviceType:string,
SrcDvcScope:string,
SrcDvcScopeId:string,
SrcDvcIdType:string,
SrcDvcId:string,
SrcDescription:string,
SrcFQDN:string,
GroupOriginalType:string,
GroupType:string,
GroupNameType:string,
GroupName:string,
GroupIdType:string,
GroupId:string,
TargetOriginalUserType:string,
TargetUserSessionId:string,
TargetUserType:string,
TargetUsernameType:string,
TargetUsername:string,
TargetUserScope:string,
SrcGeoCity:string,
TargetUserScopeId:string,
SrcRiskLevel:int,
ActingAppId:string,
EventEndTime:datetime,
EventStartTime:datetime,
EventSchemaVersion:string,
EventSchema:string,
ThreatLastReportedTime:datetime,
ThreatFirstReportedTime:datetime,
ThreatIsActive:bool,
ThreatOriginalConfidence:string,
ThreatConfidence:int,
ThreatField:string,
ThreatOriginalRiskLevel:string,
ThreatRiskLevel:int,
ThreatCategory:string,
ThreatName:string,
ThreatId:string,
RuleNumber:int,
RuleName:string,
NewPropertyValue:string,
PreviousPropertyValue:string,
HttpUserAgent:string,
ActingOriginalAppType:string,
ActingAppType:string,
ActingAppName:string,
SrcOriginalRiskLevel:string,
TargetUserIdType:string,
TargetUserUid:string,
TargetUserId:string,
EventMessage:string,
SrcDomainType:string,
SrcDomain:string,
SrcMacAddr:string,
SrcHostname:string,
SrcPortNumber:int,
SrcIpAddr:string,
DvcAction:string,
DvcIdType:string,
DvcId:string,
DvcFQDN:string,
DvcDomainType:string,
DvcDomain:string,
DvcHostname:string,
DvcIpAddr:string,
EventResultDetails:string,
ActorUsernameType:string,
ActorUsername:string,
EventType:string,
EventSeverity:string,
EventResult:string,
EventVendor:string,
EventProduct:string,
EventCount:int,
EventSubType:string,
EventOriginalUid:string,
EventOriginalType:string,
ActorSessionId:string,
ActorOriginalUserType:string,
ActorUserType:string,
ActorScope:string,
ActorScopeId:string,
ActorUserIdType:string,
ActorUserSid:string,
ActorUserAadId:string,
ActorUserId:string,
DvcScope:string,
DvcScopeId:string,
AdditionalFields:dynamic,
DvcInterface:string,
DvcOsVersion:string,
DvcOs:string,
DvcZone:string,
DvcMacAddr:string,
DvcDescription:string,
EventReportUrl:string,
EventOwner:string,
EventProductVersion:string,
EventOriginalSeverity:string,
EventOriginalResultDetails:string,
EventOriginalSubType:string,
DvcOriginalAction:string,
SourceSystem:string,
Type:string,
_TimeReceived:datetime)

.alter table ASimUserManagementActivityLogs policy caching hot = 1d

.create-or-alter function ASimUserManagementActivityLogsExpand() {
ASimUserManagementActivityLogsRaw
| mv-expand events = records
// Alternative for non-nested: | extend events = records
| project
TimeGenerated=todatetime(events.TimeGenerated),
TenantId=toguid(events.TenantId),
SrcGeoRegion=tostring(events.SrcGeoRegion),
SrcGeoLongitude=toreal(events.SrcGeoLongitude),
SrcGeoLatitude=toreal(events.SrcGeoLatitude),
SrcGeoCountry=tostring(events.SrcGeoCountry),
SrcDeviceType=tostring(events.SrcDeviceType),
SrcDvcScope=tostring(events.SrcDvcScope),
SrcDvcScopeId=tostring(events.SrcDvcScopeId),
SrcDvcIdType=tostring(events.SrcDvcIdType),
SrcDvcId=tostring(events.SrcDvcId),
SrcDescription=tostring(events.SrcDescription),
SrcFQDN=tostring(events.SrcFQDN),
GroupOriginalType=tostring(events.GroupOriginalType),
GroupType=tostring(events.GroupType),
GroupNameType=tostring(events.GroupNameType),
GroupName=tostring(events.GroupName),
GroupIdType=tostring(events.GroupIdType),
GroupId=tostring(events.GroupId),
TargetOriginalUserType=tostring(events.TargetOriginalUserType),
TargetUserSessionId=tostring(events.TargetUserSessionId),
TargetUserType=tostring(events.TargetUserType),
TargetUsernameType=tostring(events.TargetUsernameType),
TargetUsername=tostring(events.TargetUsername),
TargetUserScope=tostring(events.TargetUserScope),
SrcGeoCity=tostring(events.SrcGeoCity),
TargetUserScopeId=tostring(events.TargetUserScopeId),
SrcRiskLevel=toint(events.SrcRiskLevel),
ActingAppId=tostring(events.ActingAppId),
EventEndTime=todatetime(events.EventEndTime),
EventStartTime=todatetime(events.EventStartTime),
EventSchemaVersion=tostring(events.EventSchemaVersion),
EventSchema=tostring(events.EventSchema),
ThreatLastReportedTime=todatetime(events.ThreatLastReportedTime),
ThreatFirstReportedTime=todatetime(events.ThreatFirstReportedTime),
ThreatIsActive=tobool(events.ThreatIsActive),
ThreatOriginalConfidence=tostring(events.ThreatOriginalConfidence),
ThreatConfidence=toint(events.ThreatConfidence),
ThreatField=tostring(events.ThreatField),
ThreatOriginalRiskLevel=tostring(events.ThreatOriginalRiskLevel),
ThreatRiskLevel=toint(events.ThreatRiskLevel),
ThreatCategory=tostring(events.ThreatCategory),
ThreatName=tostring(events.ThreatName),
ThreatId=tostring(events.ThreatId),
RuleNumber=toint(events.RuleNumber),
RuleName=tostring(events.RuleName),
NewPropertyValue=tostring(events.NewPropertyValue),
PreviousPropertyValue=tostring(events.PreviousPropertyValue),
HttpUserAgent=tostring(events.HttpUserAgent),
ActingOriginalAppType=tostring(events.ActingOriginalAppType),
ActingAppType=tostring(events.ActingAppType),
ActingAppName=tostring(events.ActingAppName),
SrcOriginalRiskLevel=tostring(events.SrcOriginalRiskLevel),
TargetUserIdType=tostring(events.TargetUserIdType),
TargetUserUid=tostring(events.TargetUserUid),
TargetUserId=tostring(events.TargetUserId),
EventMessage=tostring(events.EventMessage),
SrcDomainType=tostring(events.SrcDomainType),
SrcDomain=tostring(events.SrcDomain),
SrcMacAddr=tostring(events.SrcMacAddr),
SrcHostname=tostring(events.SrcHostname),
SrcPortNumber=toint(events.SrcPortNumber),
SrcIpAddr=tostring(events.SrcIpAddr),
DvcAction=tostring(events.DvcAction),
DvcIdType=tostring(events.DvcIdType),
DvcId=tostring(events.DvcId),
DvcFQDN=tostring(events.DvcFQDN),
DvcDomainType=tostring(events.DvcDomainType),
DvcDomain=tostring(events.DvcDomain),
DvcHostname=tostring(events.DvcHostname),
DvcIpAddr=tostring(events.DvcIpAddr),
EventResultDetails=tostring(events.EventResultDetails),
ActorUsernameType=tostring(events.ActorUsernameType),
ActorUsername=tostring(events.ActorUsername),
EventType=tostring(events.EventType),
EventSeverity=tostring(events.EventSeverity),
EventResult=tostring(events.EventResult),
EventVendor=tostring(events.EventVendor),
EventProduct=tostring(events.EventProduct),
EventCount=toint(events.EventCount),
EventSubType=tostring(events.EventSubType),
EventOriginalUid=tostring(events.EventOriginalUid),
EventOriginalType=tostring(events.EventOriginalType),
ActorSessionId=tostring(events.ActorSessionId),
ActorOriginalUserType=tostring(events.ActorOriginalUserType),
ActorUserType=tostring(events.ActorUserType),
ActorScope=tostring(events.ActorScope),
ActorScopeId=tostring(events.ActorScopeId),
ActorUserIdType=tostring(events.ActorUserIdType),
ActorUserSid=tostring(events.ActorUserSid),
ActorUserAadId=tostring(events.ActorUserAadId),
ActorUserId=tostring(events.ActorUserId),
DvcScope=tostring(events.DvcScope),
DvcScopeId=tostring(events.DvcScopeId),
AdditionalFields=todynamic(events.AdditionalFields),
DvcInterface=tostring(events.DvcInterface),
DvcOsVersion=tostring(events.DvcOsVersion),
DvcOs=tostring(events.DvcOs),
DvcZone=tostring(events.DvcZone),
DvcMacAddr=tostring(events.DvcMacAddr),
DvcDescription=tostring(events.DvcDescription),
EventReportUrl=tostring(events.EventReportUrl),
EventOwner=tostring(events.EventOwner),
EventProductVersion=tostring(events.EventProductVersion),
EventOriginalSeverity=tostring(events.EventOriginalSeverity),
EventOriginalResultDetails=tostring(events.EventOriginalResultDetails),
EventOriginalSubType=tostring(events.EventOriginalSubType),
DvcOriginalAction=tostring(events.DvcOriginalAction),
SourceSystem=tostring(events.SourceSystem),
Type=tostring(events.Type),
_TimeReceived=todatetime(now())
}

.alter table ASimUserManagementActivityLogs policy update @'[{"Source": "ASimUserManagementActivityLogsRaw", "Query": "ASimUserManagementActivityLogsExpand()", "IsEnabled": "True", "IsTransactional": true}]'
