// ============================================================================
// Azure Data Explorer KQL Script for ASimNetworkSessionLogs
// ============================================================================
// Generated: 2025-09-13 20:17:11
// Table type: Custom (presumed for JSON exports)
// Schema imported from JSON export file
// ============================================================================

.create-merge table ASimNetworkSessionLogsRaw (records:dynamic)

.alter-merge table ASimNetworkSessionLogsRaw policy retention softdelete = 1d

.alter table ASimNetworkSessionLogsRaw policy caching hot = 1h

// JSON mapping - choose appropriate option based on data structure
.create-or-alter table ASimNetworkSessionLogsRaw ingestion json mapping 'ASimNetworkSessionLogsRawMapping' '[{"column":"records","Properties":{"path":"$.records"}}]'
// Alternative for direct events: '[{"column":"records","Properties":{"path":"$"}}]'

.create-merge table ASimNetworkSessionLogs(
TimeGenerated:datetime,
TenantId:guid,
SrcDomainType:string,
SrcDomain:string,
SrcHostname:string,
DvcIdType:string,
DvcId:string,
DvcFQDN:string,
EventReportUrl:string,
EventOriginalUid:string,
NetworkProtocol:string,
DstIpAddr:string,
SrcPortNumber:int,
SrcIpAddr:string,
AdditionalFields:dynamic,
DvcOsVersion:string,
DvcOs:string,
DvcDomainType:string,
DvcDomain:string,
ThreatId:string,
ThreatName:string,
ThreatCategory:string,
ThreatRiskLevel:int,
ThreatOriginalRiskLevel:string,
EventType:string,
SrcFQDN:string,
EventSubType:string,
EventResultDetails:string,
EventOriginalType:string,
EventProduct:string,
EventVendor:string,
DvcIpAddr:string,
DvcHostname:string,
EventResult:string,
NetworkRuleNumber:int,
SrcDvcId:string,
ThreatIpAddr:string,
DstDescription:string,
ThreatOriginalConfidence:string,
ThreatLastReportedTime:datetime,
ThreatFirstReportedTime:datetime,
EventOriginalResultDetails:string,
DvcDescription:string,
NetworkDuration:int,
ThreatConfidence:int,
ThreatIsActive:bool,
ThreatField:string,
TcpFlagsSyn:bool,
TcpFlagsUrg:bool,
TcpFlagsRst:bool,
TcpFlagsPsh:bool,
TcpFlagsFin:bool,
TcpFlagsAck:bool,
DstDeviceType:string,
SrcDeviceType:string,
SrcUserId:string,
SrcUserIdType:string,
SrcUsername:string,
SrcUsernameType:string,
SrcUserType:string,
SrcDvcIdType:string,
SrcOriginalUserType:string,
DstHostname:string,
DstDomain:string,
DstDomainType:string,
DstFQDN:string,
DstDvcId:string,
DstDvcIdType:string,
DstPortNumber:int,
NetworkRuleName:string,
DvcOutboundInterface:string,
DvcInboundInterface:string,
DstInterfaceName:string,
DstZone:string,
NetworkSessionId:string,
NetworkPackets:long,
SrcPackets:long,
DstPackets:long,
NetworkBytes:long,
SrcBytes:long,
DstBytes:long,
NetworkConnectionHistory:string,
NetworkIcmpType:string,
NetworkIcmpCode:int,
NetworkDirection:string,
NetworkProtocolVersion:string,
NetworkApplicationProtocol:string,
EventOriginalSubType:string,
EventOriginalSeverity:string,
EventCount:int,
EventSchemaVersion:string,
DvcAction:string,
EventMessage:string,
EventSeverity:string,
EventStartTime:datetime,
DstInterfaceGuid:string,
EventEndTime:datetime,
Dvc:string,
DvcZone:string,
EventProductVersion:string,
DvcOriginalAction:string,
DvcInterface:string,
DvcSubscriptionId:string,
DvcMacAddr:string,
DstMacAddr:string,
DstVlanId:string,
DstSubscriptionId:string,
SrcVlanId:string,
SrcSubscriptionId:string,
SrcGeoCountry:string,
SrcGeoRegion:string,
SrcGeoCity:string,
SrcGeoLatitude:real,
SrcMacAddr:string,
SrcGeoLongitude:real,
SrcAppId:string,
SrcAppType:string,
DstNatIpAddr:string,
DstNatPortNumber:int,
SrcNatIpAddr:string,
SrcNatPortNumber:int,
SrcAppName:string,
SrcDescription:string,
SrcInterfaceGuid:string,
SrcZone:string,
DstGeoCountry:string,
DstGeoRegion:string,
DstGeoCity:string,
DstGeoLatitude:real,
DstGeoLongitude:real,
DstUserId:string,
SrcInterfaceName:string,
DstUserIdType:string,
DstUsernameType:string,
DstUserType:string,
DstOriginalUserType:string,
DstAppName:string,
DstAppId:string,
DstAppType:string,
DstUsername:string,
SourceSystem:string,
Type:string,
_TimeReceived:datetime)

.alter table ASimNetworkSessionLogs policy caching hot = 1d

.create-or-alter function ASimNetworkSessionLogsExpand() {
ASimNetworkSessionLogsRaw
| mv-expand events = records
// Alternative for non-nested: | extend events = records
| project
TimeGenerated=todatetime(events.TimeGenerated),
TenantId=toguid(events.TenantId),
SrcDomainType=tostring(events.SrcDomainType),
SrcDomain=tostring(events.SrcDomain),
SrcHostname=tostring(events.SrcHostname),
DvcIdType=tostring(events.DvcIdType),
DvcId=tostring(events.DvcId),
DvcFQDN=tostring(events.DvcFQDN),
EventReportUrl=tostring(events.EventReportUrl),
EventOriginalUid=tostring(events.EventOriginalUid),
NetworkProtocol=tostring(events.NetworkProtocol),
DstIpAddr=tostring(events.DstIpAddr),
SrcPortNumber=toint(events.SrcPortNumber),
SrcIpAddr=tostring(events.SrcIpAddr),
AdditionalFields=todynamic(events.AdditionalFields),
DvcOsVersion=tostring(events.DvcOsVersion),
DvcOs=tostring(events.DvcOs),
DvcDomainType=tostring(events.DvcDomainType),
DvcDomain=tostring(events.DvcDomain),
ThreatId=tostring(events.ThreatId),
ThreatName=tostring(events.ThreatName),
ThreatCategory=tostring(events.ThreatCategory),
ThreatRiskLevel=toint(events.ThreatRiskLevel),
ThreatOriginalRiskLevel=tostring(events.ThreatOriginalRiskLevel),
EventType=tostring(events.EventType),
SrcFQDN=tostring(events.SrcFQDN),
EventSubType=tostring(events.EventSubType),
EventResultDetails=tostring(events.EventResultDetails),
EventOriginalType=tostring(events.EventOriginalType),
EventProduct=tostring(events.EventProduct),
EventVendor=tostring(events.EventVendor),
DvcIpAddr=tostring(events.DvcIpAddr),
DvcHostname=tostring(events.DvcHostname),
EventResult=tostring(events.EventResult),
NetworkRuleNumber=toint(events.NetworkRuleNumber),
SrcDvcId=tostring(events.SrcDvcId),
ThreatIpAddr=tostring(events.ThreatIpAddr),
DstDescription=tostring(events.DstDescription),
ThreatOriginalConfidence=tostring(events.ThreatOriginalConfidence),
ThreatLastReportedTime=todatetime(events.ThreatLastReportedTime),
ThreatFirstReportedTime=todatetime(events.ThreatFirstReportedTime),
EventOriginalResultDetails=tostring(events.EventOriginalResultDetails),
DvcDescription=tostring(events.DvcDescription),
NetworkDuration=toint(events.NetworkDuration),
ThreatConfidence=toint(events.ThreatConfidence),
ThreatIsActive=tobool(events.ThreatIsActive),
ThreatField=tostring(events.ThreatField),
TcpFlagsSyn=tobool(events.TcpFlagsSyn),
TcpFlagsUrg=tobool(events.TcpFlagsUrg),
TcpFlagsRst=tobool(events.TcpFlagsRst),
TcpFlagsPsh=tobool(events.TcpFlagsPsh),
TcpFlagsFin=tobool(events.TcpFlagsFin),
TcpFlagsAck=tobool(events.TcpFlagsAck),
DstDeviceType=tostring(events.DstDeviceType),
SrcDeviceType=tostring(events.SrcDeviceType),
SrcUserId=tostring(events.SrcUserId),
SrcUserIdType=tostring(events.SrcUserIdType),
SrcUsername=tostring(events.SrcUsername),
SrcUsernameType=tostring(events.SrcUsernameType),
SrcUserType=tostring(events.SrcUserType),
SrcDvcIdType=tostring(events.SrcDvcIdType),
SrcOriginalUserType=tostring(events.SrcOriginalUserType),
DstHostname=tostring(events.DstHostname),
DstDomain=tostring(events.DstDomain),
DstDomainType=tostring(events.DstDomainType),
DstFQDN=tostring(events.DstFQDN),
DstDvcId=tostring(events.DstDvcId),
DstDvcIdType=tostring(events.DstDvcIdType),
DstPortNumber=toint(events.DstPortNumber),
NetworkRuleName=tostring(events.NetworkRuleName),
DvcOutboundInterface=tostring(events.DvcOutboundInterface),
DvcInboundInterface=tostring(events.DvcInboundInterface),
DstInterfaceName=tostring(events.DstInterfaceName),
DstZone=tostring(events.DstZone),
NetworkSessionId=tostring(events.NetworkSessionId),
NetworkPackets=tolong(events.NetworkPackets),
SrcPackets=tolong(events.SrcPackets),
DstPackets=tolong(events.DstPackets),
NetworkBytes=tolong(events.NetworkBytes),
SrcBytes=tolong(events.SrcBytes),
DstBytes=tolong(events.DstBytes),
NetworkConnectionHistory=tostring(events.NetworkConnectionHistory),
NetworkIcmpType=tostring(events.NetworkIcmpType),
NetworkIcmpCode=toint(events.NetworkIcmpCode),
NetworkDirection=tostring(events.NetworkDirection),
NetworkProtocolVersion=tostring(events.NetworkProtocolVersion),
NetworkApplicationProtocol=tostring(events.NetworkApplicationProtocol),
EventOriginalSubType=tostring(events.EventOriginalSubType),
EventOriginalSeverity=tostring(events.EventOriginalSeverity),
EventCount=toint(events.EventCount),
EventSchemaVersion=tostring(events.EventSchemaVersion),
DvcAction=tostring(events.DvcAction),
EventMessage=tostring(events.EventMessage),
EventSeverity=tostring(events.EventSeverity),
EventStartTime=todatetime(events.EventStartTime),
DstInterfaceGuid=tostring(events.DstInterfaceGuid),
EventEndTime=todatetime(events.EventEndTime),
Dvc=tostring(events.Dvc),
DvcZone=tostring(events.DvcZone),
EventProductVersion=tostring(events.EventProductVersion),
DvcOriginalAction=tostring(events.DvcOriginalAction),
DvcInterface=tostring(events.DvcInterface),
DvcSubscriptionId=tostring(events.DvcSubscriptionId),
DvcMacAddr=tostring(events.DvcMacAddr),
DstMacAddr=tostring(events.DstMacAddr),
DstVlanId=tostring(events.DstVlanId),
DstSubscriptionId=tostring(events.DstSubscriptionId),
SrcVlanId=tostring(events.SrcVlanId),
SrcSubscriptionId=tostring(events.SrcSubscriptionId),
SrcGeoCountry=tostring(events.SrcGeoCountry),
SrcGeoRegion=tostring(events.SrcGeoRegion),
SrcGeoCity=tostring(events.SrcGeoCity),
SrcGeoLatitude=toreal(events.SrcGeoLatitude),
SrcMacAddr=tostring(events.SrcMacAddr),
SrcGeoLongitude=toreal(events.SrcGeoLongitude),
SrcAppId=tostring(events.SrcAppId),
SrcAppType=tostring(events.SrcAppType),
DstNatIpAddr=tostring(events.DstNatIpAddr),
DstNatPortNumber=toint(events.DstNatPortNumber),
SrcNatIpAddr=tostring(events.SrcNatIpAddr),
SrcNatPortNumber=toint(events.SrcNatPortNumber),
SrcAppName=tostring(events.SrcAppName),
SrcDescription=tostring(events.SrcDescription),
SrcInterfaceGuid=tostring(events.SrcInterfaceGuid),
SrcZone=tostring(events.SrcZone),
DstGeoCountry=tostring(events.DstGeoCountry),
DstGeoRegion=tostring(events.DstGeoRegion),
DstGeoCity=tostring(events.DstGeoCity),
DstGeoLatitude=toreal(events.DstGeoLatitude),
DstGeoLongitude=toreal(events.DstGeoLongitude),
DstUserId=tostring(events.DstUserId),
SrcInterfaceName=tostring(events.SrcInterfaceName),
DstUserIdType=tostring(events.DstUserIdType),
DstUsernameType=tostring(events.DstUsernameType),
DstUserType=tostring(events.DstUserType),
DstOriginalUserType=tostring(events.DstOriginalUserType),
DstAppName=tostring(events.DstAppName),
DstAppId=tostring(events.DstAppId),
DstAppType=tostring(events.DstAppType),
DstUsername=tostring(events.DstUsername),
SourceSystem=tostring(events.SourceSystem),
Type=tostring(events.Type),
_TimeReceived=todatetime(now())
}

.alter table ASimNetworkSessionLogs policy update @'[{"Source": "ASimNetworkSessionLogsRaw", "Query": "ASimNetworkSessionLogsExpand()", "IsEnabled": "True", "IsTransactional": true}]'
