// ============================================================================
// Azure Data Explorer KQL Script for ASimDhcpEventLogs
// ============================================================================
// Generated: 2025-09-19 14:22:58
// Table type: Custom (presumed for JSON exports)
// Schema imported from JSON export file
// ============================================================================

.create-merge table ASimDhcpEventLogsRaw (records:dynamic)

.alter-merge table ASimDhcpEventLogsRaw policy retention softdelete = 1d

.alter table ASimDhcpEventLogsRaw policy caching hot = 1h

// JSON mapping - choose appropriate option based on data structure
.create-or-alter table ASimDhcpEventLogsRaw ingestion json mapping 'ASimDhcpEventLogsRawMapping' '[{"column":"records","Properties":{"path":"$.records"}}]'
// Alternative for direct events: '[{"column":"records","Properties":{"path":"$"}}]'

.create-merge table ASimDhcpEventLogs(
TimeGenerated:datetime,
TenantId:guid,
SrcUserUid:string,
SrcUserType:string,
SrcUserSessionId:string,
SrcUserScopeId:string,
SrcUserScope:string,
SrcUsernameType:string,
SrcUsername:string,
SrcUserIdType:string,
SrcUserId:string,
SrcGeoCountry:string,
SrcPortNumber:int,
SrcDescription:string,
SrcFQDN:string,
SrcDvcScopeId:string,
SrcDvcScope:string,
SrcDvcIdType:string,
SrcDvcId:string,
SrcDomainType:string,
SrcDeviceType:string,
RequestedIpAddr:string,
SrcOriginalUserType:string,
EventSubType:string,
SrcGeoLatitude:real,
SrcGeoRegion:string,
EventEndTime:datetime,
EventStartTime:datetime,
EventSchemaVersion:string,
EventSchema:string,
ThreatLastReportedTime:datetime,
ThreatFirstReportedTime:datetime,
ThreatIsActive:bool,
ThreatOriginalConfidence:string,
ThreatConfidence:int,
SrcGeoLongitude:real,
ThreatField:string,
ThreatRiskLevel:int,
ThreatCategory:string,
ThreatName:string,
ThreatId:string,
RuleNumber:int,
RuleName:string,
SrcOriginalRiskLevel:string,
SrcRiskLevel:int,
SrcGeoCity:string,
ThreatOriginalRiskLevel:string,
AdditionalFields:dynamic,
EventReportUrl:string,
EventOwner:string,
DvcIpAddr:string,
EventResultDetails:string,
DhcpVendorClassId:string,
DhcpVendorClass:string,
DhcpUserClassId:string,
DhcpUserClass:string,
DhcpSubscriberId:string,
DhcpSrcDHCId:string,
DhcpSessionId:string,
DvcHostname:string,
DhcpSessionDuration:int,
DhcpCircuitId:string,
SrcMacAddr:string,
SrcIpAddr:string,
SrcHostname:string,
EventType:string,
EventSeverity:string,
EventResult:string,
EventVendor:string,
EventProduct:string,
DhcpLeaseDuration:int,
EventProductVersion:string,
DvcAction:string,
DvcDomain:string,
EventOriginalUid:string,
EventOriginalType:string,
EventOriginalSubType:string,
EventOriginalSeverity:string,
EventOriginalResultDetails:string,
EventMessage:string,
EventCount:int,
SrcDomain:string,
DvcZone:string,
DvcDescription:string,
DvcScopeId:string,
DvcOsVersion:string,
DvcOs:string,
DvcOriginalAction:string,
DvcMacAddr:string,
DvcInterface:string,
DvcIdType:string,
DvcId:string,
DvcFQDN:string,
DvcDomainType:string,
DvcScope:string,
SourceSystem:string,
Type:string,
_TimeReceived:datetime)

.alter table ASimDhcpEventLogs policy caching hot = 1d

.create-or-alter function ASimDhcpEventLogsExpand() {
ASimDhcpEventLogsRaw
| mv-expand events = records
// Alternative for non-nested: | extend events = records
| project
TimeGenerated=todatetime(events.TimeGenerated),
TenantId=toguid(events.TenantId),
SrcUserUid=tostring(events.SrcUserUid),
SrcUserType=tostring(events.SrcUserType),
SrcUserSessionId=tostring(events.SrcUserSessionId),
SrcUserScopeId=tostring(events.SrcUserScopeId),
SrcUserScope=tostring(events.SrcUserScope),
SrcUsernameType=tostring(events.SrcUsernameType),
SrcUsername=tostring(events.SrcUsername),
SrcUserIdType=tostring(events.SrcUserIdType),
SrcUserId=tostring(events.SrcUserId),
SrcGeoCountry=tostring(events.SrcGeoCountry),
SrcPortNumber=toint(events.SrcPortNumber),
SrcDescription=tostring(events.SrcDescription),
SrcFQDN=tostring(events.SrcFQDN),
SrcDvcScopeId=tostring(events.SrcDvcScopeId),
SrcDvcScope=tostring(events.SrcDvcScope),
SrcDvcIdType=tostring(events.SrcDvcIdType),
SrcDvcId=tostring(events.SrcDvcId),
SrcDomainType=tostring(events.SrcDomainType),
SrcDeviceType=tostring(events.SrcDeviceType),
RequestedIpAddr=tostring(events.RequestedIpAddr),
SrcOriginalUserType=tostring(events.SrcOriginalUserType),
EventSubType=tostring(events.EventSubType),
SrcGeoLatitude=toreal(events.SrcGeoLatitude),
SrcGeoRegion=tostring(events.SrcGeoRegion),
EventEndTime=todatetime(events.EventEndTime),
EventStartTime=todatetime(events.EventStartTime),
EventSchemaVersion=tostring(events.EventSchemaVersion),
EventSchema=tostring(events.EventSchema),
ThreatLastReportedTime=todatetime(events.ThreatLastReportedTime),
ThreatFirstReportedTime=todatetime(events.ThreatFirstReportedTime),
ThreatIsActive=tobool(events.ThreatIsActive),
ThreatOriginalConfidence=tostring(events.ThreatOriginalConfidence),
ThreatConfidence=toint(events.ThreatConfidence),
SrcGeoLongitude=toreal(events.SrcGeoLongitude),
ThreatField=tostring(events.ThreatField),
ThreatRiskLevel=toint(events.ThreatRiskLevel),
ThreatCategory=tostring(events.ThreatCategory),
ThreatName=tostring(events.ThreatName),
ThreatId=tostring(events.ThreatId),
RuleNumber=toint(events.RuleNumber),
RuleName=tostring(events.RuleName),
SrcOriginalRiskLevel=tostring(events.SrcOriginalRiskLevel),
SrcRiskLevel=toint(events.SrcRiskLevel),
SrcGeoCity=tostring(events.SrcGeoCity),
ThreatOriginalRiskLevel=tostring(events.ThreatOriginalRiskLevel),
AdditionalFields=todynamic(events.AdditionalFields),
EventReportUrl=tostring(events.EventReportUrl),
EventOwner=tostring(events.EventOwner),
DvcIpAddr=tostring(events.DvcIpAddr),
EventResultDetails=tostring(events.EventResultDetails),
DhcpVendorClassId=tostring(events.DhcpVendorClassId),
DhcpVendorClass=tostring(events.DhcpVendorClass),
DhcpUserClassId=tostring(events.DhcpUserClassId),
DhcpUserClass=tostring(events.DhcpUserClass),
DhcpSubscriberId=tostring(events.DhcpSubscriberId),
DhcpSrcDHCId=tostring(events.DhcpSrcDHCId),
DhcpSessionId=tostring(events.DhcpSessionId),
DvcHostname=tostring(events.DvcHostname),
DhcpSessionDuration=toint(events.DhcpSessionDuration),
DhcpCircuitId=tostring(events.DhcpCircuitId),
SrcMacAddr=tostring(events.SrcMacAddr),
SrcIpAddr=tostring(events.SrcIpAddr),
SrcHostname=tostring(events.SrcHostname),
EventType=tostring(events.EventType),
EventSeverity=tostring(events.EventSeverity),
EventResult=tostring(events.EventResult),
EventVendor=tostring(events.EventVendor),
EventProduct=tostring(events.EventProduct),
DhcpLeaseDuration=toint(events.DhcpLeaseDuration),
EventProductVersion=tostring(events.EventProductVersion),
DvcAction=tostring(events.DvcAction),
DvcDomain=tostring(events.DvcDomain),
EventOriginalUid=tostring(events.EventOriginalUid),
EventOriginalType=tostring(events.EventOriginalType),
EventOriginalSubType=tostring(events.EventOriginalSubType),
EventOriginalSeverity=tostring(events.EventOriginalSeverity),
EventOriginalResultDetails=tostring(events.EventOriginalResultDetails),
EventMessage=tostring(events.EventMessage),
EventCount=toint(events.EventCount),
SrcDomain=tostring(events.SrcDomain),
DvcZone=tostring(events.DvcZone),
DvcDescription=tostring(events.DvcDescription),
DvcScopeId=tostring(events.DvcScopeId),
DvcOsVersion=tostring(events.DvcOsVersion),
DvcOs=tostring(events.DvcOs),
DvcOriginalAction=tostring(events.DvcOriginalAction),
DvcMacAddr=tostring(events.DvcMacAddr),
DvcInterface=tostring(events.DvcInterface),
DvcIdType=tostring(events.DvcIdType),
DvcId=tostring(events.DvcId),
DvcFQDN=tostring(events.DvcFQDN),
DvcDomainType=tostring(events.DvcDomainType),
DvcScope=tostring(events.DvcScope),
SourceSystem=tostring(events.SourceSystem),
Type=tostring(events.Type),
_TimeReceived=todatetime(now())
}

.alter table ASimDhcpEventLogs policy update @'[{"Source": "ASimDhcpEventLogsRaw", "Query": "ASimDhcpEventLogsExpand()", "IsEnabled": "True", "IsTransactional": true}]'
