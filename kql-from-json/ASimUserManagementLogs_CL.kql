// ============================================================================
// Azure Data Explorer KQL Script for ASimUserManagementLogs_CL
// ============================================================================
// Generated: 2025-09-17 06:15:55
// Table type: Custom (presumed for JSON exports)
// Schema imported from JSON export file
// ============================================================================

.create-merge table ASimUserManagementLogs_CLRaw (records:dynamic)

.alter-merge table ASimUserManagementLogs_CLRaw policy retention softdelete = 1d

.alter table ASimUserManagementLogs_CLRaw policy caching hot = 1h

// JSON mapping - choose appropriate option based on data structure
.create-or-alter table ASimUserManagementLogs_CLRaw ingestion json mapping 'ASimUserManagementLogs_CLRawMapping' '[{"column":"records","Properties":{"path":"$.records"}}]'
// Alternative for direct events: '[{"column":"records","Properties":{"path":"$"}}]'

.create-merge table ASimUserManagementLogs_CL(
TimeGenerated:datetime,
AdditionalFields:dynamic,
SrcIpAddr:string,
GroupOriginalType:string,
GroupType:string,
GroupNameType:string,
GroupName:string,
GroupIdType:string,
GroupId:string,
TargetOriginalUserType:string,
TargetUserType:string,
TargetUsernameType:string,
TargetUsername:string,
TargetScope:string,
TargetScopeId:string,
TargetUserIdType:string,
TargetUserId:string,
ActorSessionId:string,
ActorOriginalUserType:string,
SrcPortNumber:int,
SrcHostname:string,
SrcDomain:string,
SrcDomainType:string,
HttpUserAgent:string,
ActingAppType:string,
ActingAppName:string,
ActingAppId:string,
SrcOriginalRiskLevel:string,
SrcRiskLevel:int,
SrcGeoCity:string,
SrcGeoRegion:string,
ActorUserType:string,
SrcGeoLongitude:real,
SrcGeoCountry:string,
SrcDeviceType:string,
SrcDvcScope:string,
SrcDvcScopeId:string,
SrcDvcIdType:string,
SrcDvcId:string,
SrcDescription:string,
SrcFQDN:string,
SrcGeoLatitude:real,
ActorUsernameType:string,
ActorUsername:string,
ActorScope:string,
EventSchemaVersion:string,
EventVendor:string,
EventProductVersion:string,
EventProduct:string,
EventOriginalSeverity:string,
EventSeverity:string,
EventOriginalResultDetails:string,
EventOriginalSubType:string,
EventOwner:string,
EventOriginalType:string,
EventResultDetails:string,
EventResult:string,
EventSubType:string,
EventType:string,
EventEndTime:datetime,
EventStartTime:datetime,
EventCount:int,
EventMessage:string,
EventOriginalUid:string,
PreviousPropertyValue:string,
EventReportUrl:string,
DvcHostname:string,
ActorScopeId:string,
ActorUserIdType:string,
ActorUserId:string,
DvcScope:string,
DvcScopeId:string,
DvcInterface:string,
DvcOriginalAction:string,
DvcAction:string,
DvcIpAddr:string,
DvcOsVersion:string,
DvcZone:string,
DvcMacAddr:string,
DvcIdType:string,
DvcId:string,
DvcDescription:string,
DvcFQDN:string,
DvcDomainType:string,
DvcDomain:string,
DvcOs:string,
NewPropertyValue:string,
_TimeReceived:datetime)

.alter table ASimUserManagementLogs_CL policy caching hot = 1d

.create-or-alter function ASimUserManagementLogs_CLExpand() {
ASimUserManagementLogs_CLRaw
| mv-expand events = records
// Alternative for non-nested: | extend events = records
| project
TimeGenerated=todatetime(events.TimeGenerated),
AdditionalFields=todynamic(events.AdditionalFields),
SrcIpAddr=tostring(events.SrcIpAddr),
GroupOriginalType=tostring(events.GroupOriginalType),
GroupType=tostring(events.GroupType),
GroupNameType=tostring(events.GroupNameType),
GroupName=tostring(events.GroupName),
GroupIdType=tostring(events.GroupIdType),
GroupId=tostring(events.GroupId),
TargetOriginalUserType=tostring(events.TargetOriginalUserType),
TargetUserType=tostring(events.TargetUserType),
TargetUsernameType=tostring(events.TargetUsernameType),
TargetUsername=tostring(events.TargetUsername),
TargetScope=tostring(events.TargetScope),
TargetScopeId=tostring(events.TargetScopeId),
TargetUserIdType=tostring(events.TargetUserIdType),
TargetUserId=tostring(events.TargetUserId),
ActorSessionId=tostring(events.ActorSessionId),
ActorOriginalUserType=tostring(events.ActorOriginalUserType),
SrcPortNumber=toint(events.SrcPortNumber),
SrcHostname=tostring(events.SrcHostname),
SrcDomain=tostring(events.SrcDomain),
SrcDomainType=tostring(events.SrcDomainType),
HttpUserAgent=tostring(events.HttpUserAgent),
ActingAppType=tostring(events.ActingAppType),
ActingAppName=tostring(events.ActingAppName),
ActingAppId=tostring(events.ActingAppId),
SrcOriginalRiskLevel=tostring(events.SrcOriginalRiskLevel),
SrcRiskLevel=toint(events.SrcRiskLevel),
SrcGeoCity=tostring(events.SrcGeoCity),
SrcGeoRegion=tostring(events.SrcGeoRegion),
ActorUserType=tostring(events.ActorUserType),
SrcGeoLongitude=toreal(events.SrcGeoLongitude),
SrcGeoCountry=tostring(events.SrcGeoCountry),
SrcDeviceType=tostring(events.SrcDeviceType),
SrcDvcScope=tostring(events.SrcDvcScope),
SrcDvcScopeId=tostring(events.SrcDvcScopeId),
SrcDvcIdType=tostring(events.SrcDvcIdType),
SrcDvcId=tostring(events.SrcDvcId),
SrcDescription=tostring(events.SrcDescription),
SrcFQDN=tostring(events.SrcFQDN),
SrcGeoLatitude=toreal(events.SrcGeoLatitude),
ActorUsernameType=tostring(events.ActorUsernameType),
ActorUsername=tostring(events.ActorUsername),
ActorScope=tostring(events.ActorScope),
EventSchemaVersion=tostring(events.EventSchemaVersion),
EventVendor=tostring(events.EventVendor),
EventProductVersion=tostring(events.EventProductVersion),
EventProduct=tostring(events.EventProduct),
EventOriginalSeverity=tostring(events.EventOriginalSeverity),
EventSeverity=tostring(events.EventSeverity),
EventOriginalResultDetails=tostring(events.EventOriginalResultDetails),
EventOriginalSubType=tostring(events.EventOriginalSubType),
EventOwner=tostring(events.EventOwner),
EventOriginalType=tostring(events.EventOriginalType),
EventResultDetails=tostring(events.EventResultDetails),
EventResult=tostring(events.EventResult),
EventSubType=tostring(events.EventSubType),
EventType=tostring(events.EventType),
EventEndTime=todatetime(events.EventEndTime),
EventStartTime=todatetime(events.EventStartTime),
EventCount=toint(events.EventCount),
EventMessage=tostring(events.EventMessage),
EventOriginalUid=tostring(events.EventOriginalUid),
PreviousPropertyValue=tostring(events.PreviousPropertyValue),
EventReportUrl=tostring(events.EventReportUrl),
DvcHostname=tostring(events.DvcHostname),
ActorScopeId=tostring(events.ActorScopeId),
ActorUserIdType=tostring(events.ActorUserIdType),
ActorUserId=tostring(events.ActorUserId),
DvcScope=tostring(events.DvcScope),
DvcScopeId=tostring(events.DvcScopeId),
DvcInterface=tostring(events.DvcInterface),
DvcOriginalAction=tostring(events.DvcOriginalAction),
DvcAction=tostring(events.DvcAction),
DvcIpAddr=tostring(events.DvcIpAddr),
DvcOsVersion=tostring(events.DvcOsVersion),
DvcZone=tostring(events.DvcZone),
DvcMacAddr=tostring(events.DvcMacAddr),
DvcIdType=tostring(events.DvcIdType),
DvcId=tostring(events.DvcId),
DvcDescription=tostring(events.DvcDescription),
DvcFQDN=tostring(events.DvcFQDN),
DvcDomainType=tostring(events.DvcDomainType),
DvcDomain=tostring(events.DvcDomain),
DvcOs=tostring(events.DvcOs),
NewPropertyValue=tostring(events.NewPropertyValue),
_TimeReceived=todatetime(now())
}

.alter table ASimUserManagementLogs_CL policy update @'[{"Source": "ASimUserManagementLogs_CLRaw", "Query": "ASimUserManagementLogs_CLExpand()", "IsEnabled": "True", "IsTransactional": true}]'
