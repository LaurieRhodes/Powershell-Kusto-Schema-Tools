// ============================================================================
// Azure Data Explorer KQL Script for CyberArkEPM_CL
// ============================================================================
// Generated: 2025-09-19 14:23:04
// Table type: Custom (presumed for JSON exports)
// Schema imported from JSON export file
// ============================================================================

.create-merge table CyberArkEPM_CLRaw (records:dynamic)

.alter-merge table CyberArkEPM_CLRaw policy retention softdelete = 1d

.alter table CyberArkEPM_CLRaw policy caching hot = 1h

// JSON mapping - choose appropriate option based on data structure
.create-or-alter table CyberArkEPM_CLRaw ingestion json mapping 'CyberArkEPM_CLRawMapping' '[{"column":"records","Properties":{"path":"$.records"}}]'
// Alternative for direct events: '[{"column":"records","Properties":{"path":"$"}}]'

.create-merge table CyberArkEPM_CL(
TimeGenerated:datetime,
TenantId:guid,
productName_s:string,
fileDescription_s:string,
filePath_s:string,
company_s:string,
packageName_s:string,
threatProtectionAction_s:string,
originalFileName_s:string,
productVersion_s:string,
fileName_s:string,
sourceName_s:string,
sourceType_s:string,
policyName_s:string,
event_type_s:string,
lastAgentId_g:string,
defenceActionId_d:real,
deceptionType_d:real,
userName_s:string,
fileVersion_s:string,
modificationTime_t:datetime,
userIsAdmin_b:bool,
sourceProcessSigner_s:string,
sourceProcessPublisher_s:string,
sourceProcessHash_s:string,
sourceProcessUsername_s:string,
sourceProcessCommandLine_s:string,
accessTargetName_s:string,
justification_s:string,
logonStatusId_d:real,
logonAttemptTypeId_d:real,
winEventRecordId_d:real,
winEventType_d:real,
owner_s:string,
displayName_s:string,
processCommandLine_s:string,
accessTargetType_s:string,
accessAction_s:string,
agentEventCount_d:real,
aggregatedBy_s:string,
skipped_b:bool,
skippedCount_d:real,
fileLocation_s:string,
hash_s:string,
lastEventDisplayName_s:string,
fileQualifier_s:string,
bundleId_s:string,
bundleVersion_s:string,
bundleName_s:string,
applicationSubType_s:string,
justificationEmail_s:string,
fileAccessPermission_s:string,
adminTaskId_s:string,
policyId_d:real,
set_name_s:string,
RawData:string,
Computer:string,
ManagementGroupName:string,
MG:string,
SourceSystem:string,
publisher_s:string,
evidences_s:string,
totalEvents_d:real,
eventType_s:string,
agentId_g:string,
appPackageDisplayName_s:string,
url_s:string,
mimeType_s:string,
CLSID_s:string,
fileSize_d:real,
firstEventUserName_s:string,
firstEventDate_t:datetime,
affectedUsers_d:real,
affectedComputers_d:real,
lastEventFileName_s:string,
threatDetectionAction_s:string,
lastEventJustification_s:string,
lastEventUserName_s:string,
lastEventDate_t:datetime,
lastEventSourceName_s:string,
lastEventSourceType_s:string,
applicationType_s:string,
processCommandLine_g:string,
Type:string,
_ResourceId:string,
_TimeReceived:datetime)

.alter table CyberArkEPM_CL policy caching hot = 1d

.create-or-alter function CyberArkEPM_CLExpand() {
CyberArkEPM_CLRaw
| mv-expand events = records
// Alternative for non-nested: | extend events = records
| project
TimeGenerated=todatetime(events.TimeGenerated),
TenantId=toguid(events.TenantId),
productName_s=tostring(events.productName_s),
fileDescription_s=tostring(events.fileDescription_s),
filePath_s=tostring(events.filePath_s),
company_s=tostring(events.company_s),
packageName_s=tostring(events.packageName_s),
threatProtectionAction_s=tostring(events.threatProtectionAction_s),
originalFileName_s=tostring(events.originalFileName_s),
productVersion_s=tostring(events.productVersion_s),
fileName_s=tostring(events.fileName_s),
sourceName_s=tostring(events.sourceName_s),
sourceType_s=tostring(events.sourceType_s),
policyName_s=tostring(events.policyName_s),
event_type_s=tostring(events.event_type_s),
lastAgentId_g=tostring(events.lastAgentId_g),
defenceActionId_d=toreal(events.defenceActionId_d),
deceptionType_d=toreal(events.deceptionType_d),
userName_s=tostring(events.userName_s),
fileVersion_s=tostring(events.fileVersion_s),
modificationTime_t=todatetime(events.modificationTime_t),
userIsAdmin_b=tobool(events.userIsAdmin_b),
sourceProcessSigner_s=tostring(events.sourceProcessSigner_s),
sourceProcessPublisher_s=tostring(events.sourceProcessPublisher_s),
sourceProcessHash_s=tostring(events.sourceProcessHash_s),
sourceProcessUsername_s=tostring(events.sourceProcessUsername_s),
sourceProcessCommandLine_s=tostring(events.sourceProcessCommandLine_s),
accessTargetName_s=tostring(events.accessTargetName_s),
justification_s=tostring(events.justification_s),
logonStatusId_d=toreal(events.logonStatusId_d),
logonAttemptTypeId_d=toreal(events.logonAttemptTypeId_d),
winEventRecordId_d=toreal(events.winEventRecordId_d),
winEventType_d=toreal(events.winEventType_d),
owner_s=tostring(events.owner_s),
displayName_s=tostring(events.displayName_s),
processCommandLine_s=tostring(events.processCommandLine_s),
accessTargetType_s=tostring(events.accessTargetType_s),
accessAction_s=tostring(events.accessAction_s),
agentEventCount_d=toreal(events.agentEventCount_d),
aggregatedBy_s=tostring(events.aggregatedBy_s),
skipped_b=tobool(events.skipped_b),
skippedCount_d=toreal(events.skippedCount_d),
fileLocation_s=tostring(events.fileLocation_s),
hash_s=tostring(events.hash_s),
lastEventDisplayName_s=tostring(events.lastEventDisplayName_s),
fileQualifier_s=tostring(events.fileQualifier_s),
bundleId_s=tostring(events.bundleId_s),
bundleVersion_s=tostring(events.bundleVersion_s),
bundleName_s=tostring(events.bundleName_s),
applicationSubType_s=tostring(events.applicationSubType_s),
justificationEmail_s=tostring(events.justificationEmail_s),
fileAccessPermission_s=tostring(events.fileAccessPermission_s),
adminTaskId_s=tostring(events.adminTaskId_s),
policyId_d=toreal(events.policyId_d),
set_name_s=tostring(events.set_name_s),
RawData=tostring(events.RawData),
Computer=tostring(events.Computer),
ManagementGroupName=tostring(events.ManagementGroupName),
MG=tostring(events.MG),
SourceSystem=tostring(events.SourceSystem),
publisher_s=tostring(events.publisher_s),
evidences_s=tostring(events.evidences_s),
totalEvents_d=toreal(events.totalEvents_d),
eventType_s=tostring(events.eventType_s),
agentId_g=tostring(events.agentId_g),
appPackageDisplayName_s=tostring(events.appPackageDisplayName_s),
url_s=tostring(events.url_s),
mimeType_s=tostring(events.mimeType_s),
CLSID_s=tostring(events.CLSID_s),
fileSize_d=toreal(events.fileSize_d),
firstEventUserName_s=tostring(events.firstEventUserName_s),
firstEventDate_t=todatetime(events.firstEventDate_t),
affectedUsers_d=toreal(events.affectedUsers_d),
affectedComputers_d=toreal(events.affectedComputers_d),
lastEventFileName_s=tostring(events.lastEventFileName_s),
threatDetectionAction_s=tostring(events.threatDetectionAction_s),
lastEventJustification_s=tostring(events.lastEventJustification_s),
lastEventUserName_s=tostring(events.lastEventUserName_s),
lastEventDate_t=todatetime(events.lastEventDate_t),
lastEventSourceName_s=tostring(events.lastEventSourceName_s),
lastEventSourceType_s=tostring(events.lastEventSourceType_s),
applicationType_s=tostring(events.applicationType_s),
processCommandLine_g=tostring(events.processCommandLine_g),
Type=tostring(events.Type),
_ResourceId=tostring(events._ResourceId),
_TimeReceived=todatetime(now())
}

.alter table CyberArkEPM_CL policy update @'[{"Source": "CyberArkEPM_CLRaw", "Query": "CyberArkEPM_CLExpand()", "IsEnabled": "True", "IsTransactional": true}]'
