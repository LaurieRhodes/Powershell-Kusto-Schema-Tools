// ============================================================================
// Azure Data Explorer KQL Script for ASimAuditEventLogs
// ============================================================================
// Generated: 2025-09-19 14:22:58
// Table type: Custom (presumed for JSON exports)
// Schema imported from JSON export file
// ============================================================================

.create-merge table ASimAuditEventLogsRaw (records:dynamic)

.alter-merge table ASimAuditEventLogsRaw policy retention softdelete = 1d

.alter table ASimAuditEventLogsRaw policy caching hot = 1h

// JSON mapping - choose appropriate option based on data structure
.create-or-alter table ASimAuditEventLogsRaw ingestion json mapping 'ASimAuditEventLogsRawMapping' '[{"column":"records","Properties":{"path":"$.records"}}]'
// Alternative for direct events: '[{"column":"records","Properties":{"path":"$"}}]'

.create-merge table ASimAuditEventLogs(
TimeGenerated:datetime,
TenantId:guid,
SrcGeoLongitude:real,
SrcGeoLatitude:real,
SrcGeoCountry:string,
SrcDeviceType:string,
SrcDvcScope:string,
SrcDvcScopeId:string,
SrcDvcIdType:string,
SrcDvcId:string,
SrcDescription:string,
SrcFQDN:string,
SrcDomainType:string,
SrcDomain:string,
SrcGeoRegion:string,
SrcHostname:string,
SrcIpAddr:string,
HttpUserAgent:string,
ActingOriginalAppType:string,
ActingAppType:string,
ActingAppName:string,
ActingAppId:string,
TargetUrl:string,
TargetOriginalAppType:string,
TargetAppType:string,
TargetAppName:string,
TargetAppId:string,
ActorSessionId:string,
SrcPortNumber:int,
SrcGeoCity:string,
SrcRiskLevel:int,
SrcOriginalRiskLevel:string,
NewValue:string,
OldValue:string,
OriginalObjectType:string,
ObjectType:string,
Object:string,
ObjectId:string,
Operation:string,
TargetDvcOs:string,
TargetOriginalRiskLevel:string,
TargetRiskLevel:int,
TargetGeoCity:string,
TargetGeoRegion:string,
TargetGeoLongitude:real,
TargetGeoLatitude:real,
TargetGeoCountry:string,
TargetDeviceType:string,
TargetDvcScope:string,
TargetDvcScopeId:string,
TargetDvcIdType:string,
TargetDvcId:string,
TargetDescription:string,
TargetFQDN:string,
TargetDomainType:string,
TargetDomain:string,
TargetHostname:string,
TargetPortNumber:int,
TargetIpAddr:string,
ActorOriginalUserType:string,
ActorUserType:string,
ActorUsernameType:string,
ActorUsername:string,
ThreatRiskLevel:int,
ThreatCategory:string,
ThreatName:string,
ThreatId:string,
RuleNumber:int,
RuleName:string,
EventReportUrl:string,
EventOwner:string,
EventSchemaVersion:string,
EventVendor:string,
EventProductVersion:string,
EventProduct:string,
EventOriginalSeverity:string,
EventSeverity:string,
EventOriginalResultDetails:string,
EventOriginalSubType:string,
EventOriginalType:string,
EventOriginalUid:string,
EventResultDetails:string,
EventResult:string,
EventSubType:string,
EventType:string,
EventEndTime:datetime,
EventStartTime:datetime,
EventCount:int,
EventMessage:string,
AdditionalFields:dynamic,
ThreatOriginalRiskLevel:string,
ValueType:string,
ThreatConfidence:int,
ThreatIsActive:bool,
ActorScope:string,
ActorScopeId:string,
ActorUserIdType:string,
ActorUserSid:string,
ActorUserAadId:string,
ActorUserId:string,
DvcScope:string,
DvcScopeId:string,
DvcInterface:string,
DvcOriginalAction:string,
DvcAction:string,
DvcOsVersion:string,
DvcOs:string,
DvcZone:string,
DvcMacAddr:string,
DvcIdType:string,
DvcId:string,
DvcDescription:string,
DvcFQDN:string,
DvcDomainType:string,
DvcDomain:string,
DvcHostname:string,
DvcIpAddr:string,
ThreatIpAddr:string,
ThreatField:string,
ThreatLastReportedTime:datetime,
ThreatFirstReportedTime:datetime,
ThreatOriginalConfidence:string,
SourceSystem:string,
Type:string,
_TimeReceived:datetime)

.alter table ASimAuditEventLogs policy caching hot = 1d

.create-or-alter function ASimAuditEventLogsExpand() {
ASimAuditEventLogsRaw
| mv-expand events = records
// Alternative for non-nested: | extend events = records
| project
TimeGenerated=todatetime(events.TimeGenerated),
TenantId=toguid(events.TenantId),
SrcGeoLongitude=toreal(events.SrcGeoLongitude),
SrcGeoLatitude=toreal(events.SrcGeoLatitude),
SrcGeoCountry=tostring(events.SrcGeoCountry),
SrcDeviceType=tostring(events.SrcDeviceType),
SrcDvcScope=tostring(events.SrcDvcScope),
SrcDvcScopeId=tostring(events.SrcDvcScopeId),
SrcDvcIdType=tostring(events.SrcDvcIdType),
SrcDvcId=tostring(events.SrcDvcId),
SrcDescription=tostring(events.SrcDescription),
SrcFQDN=tostring(events.SrcFQDN),
SrcDomainType=tostring(events.SrcDomainType),
SrcDomain=tostring(events.SrcDomain),
SrcGeoRegion=tostring(events.SrcGeoRegion),
SrcHostname=tostring(events.SrcHostname),
SrcIpAddr=tostring(events.SrcIpAddr),
HttpUserAgent=tostring(events.HttpUserAgent),
ActingOriginalAppType=tostring(events.ActingOriginalAppType),
ActingAppType=tostring(events.ActingAppType),
ActingAppName=tostring(events.ActingAppName),
ActingAppId=tostring(events.ActingAppId),
TargetUrl=tostring(events.TargetUrl),
TargetOriginalAppType=tostring(events.TargetOriginalAppType),
TargetAppType=tostring(events.TargetAppType),
TargetAppName=tostring(events.TargetAppName),
TargetAppId=tostring(events.TargetAppId),
ActorSessionId=tostring(events.ActorSessionId),
SrcPortNumber=toint(events.SrcPortNumber),
SrcGeoCity=tostring(events.SrcGeoCity),
SrcRiskLevel=toint(events.SrcRiskLevel),
SrcOriginalRiskLevel=tostring(events.SrcOriginalRiskLevel),
NewValue=tostring(events.NewValue),
OldValue=tostring(events.OldValue),
OriginalObjectType=tostring(events.OriginalObjectType),
ObjectType=tostring(events.ObjectType),
Object=tostring(events.Object),
ObjectId=tostring(events.ObjectId),
Operation=tostring(events.Operation),
TargetDvcOs=tostring(events.TargetDvcOs),
TargetOriginalRiskLevel=tostring(events.TargetOriginalRiskLevel),
TargetRiskLevel=toint(events.TargetRiskLevel),
TargetGeoCity=tostring(events.TargetGeoCity),
TargetGeoRegion=tostring(events.TargetGeoRegion),
TargetGeoLongitude=toreal(events.TargetGeoLongitude),
TargetGeoLatitude=toreal(events.TargetGeoLatitude),
TargetGeoCountry=tostring(events.TargetGeoCountry),
TargetDeviceType=tostring(events.TargetDeviceType),
TargetDvcScope=tostring(events.TargetDvcScope),
TargetDvcScopeId=tostring(events.TargetDvcScopeId),
TargetDvcIdType=tostring(events.TargetDvcIdType),
TargetDvcId=tostring(events.TargetDvcId),
TargetDescription=tostring(events.TargetDescription),
TargetFQDN=tostring(events.TargetFQDN),
TargetDomainType=tostring(events.TargetDomainType),
TargetDomain=tostring(events.TargetDomain),
TargetHostname=tostring(events.TargetHostname),
TargetPortNumber=toint(events.TargetPortNumber),
TargetIpAddr=tostring(events.TargetIpAddr),
ActorOriginalUserType=tostring(events.ActorOriginalUserType),
ActorUserType=tostring(events.ActorUserType),
ActorUsernameType=tostring(events.ActorUsernameType),
ActorUsername=tostring(events.ActorUsername),
ThreatRiskLevel=toint(events.ThreatRiskLevel),
ThreatCategory=tostring(events.ThreatCategory),
ThreatName=tostring(events.ThreatName),
ThreatId=tostring(events.ThreatId),
RuleNumber=toint(events.RuleNumber),
RuleName=tostring(events.RuleName),
EventReportUrl=tostring(events.EventReportUrl),
EventOwner=tostring(events.EventOwner),
EventSchemaVersion=tostring(events.EventSchemaVersion),
EventVendor=tostring(events.EventVendor),
EventProductVersion=tostring(events.EventProductVersion),
EventProduct=tostring(events.EventProduct),
EventOriginalSeverity=tostring(events.EventOriginalSeverity),
EventSeverity=tostring(events.EventSeverity),
EventOriginalResultDetails=tostring(events.EventOriginalResultDetails),
EventOriginalSubType=tostring(events.EventOriginalSubType),
EventOriginalType=tostring(events.EventOriginalType),
EventOriginalUid=tostring(events.EventOriginalUid),
EventResultDetails=tostring(events.EventResultDetails),
EventResult=tostring(events.EventResult),
EventSubType=tostring(events.EventSubType),
EventType=tostring(events.EventType),
EventEndTime=todatetime(events.EventEndTime),
EventStartTime=todatetime(events.EventStartTime),
EventCount=toint(events.EventCount),
EventMessage=tostring(events.EventMessage),
AdditionalFields=todynamic(events.AdditionalFields),
ThreatOriginalRiskLevel=tostring(events.ThreatOriginalRiskLevel),
ValueType=tostring(events.ValueType),
ThreatConfidence=toint(events.ThreatConfidence),
ThreatIsActive=tobool(events.ThreatIsActive),
ActorScope=tostring(events.ActorScope),
ActorScopeId=tostring(events.ActorScopeId),
ActorUserIdType=tostring(events.ActorUserIdType),
ActorUserSid=tostring(events.ActorUserSid),
ActorUserAadId=tostring(events.ActorUserAadId),
ActorUserId=tostring(events.ActorUserId),
DvcScope=tostring(events.DvcScope),
DvcScopeId=tostring(events.DvcScopeId),
DvcInterface=tostring(events.DvcInterface),
DvcOriginalAction=tostring(events.DvcOriginalAction),
DvcAction=tostring(events.DvcAction),
DvcOsVersion=tostring(events.DvcOsVersion),
DvcOs=tostring(events.DvcOs),
DvcZone=tostring(events.DvcZone),
DvcMacAddr=tostring(events.DvcMacAddr),
DvcIdType=tostring(events.DvcIdType),
DvcId=tostring(events.DvcId),
DvcDescription=tostring(events.DvcDescription),
DvcFQDN=tostring(events.DvcFQDN),
DvcDomainType=tostring(events.DvcDomainType),
DvcDomain=tostring(events.DvcDomain),
DvcHostname=tostring(events.DvcHostname),
DvcIpAddr=tostring(events.DvcIpAddr),
ThreatIpAddr=tostring(events.ThreatIpAddr),
ThreatField=tostring(events.ThreatField),
ThreatLastReportedTime=todatetime(events.ThreatLastReportedTime),
ThreatFirstReportedTime=todatetime(events.ThreatFirstReportedTime),
ThreatOriginalConfidence=tostring(events.ThreatOriginalConfidence),
SourceSystem=tostring(events.SourceSystem),
Type=tostring(events.Type),
_TimeReceived=todatetime(now())
}

.alter table ASimAuditEventLogs policy update @'[{"Source": "ASimAuditEventLogsRaw", "Query": "ASimAuditEventLogsExpand()", "IsEnabled": "True", "IsTransactional": true}]'
