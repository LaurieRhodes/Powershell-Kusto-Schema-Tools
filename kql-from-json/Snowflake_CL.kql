// ============================================================================
// Azure Data Explorer KQL Script for Snowflake_CL
// ============================================================================
// Generated: 2025-09-13 20:17:16
// Table type: Custom (presumed for JSON exports)
// Schema imported from JSON export file
// ============================================================================

.create-merge table Snowflake_CLRaw (records:dynamic)

.alter-merge table Snowflake_CLRaw policy retention softdelete = 1d

.alter table Snowflake_CLRaw policy caching hot = 1h

// JSON mapping - choose appropriate option based on data structure
.create-or-alter table Snowflake_CLRaw ingestion json mapping 'Snowflake_CLRawMapping' '[{"column":"records","Properties":{"path":"$.records"}}]'
// Alternative for direct events: '[{"column":"records","Properties":{"path":"$"}}]'

.create-merge table Snowflake_CL(
TimeGenerated:datetime,
BYTES_DELETED_d:real,
REPORTED_CLIENT_VERSION_s:string,
REPORTED_CLIENT_TYPE_s:string,
RELEASE_VERSION_s:string,
RELATED_EVENT_ID_s:string,
RawData:string,
QUEUED_REPAIR_TIME_d:real,
ROLE_NAME_s:string,
QUEUED_PROVISIONING_TIME_d:real,
QUERY_TYPE_s:string,
QUERY_TEXT_s:string,
QUERY_TAG_s:string,
QUERY_LOAD_PERCENT_d:real,
QUERY_ID_g:string,
PERCENTAGE_SCANNED_FROM_CACHE_d:real,
QUEUED_OVERLOAD_TIME_d:real,
PARTITIONS_TOTAL_d:real,
ROWS_DELETED_d:real,
ROWS_PRODUCED_d:real,
WAREHOUSE_NAME_s:string,
WAREHOUSE_ID_s:string,
USER_NAME_s:string,
TRANSACTION_BLOCKED_TIME_s:string,
TOTAL_ELAPSED_TIME_s:string,
TenantId:guid,
ROWS_INSERTED_d:real,
START_TIME_t:datetime,
source_table_s:string,
SESSION_ID_d:real,
SCHEMA_NAME_s:string,
SCHEMA_ID_s:string,
ROWS_UPDATED_s:string,
ROWS_UNLOADED_s:string,
SourceSystem:string,
PARTITIONS_SCANNED_s:string,
OUTBOUND_DATA_TRANSFER_BYTES_d:real,
MG:string,
DATABASE_NAME_s:string,
DATABASE_ID_d:real,
CREDITS_USED_CLOUD_SERVICES_d:real,
Computer:string,
COMPILATION_TIME_d:real,
CLUSTER_NUMBER_d:real,
END_TIME_t:datetime,
CLIENT_IP_s:string,
BYTES_WRITTEN_d:real,
BYTES_SPILLED_TO_REMOTE_STORAGE_d:real,
BYTES_SPILLED_TO_LOCAL_STORAGE_d:real,
BYTES_SENT_OVER_THE_NETWORK_d:real,
BYTES_SCANNED_d:real,
BYTES_READ_FROM_RESULT_d:real,
BYTES_WRITTEN_TO_RESULT_d:real,
ERROR_CODE_s:string,
ERROR_MESSAGE_s:string,
EVENT_ID_d:real,
ManagementGroupName:string,
LIST_EXTERNAL_FILES_TIME_t:datetime,
IS_SUCCESS_s:string,
IS_CLIENT_GENERATED_STATEMENT_b:bool,
INBOUND_DATA_TRANSFER_BYTES_s:string,
FIRST_AUTHENTICATION_FACTOR_s:string,
EXTERNAL_FUNCTION_TOTAL_SENT_ROWS_s:string,
EXTERNAL_FUNCTION_TOTAL_SENT_BYTES_s:string,
EXTERNAL_FUNCTION_TOTAL_RECEIVED_ROWS_s:string,
EXTERNAL_FUNCTION_TOTAL_RECEIVED_BYTES_s:string,
EXTERNAL_FUNCTION_TOTAL_INVOCATIONS_s:string,
EXECUTION_TIME_s:string,
EXECUTION_STATUS_s:string,
EVENT_TYPE_s:string,
EVENT_TIMESTAMP_t:datetime,
WAREHOUSE_SIZE_s:string,
WAREHOUSE_TYPE_s:string,
Type:string,
_ResourceId:string,
_TimeReceived:datetime)

.alter table Snowflake_CL policy caching hot = 1d

.create-or-alter function Snowflake_CLExpand() {
Snowflake_CLRaw
| mv-expand events = records
// Alternative for non-nested: | extend events = records
| project
TimeGenerated=todatetime(events.TimeGenerated),
BYTES_DELETED_d=toreal(events.BYTES_DELETED_d),
REPORTED_CLIENT_VERSION_s=tostring(events.REPORTED_CLIENT_VERSION_s),
REPORTED_CLIENT_TYPE_s=tostring(events.REPORTED_CLIENT_TYPE_s),
RELEASE_VERSION_s=tostring(events.RELEASE_VERSION_s),
RELATED_EVENT_ID_s=tostring(events.RELATED_EVENT_ID_s),
RawData=tostring(events.RawData),
QUEUED_REPAIR_TIME_d=toreal(events.QUEUED_REPAIR_TIME_d),
ROLE_NAME_s=tostring(events.ROLE_NAME_s),
QUEUED_PROVISIONING_TIME_d=toreal(events.QUEUED_PROVISIONING_TIME_d),
QUERY_TYPE_s=tostring(events.QUERY_TYPE_s),
QUERY_TEXT_s=tostring(events.QUERY_TEXT_s),
QUERY_TAG_s=tostring(events.QUERY_TAG_s),
QUERY_LOAD_PERCENT_d=toreal(events.QUERY_LOAD_PERCENT_d),
QUERY_ID_g=tostring(events.QUERY_ID_g),
PERCENTAGE_SCANNED_FROM_CACHE_d=toreal(events.PERCENTAGE_SCANNED_FROM_CACHE_d),
QUEUED_OVERLOAD_TIME_d=toreal(events.QUEUED_OVERLOAD_TIME_d),
PARTITIONS_TOTAL_d=toreal(events.PARTITIONS_TOTAL_d),
ROWS_DELETED_d=toreal(events.ROWS_DELETED_d),
ROWS_PRODUCED_d=toreal(events.ROWS_PRODUCED_d),
WAREHOUSE_NAME_s=tostring(events.WAREHOUSE_NAME_s),
WAREHOUSE_ID_s=tostring(events.WAREHOUSE_ID_s),
USER_NAME_s=tostring(events.USER_NAME_s),
TRANSACTION_BLOCKED_TIME_s=tostring(events.TRANSACTION_BLOCKED_TIME_s),
TOTAL_ELAPSED_TIME_s=tostring(events.TOTAL_ELAPSED_TIME_s),
TenantId=toguid(events.TenantId),
ROWS_INSERTED_d=toreal(events.ROWS_INSERTED_d),
START_TIME_t=todatetime(events.START_TIME_t),
source_table_s=tostring(events.source_table_s),
SESSION_ID_d=toreal(events.SESSION_ID_d),
SCHEMA_NAME_s=tostring(events.SCHEMA_NAME_s),
SCHEMA_ID_s=tostring(events.SCHEMA_ID_s),
ROWS_UPDATED_s=tostring(events.ROWS_UPDATED_s),
ROWS_UNLOADED_s=tostring(events.ROWS_UNLOADED_s),
SourceSystem=tostring(events.SourceSystem),
PARTITIONS_SCANNED_s=tostring(events.PARTITIONS_SCANNED_s),
OUTBOUND_DATA_TRANSFER_BYTES_d=toreal(events.OUTBOUND_DATA_TRANSFER_BYTES_d),
MG=tostring(events.MG),
DATABASE_NAME_s=tostring(events.DATABASE_NAME_s),
DATABASE_ID_d=toreal(events.DATABASE_ID_d),
CREDITS_USED_CLOUD_SERVICES_d=toreal(events.CREDITS_USED_CLOUD_SERVICES_d),
Computer=tostring(events.Computer),
COMPILATION_TIME_d=toreal(events.COMPILATION_TIME_d),
CLUSTER_NUMBER_d=toreal(events.CLUSTER_NUMBER_d),
END_TIME_t=todatetime(events.END_TIME_t),
CLIENT_IP_s=tostring(events.CLIENT_IP_s),
BYTES_WRITTEN_d=toreal(events.BYTES_WRITTEN_d),
BYTES_SPILLED_TO_REMOTE_STORAGE_d=toreal(events.BYTES_SPILLED_TO_REMOTE_STORAGE_d),
BYTES_SPILLED_TO_LOCAL_STORAGE_d=toreal(events.BYTES_SPILLED_TO_LOCAL_STORAGE_d),
BYTES_SENT_OVER_THE_NETWORK_d=toreal(events.BYTES_SENT_OVER_THE_NETWORK_d),
BYTES_SCANNED_d=toreal(events.BYTES_SCANNED_d),
BYTES_READ_FROM_RESULT_d=toreal(events.BYTES_READ_FROM_RESULT_d),
BYTES_WRITTEN_TO_RESULT_d=toreal(events.BYTES_WRITTEN_TO_RESULT_d),
ERROR_CODE_s=tostring(events.ERROR_CODE_s),
ERROR_MESSAGE_s=tostring(events.ERROR_MESSAGE_s),
EVENT_ID_d=toreal(events.EVENT_ID_d),
ManagementGroupName=tostring(events.ManagementGroupName),
LIST_EXTERNAL_FILES_TIME_t=todatetime(events.LIST_EXTERNAL_FILES_TIME_t),
IS_SUCCESS_s=tostring(events.IS_SUCCESS_s),
IS_CLIENT_GENERATED_STATEMENT_b=tobool(events.IS_CLIENT_GENERATED_STATEMENT_b),
INBOUND_DATA_TRANSFER_BYTES_s=tostring(events.INBOUND_DATA_TRANSFER_BYTES_s),
FIRST_AUTHENTICATION_FACTOR_s=tostring(events.FIRST_AUTHENTICATION_FACTOR_s),
EXTERNAL_FUNCTION_TOTAL_SENT_ROWS_s=tostring(events.EXTERNAL_FUNCTION_TOTAL_SENT_ROWS_s),
EXTERNAL_FUNCTION_TOTAL_SENT_BYTES_s=tostring(events.EXTERNAL_FUNCTION_TOTAL_SENT_BYTES_s),
EXTERNAL_FUNCTION_TOTAL_RECEIVED_ROWS_s=tostring(events.EXTERNAL_FUNCTION_TOTAL_RECEIVED_ROWS_s),
EXTERNAL_FUNCTION_TOTAL_RECEIVED_BYTES_s=tostring(events.EXTERNAL_FUNCTION_TOTAL_RECEIVED_BYTES_s),
EXTERNAL_FUNCTION_TOTAL_INVOCATIONS_s=tostring(events.EXTERNAL_FUNCTION_TOTAL_INVOCATIONS_s),
EXECUTION_TIME_s=tostring(events.EXECUTION_TIME_s),
EXECUTION_STATUS_s=tostring(events.EXECUTION_STATUS_s),
EVENT_TYPE_s=tostring(events.EVENT_TYPE_s),
EVENT_TIMESTAMP_t=todatetime(events.EVENT_TIMESTAMP_t),
WAREHOUSE_SIZE_s=tostring(events.WAREHOUSE_SIZE_s),
WAREHOUSE_TYPE_s=tostring(events.WAREHOUSE_TYPE_s),
Type=tostring(events.Type),
_ResourceId=tostring(events._ResourceId),
_TimeReceived=todatetime(now())
}

.alter table Snowflake_CL policy update @'[{"Source": "Snowflake_CLRaw", "Query": "Snowflake_CLExpand()", "IsEnabled": "True", "IsTransactional": true}]'
