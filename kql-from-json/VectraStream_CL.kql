// ============================================================================
// Azure Data Explorer KQL Script for VectraStream_CL
// ============================================================================
// Generated: 2025-09-13 20:17:17
// Table type: Custom (presumed for JSON exports)
// Schema imported from JSON export file
// ============================================================================

.create-merge table VectraStream_CLRaw (records:dynamic)

.alter-merge table VectraStream_CLRaw policy retention softdelete = 1d

.alter table VectraStream_CLRaw policy caching hot = 1h

// JSON mapping - choose appropriate option based on data structure
.create-or-alter table VectraStream_CLRaw ingestion json mapping 'VectraStream_CLRawMapping' '[{"column":"records","Properties":{"path":"$.records"}}]'
// Alternative for direct events: '[{"column":"records","Properties":{"path":"$"}}]'

.create-merge table VectraStream_CL(
TimeGenerated:datetime,
TenantId:guid,
saw_query_b:string,
saw_reply_b:string,
total_answers_d:real,
total_replies_d:real,
trans_id_d:real,
issuer_s:string,
next_protocol_s:string,
subject_s:string,
basic_constraints_ca_b:string,
basic_constraints_path_len_d:real,
rejected_b:string,
certificate_cn_s:string,
certificate_issuer_s:string,
certificate_key_alg_s:string,
certificate_key_length_s:string,
certificate_key_type_s:string,
certificate_not_valid_after_d:real,
certificate_not_valid_before_d:real,
certificate_self_issued_b:string,
certificate_serial_s:string,
certificate_sig_alg_s:string,
certificate_subject_s:string,
certificate_exponent_s:string,
certificate_version_d:real,
rcode_name_s:string,
query_s:string,
host_multihomed_b:string,
is_proxied_b:string,
method_s:string,
request_body_len_d:real,
request_header_count_d:real,
response_body_len_d:real,
response_header_count_d:real,
status_code_d:real,
status_msg_s:string,
uri_s:string,
rcode_d:real,
certificate_curve_s:string,
RA_b:string,
RD_b:string,
TC_b:string,
TTLs_s:string,
answers_s:string,
auth_s:string,
qclass_d:real,
qclass_name_s:string,
qtype_d:real,
qtype_name_s:string,
AA_b:string,
san_dns_s:string,
san_other_fields_b:string,
community_id_s:string,
resp_pkts_d:real,
resp_vlan_id_d:real,
sensor_uid_s:string,
service_s:string,
session_start_time_d:real,
ts_d:real,
uid_s:string,
cipher_s:string,
client_curve_num_s:string,
client_ec_point_format_s:string,
resp_multihomed_b:string,
client_extension_s:string,
client_version_num_d:real,
curve_s:string,
established_b:string,
ja3_g:string,
ja3s_g:string,
server_extensions_s:string,
server_name_s:string,
version_s:string,
version_num_d:real,
resp_hostname_s:string,
client_version_s:string,
resp_ip_bytes_s:string,
resp_domain_s:string,
protoName_s:string,
conn_state_s:string,
duration_d:real,
first_orig_resp_data_pkt_s:string,
first_orig_resp_data_pkt_time_d:real,
first_orig_resp_pkt_time_d:real,
first_resp_orig_data_pkt_s:string,
first_resp_orig_data_pkt_time_d:real,
first_resp_orig_pkt_time_d:real,
id_ip_ver_s:string,
id_orig_h_s:string,
id_orig_p_d:real,
id_resp_h_s:string,
id_resp_p_d:real,
local_orig_b:string,
local_resp_b:string,
metadata_type_s:string,
orig_hostname_s:string,
orig_huid_s:string,
orig_ip_bytes_s:string,
orig_pkts_d:real,
orig_sluid_s:string,
orig_vlan_id_d:real,
proto_d:real,
host_s:string,
path_s:string,
user_agent_s:string,
response_expires_s:string,
tls_b:string,
proxied_s:string,
error_s:string,
matched_dn_s:string,
referrer_s:string,
client_build_s:string,
desktop_height_d:real,
desktop_width_d:real,
keyboard_layout_s:string,
beacon_type_s:string,
msgid_s:string,
beacon_uid_s:string,
last_event_time_d:real,
orig_ip_bytes_d:real,
resp_domains_s:string,
resp_ip_bytes_d:real,
session_count_d:real,
resp_filename_s:string,
response_content_disposition_s:string,
cookie_s:string,
cookie_vars_s:string,
orig_mime_types_s:string,
first_event_time_d:real,
mail_from_s:string,
helo_s:string,
from_s:string,
SourceSystem:string,
MG:string,
ManagementGroupName:string,
Computer:string,
RawData:string,
client_dig_product_id_s:string,
client_dig_protocol_id_s:string,
client_name_s:string,
dir_confidence_d:real,
san_ip_s:string,
host_key_s:string,
application_s:string,
error_msg_s:string,
reply_to_s:string,
useragent_s:string,
second_received_s:string,
spf_mailfrom_s:string,
x_originating_ip_s:string,
first_received_s:string,
in_reply_to_s:string,
rcpt_to_s:string,
to_s:string,
date_s:string,
domain_s:string,
resp_huid_s:string,
status_d:real,
cipher_alg_s:string,
result_s:string,
result_code_s:string,
result_count_d:real,
base_object_s:string,
endpoint_s:string,
operation_s:string,
rtt_d:real,
action_s:string,
delete_on_close_b:string,
name_s:string,
response_bytes_s:string,
hostname_s:string,
client_subject_s:string,
certificate_serial_g:string,
resp_mime_types_s:string,
response_cache_control_s:string,
lease_time_d:real,
mac_s:string,
assigned_ip_s:string,
dhcp_server_ip_s:string,
dns_server_ips_s:string,
request_cache_control_s:string,
client_issuer_s:string,
request_bytes_s:string,
query_scope_s:string,
message_id_d:real,
compression_alg_s:string,
hassh_g:string,
hasshServer_g:string,
host_key_alg_s:string,
kex_alg_s:string,
mac_alg_s:string,
server_s:string,
client_s:string,
data_source_s:string,
error_code_s:string,
orig_host_observed_privilege_d:real,
protocol_d:real,
rep_cipher_s:string,
reply_timestamp_d:real,
req_ciphers_s:string,
request_type_s:string,
success_b:string,
attributes_s:string,
bind_error_count_d:real,
encrypted_sasl_payload_count_d:real,
is_close_b:string,
is_query_b:string,
logon_failure_error_count_d:real,
username_s:string,
resp_sluid_s:string,
Type:string,
_ResourceId:string,
_ItemId:string,
_TimeReceived:datetime)

.alter table VectraStream_CL policy caching hot = 1d

.create-or-alter function VectraStream_CLExpand() {
VectraStream_CLRaw
| mv-expand events = records
// Alternative for non-nested: | extend events = records
| project
TimeGenerated=todatetime(events.TimeGenerated),
TenantId=toguid(events.TenantId),
saw_query_b=tostring(events.saw_query_b),
saw_reply_b=tostring(events.saw_reply_b),
total_answers_d=toreal(events.total_answers_d),
total_replies_d=toreal(events.total_replies_d),
trans_id_d=toreal(events.trans_id_d),
issuer_s=tostring(events.issuer_s),
next_protocol_s=tostring(events.next_protocol_s),
subject_s=tostring(events.subject_s),
basic_constraints_ca_b=tostring(events.basic_constraints_ca_b),
basic_constraints_path_len_d=toreal(events.basic_constraints_path_len_d),
rejected_b=tostring(events.rejected_b),
certificate_cn_s=tostring(events.certificate_cn_s),
certificate_issuer_s=tostring(events.certificate_issuer_s),
certificate_key_alg_s=tostring(events.certificate_key_alg_s),
certificate_key_length_s=tostring(events.certificate_key_length_s),
certificate_key_type_s=tostring(events.certificate_key_type_s),
certificate_not_valid_after_d=toreal(events.certificate_not_valid_after_d),
certificate_not_valid_before_d=toreal(events.certificate_not_valid_before_d),
certificate_self_issued_b=tostring(events.certificate_self_issued_b),
certificate_serial_s=tostring(events.certificate_serial_s),
certificate_sig_alg_s=tostring(events.certificate_sig_alg_s),
certificate_subject_s=tostring(events.certificate_subject_s),
certificate_exponent_s=tostring(events.certificate_exponent_s),
certificate_version_d=toreal(events.certificate_version_d),
rcode_name_s=tostring(events.rcode_name_s),
query_s=tostring(events.query_s),
host_multihomed_b=tostring(events.host_multihomed_b),
is_proxied_b=tostring(events.is_proxied_b),
method_s=tostring(events.method_s),
request_body_len_d=toreal(events.request_body_len_d),
request_header_count_d=toreal(events.request_header_count_d),
response_body_len_d=toreal(events.response_body_len_d),
response_header_count_d=toreal(events.response_header_count_d),
status_code_d=toreal(events.status_code_d),
status_msg_s=tostring(events.status_msg_s),
uri_s=tostring(events.uri_s),
rcode_d=toreal(events.rcode_d),
certificate_curve_s=tostring(events.certificate_curve_s),
RA_b=tostring(events.RA_b),
RD_b=tostring(events.RD_b),
TC_b=tostring(events.TC_b),
TTLs_s=tostring(events.TTLs_s),
answers_s=tostring(events.answers_s),
auth_s=tostring(events.auth_s),
qclass_d=toreal(events.qclass_d),
qclass_name_s=tostring(events.qclass_name_s),
qtype_d=toreal(events.qtype_d),
qtype_name_s=tostring(events.qtype_name_s),
AA_b=tostring(events.AA_b),
san_dns_s=tostring(events.san_dns_s),
san_other_fields_b=tostring(events.san_other_fields_b),
community_id_s=tostring(events.community_id_s),
resp_pkts_d=toreal(events.resp_pkts_d),
resp_vlan_id_d=toreal(events.resp_vlan_id_d),
sensor_uid_s=tostring(events.sensor_uid_s),
service_s=tostring(events.service_s),
session_start_time_d=toreal(events.session_start_time_d),
ts_d=toreal(events.ts_d),
uid_s=tostring(events.uid_s),
cipher_s=tostring(events.cipher_s),
client_curve_num_s=tostring(events.client_curve_num_s),
client_ec_point_format_s=tostring(events.client_ec_point_format_s),
resp_multihomed_b=tostring(events.resp_multihomed_b),
client_extension_s=tostring(events.client_extension_s),
client_version_num_d=toreal(events.client_version_num_d),
curve_s=tostring(events.curve_s),
established_b=tostring(events.established_b),
ja3_g=tostring(events.ja3_g),
ja3s_g=tostring(events.ja3s_g),
server_extensions_s=tostring(events.server_extensions_s),
server_name_s=tostring(events.server_name_s),
version_s=tostring(events.version_s),
version_num_d=toreal(events.version_num_d),
resp_hostname_s=tostring(events.resp_hostname_s),
client_version_s=tostring(events.client_version_s),
resp_ip_bytes_s=tostring(events.resp_ip_bytes_s),
resp_domain_s=tostring(events.resp_domain_s),
protoName_s=tostring(events.protoName_s),
conn_state_s=tostring(events.conn_state_s),
duration_d=toreal(events.duration_d),
first_orig_resp_data_pkt_s=tostring(events.first_orig_resp_data_pkt_s),
first_orig_resp_data_pkt_time_d=toreal(events.first_orig_resp_data_pkt_time_d),
first_orig_resp_pkt_time_d=toreal(events.first_orig_resp_pkt_time_d),
first_resp_orig_data_pkt_s=tostring(events.first_resp_orig_data_pkt_s),
first_resp_orig_data_pkt_time_d=toreal(events.first_resp_orig_data_pkt_time_d),
first_resp_orig_pkt_time_d=toreal(events.first_resp_orig_pkt_time_d),
id_ip_ver_s=tostring(events.id_ip_ver_s),
id_orig_h_s=tostring(events.id_orig_h_s),
id_orig_p_d=toreal(events.id_orig_p_d),
id_resp_h_s=tostring(events.id_resp_h_s),
id_resp_p_d=toreal(events.id_resp_p_d),
local_orig_b=tostring(events.local_orig_b),
local_resp_b=tostring(events.local_resp_b),
metadata_type_s=tostring(events.metadata_type_s),
orig_hostname_s=tostring(events.orig_hostname_s),
orig_huid_s=tostring(events.orig_huid_s),
orig_ip_bytes_s=tostring(events.orig_ip_bytes_s),
orig_pkts_d=toreal(events.orig_pkts_d),
orig_sluid_s=tostring(events.orig_sluid_s),
orig_vlan_id_d=toreal(events.orig_vlan_id_d),
proto_d=toreal(events.proto_d),
host_s=tostring(events.host_s),
path_s=tostring(events.path_s),
user_agent_s=tostring(events.user_agent_s),
response_expires_s=tostring(events.response_expires_s),
tls_b=tostring(events.tls_b),
proxied_s=tostring(events.proxied_s),
error_s=tostring(events.error_s),
matched_dn_s=tostring(events.matched_dn_s),
referrer_s=tostring(events.referrer_s),
client_build_s=tostring(events.client_build_s),
desktop_height_d=toreal(events.desktop_height_d),
desktop_width_d=toreal(events.desktop_width_d),
keyboard_layout_s=tostring(events.keyboard_layout_s),
beacon_type_s=tostring(events.beacon_type_s),
msgid_s=tostring(events.msgid_s),
beacon_uid_s=tostring(events.beacon_uid_s),
last_event_time_d=toreal(events.last_event_time_d),
orig_ip_bytes_d=toreal(events.orig_ip_bytes_d),
resp_domains_s=tostring(events.resp_domains_s),
resp_ip_bytes_d=toreal(events.resp_ip_bytes_d),
session_count_d=toreal(events.session_count_d),
resp_filename_s=tostring(events.resp_filename_s),
response_content_disposition_s=tostring(events.response_content_disposition_s),
cookie_s=tostring(events.cookie_s),
cookie_vars_s=tostring(events.cookie_vars_s),
orig_mime_types_s=tostring(events.orig_mime_types_s),
first_event_time_d=toreal(events.first_event_time_d),
mail_from_s=tostring(events.mail_from_s),
helo_s=tostring(events.helo_s),
from_s=tostring(events.from_s),
SourceSystem=tostring(events.SourceSystem),
MG=tostring(events.MG),
ManagementGroupName=tostring(events.ManagementGroupName),
Computer=tostring(events.Computer),
RawData=tostring(events.RawData),
client_dig_product_id_s=tostring(events.client_dig_product_id_s),
client_dig_protocol_id_s=tostring(events.client_dig_protocol_id_s),
client_name_s=tostring(events.client_name_s),
dir_confidence_d=toreal(events.dir_confidence_d),
san_ip_s=tostring(events.san_ip_s),
host_key_s=tostring(events.host_key_s),
application_s=tostring(events.application_s),
error_msg_s=tostring(events.error_msg_s),
reply_to_s=tostring(events.reply_to_s),
useragent_s=tostring(events.useragent_s),
second_received_s=tostring(events.second_received_s),
spf_mailfrom_s=tostring(events.spf_mailfrom_s),
x_originating_ip_s=tostring(events.x_originating_ip_s),
first_received_s=tostring(events.first_received_s),
in_reply_to_s=tostring(events.in_reply_to_s),
rcpt_to_s=tostring(events.rcpt_to_s),
to_s=tostring(events.to_s),
date_s=tostring(events.date_s),
domain_s=tostring(events.domain_s),
resp_huid_s=tostring(events.resp_huid_s),
status_d=toreal(events.status_d),
cipher_alg_s=tostring(events.cipher_alg_s),
result_s=tostring(events.result_s),
result_code_s=tostring(events.result_code_s),
result_count_d=toreal(events.result_count_d),
base_object_s=tostring(events.base_object_s),
endpoint_s=tostring(events.endpoint_s),
operation_s=tostring(events.operation_s),
rtt_d=toreal(events.rtt_d),
action_s=tostring(events.action_s),
delete_on_close_b=tostring(events.delete_on_close_b),
name_s=tostring(events.name_s),
response_bytes_s=tostring(events.response_bytes_s),
hostname_s=tostring(events.hostname_s),
client_subject_s=tostring(events.client_subject_s),
certificate_serial_g=tostring(events.certificate_serial_g),
resp_mime_types_s=tostring(events.resp_mime_types_s),
response_cache_control_s=tostring(events.response_cache_control_s),
lease_time_d=toreal(events.lease_time_d),
mac_s=tostring(events.mac_s),
assigned_ip_s=tostring(events.assigned_ip_s),
dhcp_server_ip_s=tostring(events.dhcp_server_ip_s),
dns_server_ips_s=tostring(events.dns_server_ips_s),
request_cache_control_s=tostring(events.request_cache_control_s),
client_issuer_s=tostring(events.client_issuer_s),
request_bytes_s=tostring(events.request_bytes_s),
query_scope_s=tostring(events.query_scope_s),
message_id_d=toreal(events.message_id_d),
compression_alg_s=tostring(events.compression_alg_s),
hassh_g=tostring(events.hassh_g),
hasshServer_g=tostring(events.hasshServer_g),
host_key_alg_s=tostring(events.host_key_alg_s),
kex_alg_s=tostring(events.kex_alg_s),
mac_alg_s=tostring(events.mac_alg_s),
server_s=tostring(events.server_s),
client_s=tostring(events.client_s),
data_source_s=tostring(events.data_source_s),
error_code_s=tostring(events.error_code_s),
orig_host_observed_privilege_d=toreal(events.orig_host_observed_privilege_d),
protocol_d=toreal(events.protocol_d),
rep_cipher_s=tostring(events.rep_cipher_s),
reply_timestamp_d=toreal(events.reply_timestamp_d),
req_ciphers_s=tostring(events.req_ciphers_s),
request_type_s=tostring(events.request_type_s),
success_b=tostring(events.success_b),
attributes_s=tostring(events.attributes_s),
bind_error_count_d=toreal(events.bind_error_count_d),
encrypted_sasl_payload_count_d=toreal(events.encrypted_sasl_payload_count_d),
is_close_b=tostring(events.is_close_b),
is_query_b=tostring(events.is_query_b),
logon_failure_error_count_d=toreal(events.logon_failure_error_count_d),
username_s=tostring(events.username_s),
resp_sluid_s=tostring(events.resp_sluid_s),
Type=tostring(events.Type),
_ResourceId=tostring(events._ResourceId),
_ItemId=tostring(events._ItemId),
_TimeReceived=todatetime(now())
}

.alter table VectraStream_CL policy update @'[{"Source": "VectraStream_CLRaw", "Query": "VectraStream_CLExpand()", "IsEnabled": "True", "IsTransactional": true}]'
