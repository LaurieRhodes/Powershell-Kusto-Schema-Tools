// ============================================================================
// Azure Data Explorer KQL Script for SigninLogs - UPDATED VERSION
// ============================================================================
// Generated: 2025-09-17 07:29:16
// Table type: Microsoft
// Schema discovered using hybrid approach (Management API + getschema)
// Data type corrections applied: TenantId->guid, Double->real (empirical fixes)
// All columns including underscore columns included
// Original columns: 92, Final columns: 92
// ============================================================================

.create-merge table SigninLogsRaw (records:dynamic)

.alter-merge table SigninLogsRaw policy retention softdelete = 1d

.alter table SigninLogsRaw policy caching hot = 1h

// JSON mapping - choose appropriate option based on data structure
.create-or-alter table SigninLogsRaw ingestion json mapping 'SigninLogsRawMapping' '[{"column":"records","Properties":{"path":"$.records"}}]'
// Alternative for direct events: '[{"column":"records","Properties":{"path":"$"}}]'

.create-merge table SigninLogs(
TimeGenerated:datetime,
TenantId:guid,
SignInIdentifierType:string,
SignInIdentifier:string,
IPAddressFromResourceProvider:string,
FlaggedForReview:bool,
UserType:string,
AADTenantId:string,
UserPrincipalName:string,
UserId:string,
ResourceTenantId:string,
UserDisplayName:string,
TokenIssuerType:string,
TokenIssuerName:string,
Status:dynamic,
ServicePrincipalName:string,
ServicePrincipalId:string,
ResourceServicePrincipalId:string,
ResourceIdentity:string,
ResourceDisplayName:string,
UserAgent:string,
HomeTenantId:string,
UniqueTokenIdentifier:string,
SessionId:string,
SourceAppClientId:string,
Agent:dynamic,
ResourceOwnerTenantId:string,
AppOwnerTenantId:string,
TokenProtectionStatusDetails:dynamic,
OriginalTransferMethod:string,
IsThroughGlobalSecureAccess:bool,
IsTenantRestricted:bool,
IncomingTokenType:string,
HomeTenantName:string,
GlobalSecureAccessIpAddress:string,
FederatedCredentialId:string,
ClientCredentialType:string,
AuthenticationAppPolicyEvaluationDetails:string,
AuthenticationAppDeviceDetails:string,
CrossTenantAccessType:string,
AuthenticationProtocol:string,
AutonomousSystemNumber:string,
SessionLifetimePolicies:string,
RiskState:string,
RiskLevelDuringSignIn:string,
RiskLevelAggregated:string,
RiskEventTypes_V2:string,
AppId:string,
AppDisplayName:string,
AlternateSignInName:string,
Location:string,
Level:string,
Identity:string,
ResourceProvider:string,
ResourceGroup:string,
Resource:string,
CorrelationId:string,
DurationMs:long,
ResultDescription:string,
ResultSignature:string,
ResultType:string,
Category:string,
OperationVersion:string,
OperationName:string,
ResourceId:string,
SourceSystem:string,
AuthenticationContextClassReferences:string,
AppliedConditionalAccessPolicies:string,
AuthenticationDetails:string,
AuthenticationMethodsUsed:string,
RiskEventTypes:string,
RiskDetail:string,
ProcessingTimeInMilliseconds:string,
OriginalRequestId:guid,
NetworkLocationDetails:string,
MfaDetail:dynamic,
LocationDetails:dynamic,
IsRisky:bool,
IPAddress:string,
Id:string,
IsInteractive:bool,
DeviceDetail:dynamic,
CreatedDateTime:datetime,
ConditionalAccessStatus:string,
ConditionalAccessPolicies:dynamic,
ClientAppUsed:string,
AuthenticationRequirementPolicies:string,
AuthenticationRequirement:string,
AuthenticationProcessingDetails:string,
AppliedEventListeners:dynamic,
RiskLevel:string,
Type:string,
_TimeReceived:datetime)

.alter table SigninLogs policy caching hot = 1d

.create-or-alter function SigninLogsExpand() {
SigninLogsRaw
| mv-expand events = records
// Alternative for non-nested: | extend events = records
| project
TimeGenerated=todatetime(events.TimeGenerated),
TenantId=toguid(events.TenantId),
SignInIdentifierType=tostring(events.SignInIdentifierType),
SignInIdentifier=tostring(events.SignInIdentifier),
IPAddressFromResourceProvider=tostring(events.IPAddressFromResourceProvider),
FlaggedForReview=tobool(events.FlaggedForReview),
UserType=tostring(events.UserType),
AADTenantId=tostring(events.AADTenantId),
UserPrincipalName=tostring(events.UserPrincipalName),
UserId=tostring(events.UserId),
ResourceTenantId=tostring(events.ResourceTenantId),
UserDisplayName=tostring(events.UserDisplayName),
TokenIssuerType=tostring(events.TokenIssuerType),
TokenIssuerName=tostring(events.TokenIssuerName),
Status=todynamic(events.Status),
ServicePrincipalName=tostring(events.ServicePrincipalName),
ServicePrincipalId=tostring(events.ServicePrincipalId),
ResourceServicePrincipalId=tostring(events.ResourceServicePrincipalId),
ResourceIdentity=tostring(events.ResourceIdentity),
ResourceDisplayName=tostring(events.ResourceDisplayName),
UserAgent=tostring(events.UserAgent),
HomeTenantId=tostring(events.HomeTenantId),
UniqueTokenIdentifier=tostring(events.UniqueTokenIdentifier),
SessionId=tostring(events.SessionId),
SourceAppClientId=tostring(events.SourceAppClientId),
Agent=todynamic(events.Agent),
ResourceOwnerTenantId=tostring(events.ResourceOwnerTenantId),
AppOwnerTenantId=tostring(events.AppOwnerTenantId),
TokenProtectionStatusDetails=todynamic(events.TokenProtectionStatusDetails),
OriginalTransferMethod=tostring(events.OriginalTransferMethod),
IsThroughGlobalSecureAccess=tobool(events.IsThroughGlobalSecureAccess),
IsTenantRestricted=tobool(events.IsTenantRestricted),
IncomingTokenType=tostring(events.IncomingTokenType),
HomeTenantName=tostring(events.HomeTenantName),
GlobalSecureAccessIpAddress=tostring(events.GlobalSecureAccessIpAddress),
FederatedCredentialId=tostring(events.FederatedCredentialId),
ClientCredentialType=tostring(events.ClientCredentialType),
AuthenticationAppPolicyEvaluationDetails=tostring(events.AuthenticationAppPolicyEvaluationDetails),
AuthenticationAppDeviceDetails=tostring(events.AuthenticationAppDeviceDetails),
CrossTenantAccessType=tostring(events.CrossTenantAccessType),
AuthenticationProtocol=tostring(events.AuthenticationProtocol),
AutonomousSystemNumber=tostring(events.AutonomousSystemNumber),
SessionLifetimePolicies=tostring(events.SessionLifetimePolicies),
RiskState=tostring(events.RiskState),
RiskLevelDuringSignIn=tostring(events.RiskLevelDuringSignIn),
RiskLevelAggregated=tostring(events.RiskLevelAggregated),
RiskEventTypes_V2=tostring(events.RiskEventTypes_V2),
AppId=tostring(events.AppId),
AppDisplayName=tostring(events.AppDisplayName),
AlternateSignInName=tostring(events.AlternateSignInName),
Location=tostring(events.Location),
Level=tostring(events.Level),
Identity=tostring(events.Identity),
ResourceProvider=tostring(events.ResourceProvider),
ResourceGroup=tostring(events.ResourceGroup),
Resource=tostring(events.Resource),
CorrelationId=tostring(events.CorrelationId),
DurationMs=tolong(events.DurationMs),
ResultDescription=tostring(events.ResultDescription),
ResultSignature=tostring(events.ResultSignature),
ResultType=tostring(events.ResultType),
Category=tostring(events.Category),
OperationVersion=tostring(events.OperationVersion),
OperationName=tostring(events.OperationName),
ResourceId=tostring(events.ResourceId),
SourceSystem=tostring(events.SourceSystem),
AuthenticationContextClassReferences=tostring(events.AuthenticationContextClassReferences),
AppliedConditionalAccessPolicies=tostring(events.AppliedConditionalAccessPolicies),
AuthenticationDetails=tostring(events.AuthenticationDetails),
AuthenticationMethodsUsed=tostring(events.AuthenticationMethodsUsed),
RiskEventTypes=tostring(events.RiskEventTypes),
RiskDetail=tostring(events.RiskDetail),
ProcessingTimeInMilliseconds=tostring(events.ProcessingTimeInMilliseconds),
OriginalRequestId=toguid(events.OriginalRequestId),
NetworkLocationDetails=tostring(events.NetworkLocationDetails),
MfaDetail=todynamic(events.MfaDetail),
LocationDetails=todynamic(events.LocationDetails),
IsRisky=tobool(events.IsRisky),
IPAddress=tostring(events.IPAddress),
Id=tostring(events.Id),
IsInteractive=tobool(events.IsInteractive),
DeviceDetail=todynamic(events.DeviceDetail),
CreatedDateTime=todatetime(events.CreatedDateTime),
ConditionalAccessStatus=tostring(events.ConditionalAccessStatus),
ConditionalAccessPolicies=todynamic(events.ConditionalAccessPolicies),
ClientAppUsed=tostring(events.ClientAppUsed),
AuthenticationRequirementPolicies=tostring(events.AuthenticationRequirementPolicies),
AuthenticationRequirement=tostring(events.AuthenticationRequirement),
AuthenticationProcessingDetails=tostring(events.AuthenticationProcessingDetails),
AppliedEventListeners=todynamic(events.AppliedEventListeners),
RiskLevel=tostring(events.RiskLevel),
Type=tostring(events.Type),
_TimeReceived=todatetime(now())
}

.alter table SigninLogs policy update @'[{"Source": "SigninLogsRaw", "Query": "SigninLogsExpand()", "IsEnabled": "True", "IsTransactional": true}]'
