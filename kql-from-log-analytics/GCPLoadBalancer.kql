// ============================================================================
// Azure Data Explorer KQL Script for GCPLoadBalancer - UPDATED VERSION
// ============================================================================
// Generated: 2025-09-17 07:24:45
// Table type: Microsoft
// Schema discovered using hybrid approach (Management API + getschema)
// Data type corrections applied: TenantId->guid, Double->real (empirical fixes)
// All columns including underscore columns included
// Original columns: 29, Final columns: 29
// ============================================================================

.create-merge table GCPLoadBalancerRaw (records:dynamic)

.alter-merge table GCPLoadBalancerRaw policy retention softdelete = 1d

.alter table GCPLoadBalancerRaw policy caching hot = 1h

// JSON mapping - choose appropriate option based on data structure
.create-or-alter table GCPLoadBalancerRaw ingestion json mapping 'GCPLoadBalancerRawMapping' '[{"column":"records","Properties":{"path":"$.records"}}]'
// Alternative for direct events: '[{"column":"records","Properties":{"path":"$"}}]'

.create-merge table GCPLoadBalancer(
TimeGenerated:datetime,
TenantId:guid,
Timestamp:datetime,
LogName:string,
Severity:string,
Zone:string,
UrlMapName:string,
ProjectId:string,
ForwardingRuleName:string,
BackendServiceName:string,
UserAgent:string,
RequestStatus:string,
RequestUrl:string,
InsertId:string,
RequestSize:string,
RemoteIp:string,
Latency:string,
StatusDetails:string,
SecurityPolicyRequestData:dynamic,
PayloadRemoteIp:string,
PreviewEdgeSecurityPolicy:dynamic,
EnforcedEdgeSecurityPolicy:dynamic,
PreviewSecurityPolicy:dynamic,
EnforcedSecurityPolicy:dynamic,
CacheDecision:dynamic,
BackendTargetProjectNumber:string,
RequestMethod:string,
SourceSystem:string,
Type:string,
_TimeReceived:datetime)

.alter table GCPLoadBalancer policy caching hot = 1d

.create-or-alter function GCPLoadBalancerExpand() {
GCPLoadBalancerRaw
| mv-expand events = records
// Alternative for non-nested: | extend events = records
| project
TimeGenerated=todatetime(events.TimeGenerated),
TenantId=toguid(events.TenantId),
Timestamp=todatetime(events.Timestamp),
LogName=tostring(events.LogName),
Severity=tostring(events.Severity),
Zone=tostring(events.Zone),
UrlMapName=tostring(events.UrlMapName),
ProjectId=tostring(events.ProjectId),
ForwardingRuleName=tostring(events.ForwardingRuleName),
BackendServiceName=tostring(events.BackendServiceName),
UserAgent=tostring(events.UserAgent),
RequestStatus=tostring(events.RequestStatus),
RequestUrl=tostring(events.RequestUrl),
InsertId=tostring(events.InsertId),
RequestSize=tostring(events.RequestSize),
RemoteIp=tostring(events.RemoteIp),
Latency=tostring(events.Latency),
StatusDetails=tostring(events.StatusDetails),
SecurityPolicyRequestData=todynamic(events.SecurityPolicyRequestData),
PayloadRemoteIp=tostring(events.PayloadRemoteIp),
PreviewEdgeSecurityPolicy=todynamic(events.PreviewEdgeSecurityPolicy),
EnforcedEdgeSecurityPolicy=todynamic(events.EnforcedEdgeSecurityPolicy),
PreviewSecurityPolicy=todynamic(events.PreviewSecurityPolicy),
EnforcedSecurityPolicy=todynamic(events.EnforcedSecurityPolicy),
CacheDecision=todynamic(events.CacheDecision),
BackendTargetProjectNumber=tostring(events.BackendTargetProjectNumber),
RequestMethod=tostring(events.RequestMethod),
SourceSystem=tostring(events.SourceSystem),
Type=tostring(events.Type),
_TimeReceived=todatetime(now())
}

.alter table GCPLoadBalancer policy update @'[{"Source": "GCPLoadBalancerRaw", "Query": "GCPLoadBalancerExpand()", "IsEnabled": "True", "IsTransactional": true}]'
