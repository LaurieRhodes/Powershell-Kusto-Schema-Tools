// ============================================================================
// Azure Data Explorer KQL Script for NetworkAccessConnectionEvents - UPDATED VERSION
// ============================================================================
// Generated: 2025-09-17 07:27:22
// Table type: Microsoft
// Schema discovered using hybrid approach (Management API + getschema)
// Data type corrections applied: TenantId->guid, Double->real (empirical fixes)
// All columns including underscore columns included
// Original columns: 31, Final columns: 31
// ============================================================================

.create-merge table NetworkAccessConnectionEventsRaw (records:dynamic)

.alter-merge table NetworkAccessConnectionEventsRaw policy retention softdelete = 1d

.alter table NetworkAccessConnectionEventsRaw policy caching hot = 1h

// JSON mapping - choose appropriate option based on data structure
.create-or-alter table NetworkAccessConnectionEventsRaw ingestion json mapping 'NetworkAccessConnectionEventsRawMapping' '[{"column":"records","Properties":{"path":"$.records"}}]'
// Alternative for direct events: '[{"column":"records","Properties":{"path":"$"}}]'

.create-merge table NetworkAccessConnectionEvents(
TimeGenerated:datetime,
TenantId:guid,
Token3PIssuedAt:datetime,
Token3PValidFrom:datetime,
Token3PExpiry:datetime,
RemoteNetworkId:string,
PopProcessingRegion:string,
AppId:string,
InitiatingProcessName:string,
NetworkProtocol:string,
TransportProtocol:string,
UserPrincipalName:string,
UserId:string,
DeviceId:string,
Token3PUniqueId:string,
AgentVersion:string,
DeviceOperatingSystem:string,
SourcePort:int,
RemoteNetworkSourceIp:string,
SourcePrivateIp:string,
SourceIp:string,
DestinationFqdn:string,
DestinationPort:int,
DestinationIp:string,
DeviceCategory:string,
EventType:string,
TrafficType:string,
ConnectionId:string,
DeviceOperatingSystemVersion:string,
SourceSystem:string,
Type:string,
_TimeReceived:datetime)

.alter table NetworkAccessConnectionEvents policy caching hot = 1d

.create-or-alter function NetworkAccessConnectionEventsExpand() {
NetworkAccessConnectionEventsRaw
| mv-expand events = records
// Alternative for non-nested: | extend events = records
| project
TimeGenerated=todatetime(events.TimeGenerated),
TenantId=toguid(events.TenantId),
Token3PIssuedAt=todatetime(events.Token3PIssuedAt),
Token3PValidFrom=todatetime(events.Token3PValidFrom),
Token3PExpiry=todatetime(events.Token3PExpiry),
RemoteNetworkId=tostring(events.RemoteNetworkId),
PopProcessingRegion=tostring(events.PopProcessingRegion),
AppId=tostring(events.AppId),
InitiatingProcessName=tostring(events.InitiatingProcessName),
NetworkProtocol=tostring(events.NetworkProtocol),
TransportProtocol=tostring(events.TransportProtocol),
UserPrincipalName=tostring(events.UserPrincipalName),
UserId=tostring(events.UserId),
DeviceId=tostring(events.DeviceId),
Token3PUniqueId=tostring(events.Token3PUniqueId),
AgentVersion=tostring(events.AgentVersion),
DeviceOperatingSystem=tostring(events.DeviceOperatingSystem),
SourcePort=toint(events.SourcePort),
RemoteNetworkSourceIp=tostring(events.RemoteNetworkSourceIp),
SourcePrivateIp=tostring(events.SourcePrivateIp),
SourceIp=tostring(events.SourceIp),
DestinationFqdn=tostring(events.DestinationFqdn),
DestinationPort=toint(events.DestinationPort),
DestinationIp=tostring(events.DestinationIp),
DeviceCategory=tostring(events.DeviceCategory),
EventType=tostring(events.EventType),
TrafficType=tostring(events.TrafficType),
ConnectionId=tostring(events.ConnectionId),
DeviceOperatingSystemVersion=tostring(events.DeviceOperatingSystemVersion),
SourceSystem=tostring(events.SourceSystem),
Type=tostring(events.Type),
_TimeReceived=todatetime(now())
}

.alter table NetworkAccessConnectionEvents policy update @'[{"Source": "NetworkAccessConnectionEventsRaw", "Query": "NetworkAccessConnectionEventsExpand()", "IsEnabled": "True", "IsTransactional": true}]'
