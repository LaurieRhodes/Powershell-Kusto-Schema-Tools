// ============================================================================
// Azure Data Explorer KQL Script for WorkloadDiagnosticLogs - UPDATED VERSION
// ============================================================================
// Generated: 2025-09-17 07:31:30
// Table type: Microsoft
// Schema discovered using hybrid approach (Management API + getschema)
// Data type corrections applied: TenantId->guid, Double->real (empirical fixes)
// All columns including underscore columns included
// Original columns: 9, Final columns: 9
// ============================================================================

.create-merge table WorkloadDiagnosticLogsRaw (records:dynamic)

.alter-merge table WorkloadDiagnosticLogsRaw policy retention softdelete = 1d

.alter table WorkloadDiagnosticLogsRaw policy caching hot = 1h

// JSON mapping - choose appropriate option based on data structure
.create-or-alter table WorkloadDiagnosticLogsRaw ingestion json mapping 'WorkloadDiagnosticLogsRawMapping' '[{"column":"records","Properties":{"path":"$.records"}}]'
// Alternative for direct events: '[{"column":"records","Properties":{"path":"$"}}]'

.create-merge table WorkloadDiagnosticLogs(
TimeGenerated:datetime,
TenantId:guid,
Computer:string,
Category:string,
Status:string,
Message:string,
Tags:dynamic,
SourceSystem:string,
Type:string,
_TimeReceived:datetime)

.alter table WorkloadDiagnosticLogs policy caching hot = 1d

.create-or-alter function WorkloadDiagnosticLogsExpand() {
WorkloadDiagnosticLogsRaw
| mv-expand events = records
// Alternative for non-nested: | extend events = records
| project
TimeGenerated=todatetime(events.TimeGenerated),
TenantId=toguid(events.TenantId),
Computer=tostring(events.Computer),
Category=tostring(events.Category),
Status=tostring(events.Status),
Message=tostring(events.Message),
Tags=todynamic(events.Tags),
SourceSystem=tostring(events.SourceSystem),
Type=tostring(events.Type),
_TimeReceived=todatetime(now())
}

.alter table WorkloadDiagnosticLogs policy update @'[{"Source": "WorkloadDiagnosticLogsRaw", "Query": "WorkloadDiagnosticLogsExpand()", "IsEnabled": "True", "IsTransactional": true}]'
