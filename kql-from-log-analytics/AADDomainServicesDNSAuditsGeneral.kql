// ============================================================================
// Azure Data Explorer KQL Script for AADDomainServicesDNSAuditsGeneral - UPDATED VERSION
// ============================================================================
// Generated: 2025-09-17 07:14:23
// Table type: Microsoft
// Schema discovered using hybrid approach (Management API + getschema)
// Data type corrections applied: TenantId->guid, Double->real (empirical fixes)
// All columns including underscore columns included
// Original columns: 115, Final columns: 115
// ============================================================================

.create-merge table AADDomainServicesDNSAuditsGeneralRaw (records:dynamic)

.alter-merge table AADDomainServicesDNSAuditsGeneralRaw policy retention softdelete = 1d

.alter table AADDomainServicesDNSAuditsGeneralRaw policy caching hot = 1h

// JSON mapping - choose appropriate option based on data structure
.create-or-alter table AADDomainServicesDNSAuditsGeneralRaw ingestion json mapping 'AADDomainServicesDNSAuditsGeneralRawMapping' '[{"column":"records","Properties":{"path":"$.records"}}]'
// Alternative for direct events: '[{"column":"records","Properties":{"path":"$"}}]'

.create-merge table AADDomainServicesDNSAuditsGeneral(
TimeGenerated:datetime,
TenantId:guid,
ClientSubnetList:string,
ClientSubnetRecord:string,
NameServer:string,
ChildZone:string,
NextKey:string,
StandbyKey:string,
ActiveKey:string,
CurrentRolloverStatus:string,
NextRolloverTime:datetime,
LastRolloverTime:datetime,
NextRolloverAction:string,
ServerName:string,
RolloverType:string,
InitialRolloverOffset:int,
ZoneSignatureValidityPeriod:int,
DSSignatureValidityPeriod:int,
DnsKeySignatureValidityPeriod:int,
KeyLength:int,
StoreKeysInAD:string,
KeyStorageProvider:string,
CurrentState:string,
KeyType:string,
KeyId:string,
KskOrZsk:string,
RolloverPeriod:int,
KeyOrZone:string,
ProcessingOrder:int,
Action:string,
NewFriendlyName:string,
OldFriendlyName:string,
FriendlyName:string,
RRLExceptionlist:string,
Mode:string,
IPv6PrefixLength:int,
IPv4PrefixLength:int,
TotalResponsesInWindow:int,
WindowSize:int,
TCRate:int,
LeakRate:int,
Criteria:string,
ErrorsPerSecond:int,
OldScope:string,
NewScope:string,
ScopeWeightOld:int,
ScopeWeightNew:int,
ScopeWeight:int,
NewPropertyValues:string,
OldPropertyValues:string,
Scopes:string,
IsEnabled:string,
Condition:string,
Policy:string,
ResponsePerSecond:int,
WithNewKeys:string,
SeizedOrTransfered:string,
ScavengeServers:string,
KeyMasterServer:string,
IsKeyMasterServer:string,
EnableRfc5011KeyRollover:string,
DSRecordSetTtl:int,
DSRecordGenerationAlgorithm:string,
DnsKeyRecordSetTtl:int,
DistributeTrustAnchor:string,
DenialOfExistence:string,
ZoneName:string,
ZoneScope:string,
RData:string,
NSec3HashAlgorithm:int,
BufferSize:int,
NewValue:string,
PropertyKey:string,
Zone:string,
VirtualizationID:string,
ZoneFile:string,
ReplicationScope:string,
Lookup:string,
Name:string,
resultDescription:string,
operationVersion:string,
operationName:string,
Ttl:int,
NSec3Iterations:int,
NSec3OptOut:string,
NSec3RandomSaltLength:int,
SubTreeAging:string,
NodeName:string,
MasterServer:string,
ListenAddresses:string,
EventString:string,
FilePath:string,
Digest:string,
DigestType:string,
KeyTag:int,
CryptoAlgorithm:string,
Base64Data:string,
KeyProtocol:string,
RecursionScope:string,
Setting:string,
Forwarders:string,
Scope:string,
QName:string,
QType:int,
WithWithout:string,
EventGuid:string,
SignatureInceptionOffset:int,
SecureDelegationPollingPeriod:int,
PropagationTime:int,
ParentHasSecureDelegation:string,
NSec3UserSalt:string,
RecordId:string,
SourceSystem:string,
Type:string,
_ResourceId:string,
_TimeReceived:datetime)

.alter table AADDomainServicesDNSAuditsGeneral policy caching hot = 1d

.create-or-alter function AADDomainServicesDNSAuditsGeneralExpand() {
AADDomainServicesDNSAuditsGeneralRaw
| mv-expand events = records
// Alternative for non-nested: | extend events = records
| project
TimeGenerated=todatetime(events.TimeGenerated),
TenantId=toguid(events.TenantId),
ClientSubnetList=tostring(events.ClientSubnetList),
ClientSubnetRecord=tostring(events.ClientSubnetRecord),
NameServer=tostring(events.NameServer),
ChildZone=tostring(events.ChildZone),
NextKey=tostring(events.NextKey),
StandbyKey=tostring(events.StandbyKey),
ActiveKey=tostring(events.ActiveKey),
CurrentRolloverStatus=tostring(events.CurrentRolloverStatus),
NextRolloverTime=todatetime(events.NextRolloverTime),
LastRolloverTime=todatetime(events.LastRolloverTime),
NextRolloverAction=tostring(events.NextRolloverAction),
ServerName=tostring(events.ServerName),
RolloverType=tostring(events.RolloverType),
InitialRolloverOffset=toint(events.InitialRolloverOffset),
ZoneSignatureValidityPeriod=toint(events.ZoneSignatureValidityPeriod),
DSSignatureValidityPeriod=toint(events.DSSignatureValidityPeriod),
DnsKeySignatureValidityPeriod=toint(events.DnsKeySignatureValidityPeriod),
KeyLength=toint(events.KeyLength),
StoreKeysInAD=tostring(events.StoreKeysInAD),
KeyStorageProvider=tostring(events.KeyStorageProvider),
CurrentState=tostring(events.CurrentState),
KeyType=tostring(events.KeyType),
KeyId=tostring(events.KeyId),
KskOrZsk=tostring(events.KskOrZsk),
RolloverPeriod=toint(events.RolloverPeriod),
KeyOrZone=tostring(events.KeyOrZone),
ProcessingOrder=toint(events.ProcessingOrder),
Action=tostring(events.Action),
NewFriendlyName=tostring(events.NewFriendlyName),
OldFriendlyName=tostring(events.OldFriendlyName),
FriendlyName=tostring(events.FriendlyName),
RRLExceptionlist=tostring(events.RRLExceptionlist),
Mode=tostring(events.Mode),
IPv6PrefixLength=toint(events.IPv6PrefixLength),
IPv4PrefixLength=toint(events.IPv4PrefixLength),
TotalResponsesInWindow=toint(events.TotalResponsesInWindow),
WindowSize=toint(events.WindowSize),
TCRate=toint(events.TCRate),
LeakRate=toint(events.LeakRate),
Criteria=tostring(events.Criteria),
ErrorsPerSecond=toint(events.ErrorsPerSecond),
OldScope=tostring(events.OldScope),
NewScope=tostring(events.NewScope),
ScopeWeightOld=toint(events.ScopeWeightOld),
ScopeWeightNew=toint(events.ScopeWeightNew),
ScopeWeight=toint(events.ScopeWeight),
NewPropertyValues=tostring(events.NewPropertyValues),
OldPropertyValues=tostring(events.OldPropertyValues),
Scopes=tostring(events.Scopes),
IsEnabled=tostring(events.IsEnabled),
Condition=tostring(events.Condition),
Policy=tostring(events.Policy),
ResponsePerSecond=toint(events.ResponsePerSecond),
WithNewKeys=tostring(events.WithNewKeys),
SeizedOrTransfered=tostring(events.SeizedOrTransfered),
ScavengeServers=tostring(events.ScavengeServers),
KeyMasterServer=tostring(events.KeyMasterServer),
IsKeyMasterServer=tostring(events.IsKeyMasterServer),
EnableRfc5011KeyRollover=tostring(events.EnableRfc5011KeyRollover),
DSRecordSetTtl=toint(events.DSRecordSetTtl),
DSRecordGenerationAlgorithm=tostring(events.DSRecordGenerationAlgorithm),
DnsKeyRecordSetTtl=toint(events.DnsKeyRecordSetTtl),
DistributeTrustAnchor=tostring(events.DistributeTrustAnchor),
DenialOfExistence=tostring(events.DenialOfExistence),
ZoneName=tostring(events.ZoneName),
ZoneScope=tostring(events.ZoneScope),
RData=tostring(events.RData),
NSec3HashAlgorithm=toint(events.NSec3HashAlgorithm),
BufferSize=toint(events.BufferSize),
NewValue=tostring(events.NewValue),
PropertyKey=tostring(events.PropertyKey),
Zone=tostring(events.Zone),
VirtualizationID=tostring(events.VirtualizationID),
ZoneFile=tostring(events.ZoneFile),
ReplicationScope=tostring(events.ReplicationScope),
Lookup=tostring(events.Lookup),
Name=tostring(events.Name),
resultDescription=tostring(events.resultDescription),
operationVersion=tostring(events.operationVersion),
operationName=tostring(events.operationName),
Ttl=toint(events.Ttl),
NSec3Iterations=toint(events.NSec3Iterations),
NSec3OptOut=tostring(events.NSec3OptOut),
NSec3RandomSaltLength=toint(events.NSec3RandomSaltLength),
SubTreeAging=tostring(events.SubTreeAging),
NodeName=tostring(events.NodeName),
MasterServer=tostring(events.MasterServer),
ListenAddresses=tostring(events.ListenAddresses),
EventString=tostring(events.EventString),
FilePath=tostring(events.FilePath),
Digest=tostring(events.Digest),
DigestType=tostring(events.DigestType),
KeyTag=toint(events.KeyTag),
CryptoAlgorithm=tostring(events.CryptoAlgorithm),
Base64Data=tostring(events.Base64Data),
KeyProtocol=tostring(events.KeyProtocol),
RecursionScope=tostring(events.RecursionScope),
Setting=tostring(events.Setting),
Forwarders=tostring(events.Forwarders),
Scope=tostring(events.Scope),
QName=tostring(events.QName),
QType=toint(events.QType),
WithWithout=tostring(events.WithWithout),
EventGuid=tostring(events.EventGuid),
SignatureInceptionOffset=toint(events.SignatureInceptionOffset),
SecureDelegationPollingPeriod=toint(events.SecureDelegationPollingPeriod),
PropagationTime=toint(events.PropagationTime),
ParentHasSecureDelegation=tostring(events.ParentHasSecureDelegation),
NSec3UserSalt=tostring(events.NSec3UserSalt),
RecordId=tostring(events.RecordId),
SourceSystem=tostring(events.SourceSystem),
Type=tostring(events.Type),
_ResourceId=tostring(events._ResourceId),
_TimeReceived=todatetime(now())
}

.alter table AADDomainServicesDNSAuditsGeneral policy update @'[{"Source": "AADDomainServicesDNSAuditsGeneralRaw", "Query": "AADDomainServicesDNSAuditsGeneralExpand()", "IsEnabled": "True", "IsTransactional": true}]'
