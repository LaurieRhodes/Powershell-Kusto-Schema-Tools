// ============================================================================
// Azure Data Explorer KQL Script for AGWAccessLogs - UPDATED VERSION
// ============================================================================
// Generated: 2025-09-17 07:16:56
// Table type: Microsoft
// Schema discovered using hybrid approach (Management API + getschema)
// Data type corrections applied: TenantId->guid, Double->real (empirical fixes)
// All columns including underscore columns included
// Original columns: 35, Final columns: 35
// ============================================================================

.create-merge table AGWAccessLogsRaw (records:dynamic)

.alter-merge table AGWAccessLogsRaw policy retention softdelete = 1d

.alter table AGWAccessLogsRaw policy caching hot = 1h

// JSON mapping - choose appropriate option based on data structure
.create-or-alter table AGWAccessLogsRaw ingestion json mapping 'AGWAccessLogsRawMapping' '[{"column":"records","Properties":{"path":"$.records"}}]'
// Alternative for direct events: '[{"column":"records","Properties":{"path":"$"}}]'

.create-merge table AGWAccessLogs(
TimeGenerated:datetime,
TenantId:guid,
UpstreamSourcePort:int,
OriginalRequestUriWithArgs:string,
Host:string,
ServerResponseLatency:real,
ErrorInfo:string,
ServerStatus:int,
ServerRouted:string,
SslProtocol:string,
SslCipher:string,
SslEnabled:string,
TransactionId:string,
WafMode:string,
WafEvaluationTime:real,
TimeTaken:real,
ClientResponseTime:real,
SentBytes:int,
ReceivedBytes:int,
HttpVersion:string,
HttpStatus:int,
UserAgent:string,
RequestUri:string,
HttpMethod:string,
ClientIp:string,
InstanceId:string,
BackendSettingName:string,
BackendPoolName:string,
RuleName:string,
ListenerName:string,
OperationName:string,
OriginalHost:string,
SourceSystem:string,
Type:string,
_ResourceId:string,
_TimeReceived:datetime)

.alter table AGWAccessLogs policy caching hot = 1d

.create-or-alter function AGWAccessLogsExpand() {
AGWAccessLogsRaw
| mv-expand events = records
// Alternative for non-nested: | extend events = records
| project
TimeGenerated=todatetime(events.TimeGenerated),
TenantId=toguid(events.TenantId),
UpstreamSourcePort=toint(events.UpstreamSourcePort),
OriginalRequestUriWithArgs=tostring(events.OriginalRequestUriWithArgs),
Host=tostring(events.Host),
ServerResponseLatency=toreal(events.ServerResponseLatency),
ErrorInfo=tostring(events.ErrorInfo),
ServerStatus=toint(events.ServerStatus),
ServerRouted=tostring(events.ServerRouted),
SslProtocol=tostring(events.SslProtocol),
SslCipher=tostring(events.SslCipher),
SslEnabled=tostring(events.SslEnabled),
TransactionId=tostring(events.TransactionId),
WafMode=tostring(events.WafMode),
WafEvaluationTime=toreal(events.WafEvaluationTime),
TimeTaken=toreal(events.TimeTaken),
ClientResponseTime=toreal(events.ClientResponseTime),
SentBytes=toint(events.SentBytes),
ReceivedBytes=toint(events.ReceivedBytes),
HttpVersion=tostring(events.HttpVersion),
HttpStatus=toint(events.HttpStatus),
UserAgent=tostring(events.UserAgent),
RequestUri=tostring(events.RequestUri),
HttpMethod=tostring(events.HttpMethod),
ClientIp=tostring(events.ClientIp),
InstanceId=tostring(events.InstanceId),
BackendSettingName=tostring(events.BackendSettingName),
BackendPoolName=tostring(events.BackendPoolName),
RuleName=tostring(events.RuleName),
ListenerName=tostring(events.ListenerName),
OperationName=tostring(events.OperationName),
OriginalHost=tostring(events.OriginalHost),
SourceSystem=tostring(events.SourceSystem),
Type=tostring(events.Type),
_ResourceId=tostring(events._ResourceId),
_TimeReceived=todatetime(now())
}

.alter table AGWAccessLogs policy update @'[{"Source": "AGWAccessLogsRaw", "Query": "AGWAccessLogsExpand()", "IsEnabled": "True", "IsTransactional": true}]'
