// ============================================================================
// Azure Data Explorer KQL Script for GCPVPCFlow - UPDATED VERSION
// ============================================================================
// Generated: 2025-09-17 07:24:50
// Table type: Microsoft
// Schema discovered using hybrid approach (Management API + getschema)
// Data type corrections applied: TenantId->guid, Double->real (empirical fixes)
// All columns including underscore columns included
// Original columns: 107, Final columns: 107
// ============================================================================

.create-merge table GCPVPCFlowRaw (records:dynamic)

.alter-merge table GCPVPCFlowRaw policy retention softdelete = 1d

.alter table GCPVPCFlowRaw policy caching hot = 1h

// JSON mapping - choose appropriate option based on data structure
.create-or-alter table GCPVPCFlowRaw ingestion json mapping 'GCPVPCFlowRawMapping' '[{"column":"records","Properties":{"path":"$.records"}}]'
// Alternative for direct events: '[{"column":"records","Properties":{"path":"$"}}]'

.create-merge table GCPVPCFlow(
TimeGenerated:datetime,
TenantId:guid,
DestGkeClusterLocation:string,
SrcGkePodWorkloadType:string,
SrcGkePodWorkloadName:string,
SrcGkePodNamespace:string,
SrcGkePodName:string,
SrcGkeService:dynamic,
SrcGkeClusterName:string,
SrcGkeClusterLocation:string,
LbVpc:dynamic,
LbBackendGroupLocation:string,
DestGkeClusterName:string,
LbType:string,
LbUrlMapName:string,
LbScheme:string,
LbReporter:string,
LbForwardingRuleProjectId:string,
LbForwardingRuleName:string,
LbBackendGroupType:string,
LbBackendGroupName:string,
InternetRoutingDetailsEgressAsn:string,
SrcLocationRegion:string,
SrcLocationCity:string,
LbBackendServiceName:string,
DestGkeService:dynamic,
DestGkePodName:string,
DestGkePodNamespace:string,
DestGatewayInterconnectName:string,
DestGatewayVpc:dynamic,
DestGatewayType:string,
DestGatewayName:string,
DestGatewayLocation:string,
DestGatewayProjectId:string,
SrcGatewayInterconnectProjectNumber:string,
SrcGatewayInterconnectName:string,
SrcGatewayVpc:dynamic,
SrcGatewayType:string,
SrcGatewayName:string,
SrcGatewayLocation:string,
SrcGatewayProjectId:string,
PscEndpointVpc:dynamic,
PscEndpointTargetServiceType:string,
PscEndpointRegion:string,
PscEndpointConnectionId:string,
PscEndpointProjectId:string,
PscAttachmentVpc:dynamic,
PscAttachmentRegion:string,
PscAttachmentProjectId:string,
DestGkePodWorkloadType:string,
DestGkePodWorkloadName:string,
SrcLocationCountry:string,
DestGatewayInterconnectProjectNumber:string,
SrcLocationContinent:string,
DestLocationRegion:string,
DestInstanceRegion:string,
DestInstanceProjectId:string,
SrcPort:string,
SrcIp:string,
Protocol:string,
DestPort:string,
DestIp:string,
GCPResourceType:string,
SubnetworkName:string,
SubnetworkId:string,
DestInstanceVmName:string,
ProjectId:string,
Timestamp:datetime,
ReceiveTimestamp:datetime,
LogName:string,
EndTime:datetime,
StartTime:datetime,
Rttmsec:string,
Reporter:string,
PacketsSent:string,
BytesSent:string,
InsertId:string,
Location:string,
DestInstanceZone:string,
DestInstanceGroupName:string,
DestInstanceGroupZone:string,
DestLocationCountry:string,
DestLocationCity:string,
DestLocationContinent:string,
DestLocationAsn:string,
SrcGoogleServiceType:string,
DestGoogleServiceType:string,
SrcVpcName:string,
SrcVpcSubnetworkRegion:string,
SrcVpcSubnetworkName:string,
SrcVpcProjectId:string,
SrcInstanceGroupRegion:string,
SrcInstanceGroupZone:string,
SrcInstanceGroupName:string,
SrcInstanceZone:string,
SrcInstanceVmName:string,
SrcInstanceRegion:string,
SrcInstanceProjectId:string,
NetworkServiceDscp:string,
DestVpcName:string,
DestVpcSubnetworkRegion:string,
DestVpcSubnetworkName:string,
DestVpcProjectId:string,
DestInstanceGroupRegion:string,
SrcLocationAsn:string,
SourceSystem:string,
Type:string,
_TimeReceived:datetime)

.alter table GCPVPCFlow policy caching hot = 1d

.create-or-alter function GCPVPCFlowExpand() {
GCPVPCFlowRaw
| mv-expand events = records
// Alternative for non-nested: | extend events = records
| project
TimeGenerated=todatetime(events.TimeGenerated),
TenantId=toguid(events.TenantId),
DestGkeClusterLocation=tostring(events.DestGkeClusterLocation),
SrcGkePodWorkloadType=tostring(events.SrcGkePodWorkloadType),
SrcGkePodWorkloadName=tostring(events.SrcGkePodWorkloadName),
SrcGkePodNamespace=tostring(events.SrcGkePodNamespace),
SrcGkePodName=tostring(events.SrcGkePodName),
SrcGkeService=todynamic(events.SrcGkeService),
SrcGkeClusterName=tostring(events.SrcGkeClusterName),
SrcGkeClusterLocation=tostring(events.SrcGkeClusterLocation),
LbVpc=todynamic(events.LbVpc),
LbBackendGroupLocation=tostring(events.LbBackendGroupLocation),
DestGkeClusterName=tostring(events.DestGkeClusterName),
LbType=tostring(events.LbType),
LbUrlMapName=tostring(events.LbUrlMapName),
LbScheme=tostring(events.LbScheme),
LbReporter=tostring(events.LbReporter),
LbForwardingRuleProjectId=tostring(events.LbForwardingRuleProjectId),
LbForwardingRuleName=tostring(events.LbForwardingRuleName),
LbBackendGroupType=tostring(events.LbBackendGroupType),
LbBackendGroupName=tostring(events.LbBackendGroupName),
InternetRoutingDetailsEgressAsn=tostring(events.InternetRoutingDetailsEgressAsn),
SrcLocationRegion=tostring(events.SrcLocationRegion),
SrcLocationCity=tostring(events.SrcLocationCity),
LbBackendServiceName=tostring(events.LbBackendServiceName),
DestGkeService=todynamic(events.DestGkeService),
DestGkePodName=tostring(events.DestGkePodName),
DestGkePodNamespace=tostring(events.DestGkePodNamespace),
DestGatewayInterconnectName=tostring(events.DestGatewayInterconnectName),
DestGatewayVpc=todynamic(events.DestGatewayVpc),
DestGatewayType=tostring(events.DestGatewayType),
DestGatewayName=tostring(events.DestGatewayName),
DestGatewayLocation=tostring(events.DestGatewayLocation),
DestGatewayProjectId=tostring(events.DestGatewayProjectId),
SrcGatewayInterconnectProjectNumber=tostring(events.SrcGatewayInterconnectProjectNumber),
SrcGatewayInterconnectName=tostring(events.SrcGatewayInterconnectName),
SrcGatewayVpc=todynamic(events.SrcGatewayVpc),
SrcGatewayType=tostring(events.SrcGatewayType),
SrcGatewayName=tostring(events.SrcGatewayName),
SrcGatewayLocation=tostring(events.SrcGatewayLocation),
SrcGatewayProjectId=tostring(events.SrcGatewayProjectId),
PscEndpointVpc=todynamic(events.PscEndpointVpc),
PscEndpointTargetServiceType=tostring(events.PscEndpointTargetServiceType),
PscEndpointRegion=tostring(events.PscEndpointRegion),
PscEndpointConnectionId=tostring(events.PscEndpointConnectionId),
PscEndpointProjectId=tostring(events.PscEndpointProjectId),
PscAttachmentVpc=todynamic(events.PscAttachmentVpc),
PscAttachmentRegion=tostring(events.PscAttachmentRegion),
PscAttachmentProjectId=tostring(events.PscAttachmentProjectId),
DestGkePodWorkloadType=tostring(events.DestGkePodWorkloadType),
DestGkePodWorkloadName=tostring(events.DestGkePodWorkloadName),
SrcLocationCountry=tostring(events.SrcLocationCountry),
DestGatewayInterconnectProjectNumber=tostring(events.DestGatewayInterconnectProjectNumber),
SrcLocationContinent=tostring(events.SrcLocationContinent),
DestLocationRegion=tostring(events.DestLocationRegion),
DestInstanceRegion=tostring(events.DestInstanceRegion),
DestInstanceProjectId=tostring(events.DestInstanceProjectId),
SrcPort=tostring(events.SrcPort),
SrcIp=tostring(events.SrcIp),
Protocol=tostring(events.Protocol),
DestPort=tostring(events.DestPort),
DestIp=tostring(events.DestIp),
GCPResourceType=tostring(events.GCPResourceType),
SubnetworkName=tostring(events.SubnetworkName),
SubnetworkId=tostring(events.SubnetworkId),
DestInstanceVmName=tostring(events.DestInstanceVmName),
ProjectId=tostring(events.ProjectId),
Timestamp=todatetime(events.Timestamp),
ReceiveTimestamp=todatetime(events.ReceiveTimestamp),
LogName=tostring(events.LogName),
EndTime=todatetime(events.EndTime),
StartTime=todatetime(events.StartTime),
Rttmsec=tostring(events.Rttmsec),
Reporter=tostring(events.Reporter),
PacketsSent=tostring(events.PacketsSent),
BytesSent=tostring(events.BytesSent),
InsertId=tostring(events.InsertId),
Location=tostring(events.Location),
DestInstanceZone=tostring(events.DestInstanceZone),
DestInstanceGroupName=tostring(events.DestInstanceGroupName),
DestInstanceGroupZone=tostring(events.DestInstanceGroupZone),
DestLocationCountry=tostring(events.DestLocationCountry),
DestLocationCity=tostring(events.DestLocationCity),
DestLocationContinent=tostring(events.DestLocationContinent),
DestLocationAsn=tostring(events.DestLocationAsn),
SrcGoogleServiceType=tostring(events.SrcGoogleServiceType),
DestGoogleServiceType=tostring(events.DestGoogleServiceType),
SrcVpcName=tostring(events.SrcVpcName),
SrcVpcSubnetworkRegion=tostring(events.SrcVpcSubnetworkRegion),
SrcVpcSubnetworkName=tostring(events.SrcVpcSubnetworkName),
SrcVpcProjectId=tostring(events.SrcVpcProjectId),
SrcInstanceGroupRegion=tostring(events.SrcInstanceGroupRegion),
SrcInstanceGroupZone=tostring(events.SrcInstanceGroupZone),
SrcInstanceGroupName=tostring(events.SrcInstanceGroupName),
SrcInstanceZone=tostring(events.SrcInstanceZone),
SrcInstanceVmName=tostring(events.SrcInstanceVmName),
SrcInstanceRegion=tostring(events.SrcInstanceRegion),
SrcInstanceProjectId=tostring(events.SrcInstanceProjectId),
NetworkServiceDscp=tostring(events.NetworkServiceDscp),
DestVpcName=tostring(events.DestVpcName),
DestVpcSubnetworkRegion=tostring(events.DestVpcSubnetworkRegion),
DestVpcSubnetworkName=tostring(events.DestVpcSubnetworkName),
DestVpcProjectId=tostring(events.DestVpcProjectId),
DestInstanceGroupRegion=tostring(events.DestInstanceGroupRegion),
SrcLocationAsn=tostring(events.SrcLocationAsn),
SourceSystem=tostring(events.SourceSystem),
Type=tostring(events.Type),
_TimeReceived=todatetime(now())
}

.alter table GCPVPCFlow policy update @'[{"Source": "GCPVPCFlowRaw", "Query": "GCPVPCFlowExpand()", "IsEnabled": "True", "IsTransactional": true}]'
