// ============================================================================
// Azure Data Explorer KQL Script for CoreAzureBackup - UPDATED VERSION
// ============================================================================
// Generated: 2025-09-17 07:21:37
// Table type: Microsoft
// Schema discovered using hybrid approach (Management API + getschema)
// Data type corrections applied: TenantId->guid, Double->real (empirical fixes)
// All columns including underscore columns included
// Original columns: 71, Final columns: 71
// ============================================================================

.create-merge table CoreAzureBackupRaw (records:dynamic)

.alter-merge table CoreAzureBackupRaw policy retention softdelete = 1d

.alter table CoreAzureBackupRaw policy caching hot = 1h

// JSON mapping - choose appropriate option based on data structure
.create-or-alter table CoreAzureBackupRaw ingestion json mapping 'CoreAzureBackupRawMapping' '[{"column":"records","Properties":{"path":"$.records"}}]'
// Alternative for direct events: '[{"column":"records","Properties":{"path":"$"}}]'

.create-merge table CoreAzureBackup(
TimeGenerated:datetime,
TenantId:guid,
ResourceGroupName:string,
SchemaVersion:string,
SecondaryBackupProtectionState:string,
State:string,
StorageReplicationType:string,
SubscriptionId:string,
VaultName:string,
VaultTags:string,
VaultUniqueId:string,
ArchiveTierLatestRecoveryPointLocation:string,
ArchiveTierLatestRecoveryPointTime:datetime,
ArchiveTierOldestRecoveryPointLocation:string,
ArchiveTierOldestRecoveryPointTime:datetime,
ArchiveTierStorageReplicationType:string,
ProtectionGroupName:string,
IsArchiveEnabled:bool,
DatasourceSetResourceId:string,
DatasourceSetType:string,
DatasourceFriendlyName:string,
DatasourceResourceId:string,
DatasourceType:string,
BillingGroupUniqueId:string,
BillingGroupFriendlyName:string,
DatasourceResourceGroupName:string,
DatasourceSubscriptionId:string,
BackupItemId:string,
StorageConsumedInMBs:real,
ArchiveTierStorageConsumedInMBs:real,
VaultType:string,
PolicyName:string,
DatasourceSetFriendlyName:string,
ProtectedContainerWorkloadType:string,
ProtectedContainerUniqueId:string,
ProtectedContainerType:string,
SourceSystem:string,
ResourceId:string,
OperationName:string,
Category:string,
AgentVersion:string,
AzureBackupAgentVersion:string,
AzureDataCenter:string,
BackupItemAppVersion:string,
BackupItemFriendlyName:string,
BackupItemName:string,
BackupItemProtectionState:string,
BackupItemFrontEndSize:real,
BackupItemType:string,
BackupItemUniqueId:string,
BackupManagementServerType:string,
BackupManagementServerUniqueId:string,
BackupManagementType:string,
ProtectedContainerProtectionState:string,
ProtectedContainerOSVersion:string,
ProtectedContainerOSType:string,
ProtectedContainerName:string,
ProtectedContainerLocation:string,
ProtectedContainerFriendlyName:string,
PolicyId:string,
PolicyUniqueId:string,
OldestRecoveryPointLocation:string,
LatestRecoveryPointTime:datetime,
LatestRecoveryPointLocation:string,
BackupManagementServerVersion:string,
BackupManagementServerOSVersion:string,
BackupManagementServerName:string,
OldestRecoveryPointTime:datetime,
ExtendedProperties:dynamic,
Type:string,
_ResourceId:string,
_TimeReceived:datetime)

.alter table CoreAzureBackup policy caching hot = 1d

.create-or-alter function CoreAzureBackupExpand() {
CoreAzureBackupRaw
| mv-expand events = records
// Alternative for non-nested: | extend events = records
| project
TimeGenerated=todatetime(events.TimeGenerated),
TenantId=toguid(events.TenantId),
ResourceGroupName=tostring(events.ResourceGroupName),
SchemaVersion=tostring(events.SchemaVersion),
SecondaryBackupProtectionState=tostring(events.SecondaryBackupProtectionState),
State=tostring(events.State),
StorageReplicationType=tostring(events.StorageReplicationType),
SubscriptionId=tostring(events.SubscriptionId),
VaultName=tostring(events.VaultName),
VaultTags=tostring(events.VaultTags),
VaultUniqueId=tostring(events.VaultUniqueId),
ArchiveTierLatestRecoveryPointLocation=tostring(events.ArchiveTierLatestRecoveryPointLocation),
ArchiveTierLatestRecoveryPointTime=todatetime(events.ArchiveTierLatestRecoveryPointTime),
ArchiveTierOldestRecoveryPointLocation=tostring(events.ArchiveTierOldestRecoveryPointLocation),
ArchiveTierOldestRecoveryPointTime=todatetime(events.ArchiveTierOldestRecoveryPointTime),
ArchiveTierStorageReplicationType=tostring(events.ArchiveTierStorageReplicationType),
ProtectionGroupName=tostring(events.ProtectionGroupName),
IsArchiveEnabled=tobool(events.IsArchiveEnabled),
DatasourceSetResourceId=tostring(events.DatasourceSetResourceId),
DatasourceSetType=tostring(events.DatasourceSetType),
DatasourceFriendlyName=tostring(events.DatasourceFriendlyName),
DatasourceResourceId=tostring(events.DatasourceResourceId),
DatasourceType=tostring(events.DatasourceType),
BillingGroupUniqueId=tostring(events.BillingGroupUniqueId),
BillingGroupFriendlyName=tostring(events.BillingGroupFriendlyName),
DatasourceResourceGroupName=tostring(events.DatasourceResourceGroupName),
DatasourceSubscriptionId=tostring(events.DatasourceSubscriptionId),
BackupItemId=tostring(events.BackupItemId),
StorageConsumedInMBs=toreal(events.StorageConsumedInMBs),
ArchiveTierStorageConsumedInMBs=toreal(events.ArchiveTierStorageConsumedInMBs),
VaultType=tostring(events.VaultType),
PolicyName=tostring(events.PolicyName),
DatasourceSetFriendlyName=tostring(events.DatasourceSetFriendlyName),
ProtectedContainerWorkloadType=tostring(events.ProtectedContainerWorkloadType),
ProtectedContainerUniqueId=tostring(events.ProtectedContainerUniqueId),
ProtectedContainerType=tostring(events.ProtectedContainerType),
SourceSystem=tostring(events.SourceSystem),
ResourceId=tostring(events.ResourceId),
OperationName=tostring(events.OperationName),
Category=tostring(events.Category),
AgentVersion=tostring(events.AgentVersion),
AzureBackupAgentVersion=tostring(events.AzureBackupAgentVersion),
AzureDataCenter=tostring(events.AzureDataCenter),
BackupItemAppVersion=tostring(events.BackupItemAppVersion),
BackupItemFriendlyName=tostring(events.BackupItemFriendlyName),
BackupItemName=tostring(events.BackupItemName),
BackupItemProtectionState=tostring(events.BackupItemProtectionState),
BackupItemFrontEndSize=toreal(events.BackupItemFrontEndSize),
BackupItemType=tostring(events.BackupItemType),
BackupItemUniqueId=tostring(events.BackupItemUniqueId),
BackupManagementServerType=tostring(events.BackupManagementServerType),
BackupManagementServerUniqueId=tostring(events.BackupManagementServerUniqueId),
BackupManagementType=tostring(events.BackupManagementType),
ProtectedContainerProtectionState=tostring(events.ProtectedContainerProtectionState),
ProtectedContainerOSVersion=tostring(events.ProtectedContainerOSVersion),
ProtectedContainerOSType=tostring(events.ProtectedContainerOSType),
ProtectedContainerName=tostring(events.ProtectedContainerName),
ProtectedContainerLocation=tostring(events.ProtectedContainerLocation),
ProtectedContainerFriendlyName=tostring(events.ProtectedContainerFriendlyName),
PolicyId=tostring(events.PolicyId),
PolicyUniqueId=tostring(events.PolicyUniqueId),
OldestRecoveryPointLocation=tostring(events.OldestRecoveryPointLocation),
LatestRecoveryPointTime=todatetime(events.LatestRecoveryPointTime),
LatestRecoveryPointLocation=tostring(events.LatestRecoveryPointLocation),
BackupManagementServerVersion=tostring(events.BackupManagementServerVersion),
BackupManagementServerOSVersion=tostring(events.BackupManagementServerOSVersion),
BackupManagementServerName=tostring(events.BackupManagementServerName),
OldestRecoveryPointTime=todatetime(events.OldestRecoveryPointTime),
ExtendedProperties=todynamic(events.ExtendedProperties),
Type=tostring(events.Type),
_ResourceId=tostring(events._ResourceId),
_TimeReceived=todatetime(now())
}

.alter table CoreAzureBackup policy update @'[{"Source": "CoreAzureBackupRaw", "Query": "CoreAzureBackupExpand()", "IsEnabled": "True", "IsTransactional": true}]'
