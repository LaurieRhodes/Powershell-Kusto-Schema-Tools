// ============================================================================
// Azure Data Explorer KQL Script for ADFSSignInLogs - UPDATED VERSION
// ============================================================================
// Generated: 2025-09-17 07:15:58
// Table type: Microsoft
// Schema discovered using hybrid approach (Management API + getschema)
// Data type corrections applied: TenantId->guid, Double->real (empirical fixes)
// All columns including underscore columns included
// Original columns: 46, Final columns: 46
// ============================================================================

.create-merge table ADFSSignInLogsRaw (records:dynamic)

.alter-merge table ADFSSignInLogsRaw policy retention softdelete = 1d

.alter table ADFSSignInLogsRaw policy caching hot = 1h

// JSON mapping - choose appropriate option based on data structure
.create-or-alter table ADFSSignInLogsRaw ingestion json mapping 'ADFSSignInLogsRawMapping' '[{"column":"records","Properties":{"path":"$.records"}}]'
// Alternative for direct events: '[{"column":"records","Properties":{"path":"$"}}]'

.create-merge table ADFSSignInLogs(
TimeGenerated:datetime,
TenantId:guid,
CreatedDateTime:datetime,
DeviceDetail:string,
IsInteractive:bool,
Id:string,
IPAddress:string,
NetworkLocationDetails:string,
OriginalRequestId:string,
ProcessingTimeInMs:string,
ConditionalAccessStatus:string,
ResourceDisplayName:string,
ResourceTenantId:string,
Requirement:string,
Status:string,
TokenIssuerName:string,
TokenIssuerType:string,
UniqueTokenIdentifier:string,
UserAgent:string,
UserDisplayName:string,
ResourceIdentity:string,
ConditionalAccessPoliciesV2:dynamic,
ConditionalAccessPolicies:string,
AuthenticationRequirementPolicies:string,
SourceSystem:string,
OperationName:string,
OperationVersion:string,
Category:string,
ResultType:string,
ResultSignature:string,
ResultDescription:string,
DurationMs:long,
CorrelationId:string,
ResourceGroup:string,
Identity:string,
Level:string,
Location:string,
AlternateSignInName:string,
AppDisplayName:string,
AppId:string,
AuthenticationDetails:string,
AuthenticationProcessingDetails:string,
AuthenticationRequirement:string,
UserId:string,
UserPrincipalName:string,
Type:string,
_TimeReceived:datetime)

.alter table ADFSSignInLogs policy caching hot = 1d

.create-or-alter function ADFSSignInLogsExpand() {
ADFSSignInLogsRaw
| mv-expand events = records
// Alternative for non-nested: | extend events = records
| project
TimeGenerated=todatetime(events.TimeGenerated),
TenantId=toguid(events.TenantId),
CreatedDateTime=todatetime(events.CreatedDateTime),
DeviceDetail=tostring(events.DeviceDetail),
IsInteractive=tobool(events.IsInteractive),
Id=tostring(events.Id),
IPAddress=tostring(events.IPAddress),
NetworkLocationDetails=tostring(events.NetworkLocationDetails),
OriginalRequestId=tostring(events.OriginalRequestId),
ProcessingTimeInMs=tostring(events.ProcessingTimeInMs),
ConditionalAccessStatus=tostring(events.ConditionalAccessStatus),
ResourceDisplayName=tostring(events.ResourceDisplayName),
ResourceTenantId=tostring(events.ResourceTenantId),
Requirement=tostring(events.Requirement),
Status=tostring(events.Status),
TokenIssuerName=tostring(events.TokenIssuerName),
TokenIssuerType=tostring(events.TokenIssuerType),
UniqueTokenIdentifier=tostring(events.UniqueTokenIdentifier),
UserAgent=tostring(events.UserAgent),
UserDisplayName=tostring(events.UserDisplayName),
ResourceIdentity=tostring(events.ResourceIdentity),
ConditionalAccessPoliciesV2=todynamic(events.ConditionalAccessPoliciesV2),
ConditionalAccessPolicies=tostring(events.ConditionalAccessPolicies),
AuthenticationRequirementPolicies=tostring(events.AuthenticationRequirementPolicies),
SourceSystem=tostring(events.SourceSystem),
OperationName=tostring(events.OperationName),
OperationVersion=tostring(events.OperationVersion),
Category=tostring(events.Category),
ResultType=tostring(events.ResultType),
ResultSignature=tostring(events.ResultSignature),
ResultDescription=tostring(events.ResultDescription),
DurationMs=tolong(events.DurationMs),
CorrelationId=tostring(events.CorrelationId),
ResourceGroup=tostring(events.ResourceGroup),
Identity=tostring(events.Identity),
Level=tostring(events.Level),
Location=tostring(events.Location),
AlternateSignInName=tostring(events.AlternateSignInName),
AppDisplayName=tostring(events.AppDisplayName),
AppId=tostring(events.AppId),
AuthenticationDetails=tostring(events.AuthenticationDetails),
AuthenticationProcessingDetails=tostring(events.AuthenticationProcessingDetails),
AuthenticationRequirement=tostring(events.AuthenticationRequirement),
UserId=tostring(events.UserId),
UserPrincipalName=tostring(events.UserPrincipalName),
Type=tostring(events.Type),
_TimeReceived=todatetime(now())
}

.alter table ADFSSignInLogs policy update @'[{"Source": "ADFSSignInLogsRaw", "Query": "ADFSSignInLogsExpand()", "IsEnabled": "True", "IsTransactional": true}]'
