// ============================================================================
// Azure Data Explorer KQL Script for AGCAccessLogs - UPDATED VERSION
// ============================================================================
// Generated: 2025-09-17 07:16:38
// Table type: Microsoft
// Schema discovered using hybrid approach (Management API + getschema)
// Data type corrections applied: TenantId->guid, Double->real (empirical fixes)
// All columns including underscore columns included
// Original columns: 30, Final columns: 30
// ============================================================================

.create-merge table AGCAccessLogsRaw (records:dynamic)

.alter-merge table AGCAccessLogsRaw policy retention softdelete = 1d

.alter table AGCAccessLogsRaw policy caching hot = 1h

// JSON mapping - choose appropriate option based on data structure
.create-or-alter table AGCAccessLogsRaw ingestion json mapping 'AGCAccessLogsRawMapping' '[{"column":"records","Properties":{"path":"$.records"}}]'
// Alternative for direct events: '[{"column":"records","Properties":{"path":"$"}}]'

.create-merge table AGCAccessLogs(
TimeGenerated:datetime,
TenantId:guid,
TrackingId:string,
TlsProtocol:string,
TlsCipher:string,
TimeTaken:real,
ResponseHeaderBytes:long,
ResponseBodyBytes:long,
RequestUri:string,
RequestHeaderBytes:long,
RequestBodyBytes:long,
Referrer:string,
HttpVersion:string,
UserAgent:string,
HttpStatusCode:int,
HostName:string,
FrontendPort:int,
FrontendName:string,
ClientIp:string,
BackendTimeTaken:int,
BackendResponseLatency:real,
BackendPort:int,
BackendIp:string,
BackendHost:string,
Region:string,
OperationName:string,
HttpMethod:string,
SourceSystem:string,
Type:string,
_ResourceId:string,
_TimeReceived:datetime)

.alter table AGCAccessLogs policy caching hot = 1d

.create-or-alter function AGCAccessLogsExpand() {
AGCAccessLogsRaw
| mv-expand events = records
// Alternative for non-nested: | extend events = records
| project
TimeGenerated=todatetime(events.TimeGenerated),
TenantId=toguid(events.TenantId),
TrackingId=tostring(events.TrackingId),
TlsProtocol=tostring(events.TlsProtocol),
TlsCipher=tostring(events.TlsCipher),
TimeTaken=toreal(events.TimeTaken),
ResponseHeaderBytes=tolong(events.ResponseHeaderBytes),
ResponseBodyBytes=tolong(events.ResponseBodyBytes),
RequestUri=tostring(events.RequestUri),
RequestHeaderBytes=tolong(events.RequestHeaderBytes),
RequestBodyBytes=tolong(events.RequestBodyBytes),
Referrer=tostring(events.Referrer),
HttpVersion=tostring(events.HttpVersion),
UserAgent=tostring(events.UserAgent),
HttpStatusCode=toint(events.HttpStatusCode),
HostName=tostring(events.HostName),
FrontendPort=toint(events.FrontendPort),
FrontendName=tostring(events.FrontendName),
ClientIp=tostring(events.ClientIp),
BackendTimeTaken=toint(events.BackendTimeTaken),
BackendResponseLatency=toreal(events.BackendResponseLatency),
BackendPort=toint(events.BackendPort),
BackendIp=tostring(events.BackendIp),
BackendHost=tostring(events.BackendHost),
Region=tostring(events.Region),
OperationName=tostring(events.OperationName),
HttpMethod=tostring(events.HttpMethod),
SourceSystem=tostring(events.SourceSystem),
Type=tostring(events.Type),
_ResourceId=tostring(events._ResourceId),
_TimeReceived=todatetime(now())
}

.alter table AGCAccessLogs policy update @'[{"Source": "AGCAccessLogsRaw", "Query": "AGCAccessLogsExpand()", "IsEnabled": "True", "IsTransactional": true}]'
