// ============================================================================
// Azure Data Explorer KQL Script for NTATopologyDetails - UPDATED VERSION
// ============================================================================
// Generated: 2025-09-14 10:17:45
// Table type: Microsoft
// Schema discovered using hybrid approach (Management API + getschema)
// Data type corrections applied: TenantId->guid, Double->real (empirical fixes)
// All columns including underscore columns included
// Original columns: 117, Final columns: 117
// ============================================================================

.create-merge table NTATopologyDetailsRaw (records:dynamic)

.alter-merge table NTATopologyDetailsRaw policy retention softdelete = 1d

.alter table NTATopologyDetailsRaw policy caching hot = 1h

// JSON mapping - choose appropriate option based on data structure
.create-or-alter table NTATopologyDetailsRaw ingestion json mapping 'NTATopologyDetailsRawMapping' '[{"column":"records","Properties":{"path":"$.records"}}]'
// Alternative for direct events: '[{"column":"records","Properties":{"path":"$"}}]'

.create-merge table NTATopologyDetails(
TimeGenerated:datetime,
TenantId:guid,
BackendAddressPool:string,
FloatingIpEnabled:bool,
BackendPort:int,
FrontendPort:int,
BackendIpAddress:string,
FrontendIpAddress:string,
SubnetRegion2:string,
SubnetRegion1:string,
Subnet2:string,
Subnet1:string,
VirtualAppliances:string,
GatewaySubnet:string,
PublicFrontendIps:string,
PrivateFrontendIps:string,
AppGatewayType:string,
BackendSubnets:string,
FrontendIps:string,
FrontendSubnets:string,
FrontendSubnet:string,
LoadBalancerType:string,
UseRemoteGateways:bool,
AllowGatewayTransit:bool,
AllowForwardedTraffic:bool,
AllowVirtualNetworkAccess:bool,
VirtualNetwork2:string,
CircuitProvisioningState:string,
VirtualNetwork1:string,
ServiceProviderProperties:string,
SkuDetail:string,
PrivateEndpointResourceId:string,
EncryptionEnforcement:string,
EncryptionEnabled:bool,
VnetEncryptionSupported:bool,
Status:string,
ComponentType:string,
Weight:int,
Path:string,
LocalPreference:string,
SecondaryNextHop:string,
PrimaryNextHop:string,
Network:string,
VlanId:int,
SecondaryBytesOut:long,
SecondaryBytesIn:long,
PrimaryBytesOut:long,
PrimaryBytesIn:long,
State:string,
SecondaryPeerAddressPrefix:string,
SecondaryAzurePort:string,
PrimaryPeerAddressPrefix:string,
PrimaryAzurePort:string,
PeeringType:string,
PeerAsn:long,
AzureAsn:long,
ServiceProviderProvisioningState:string,
PrivateLinkResourceId:string,
EgressBytesTransferred:long,
RoutingWeight:int,
VmssName:string,
IsVirtualAppliance:bool,
SubnetPrefixes:string,
IpAddress:string,
VpnClientAddressPrefixes:string,
BgpEnabled:bool,
Sku:string,
VipAddress:string,
VirtualSubnetwork:string,
GatewayType:string,
RouteTable:string,
Nsg:string,
AddressPrefixes:string,
Tags:string,
DiscoveryRegion:string,
SubscriptionName:string,
Subscription:string,
AzureResourceType:string,
Region:string,
Name:string,
MacAddress:string,
SchemaVersion:string,
TopologyVersion:string,
TimeProcessed:datetime,
SubType:string,
Zones:string,
IngressBytesTransferred:long,
Priority:int,
PrivateIpAddresses:string,
ConnectionStatus:string,
ConnectionType:string,
GatewayConnectionType:string,
Peer:string,
LocalNetworkGateway:string,
VirtualNetworkGateway2:string,
VirtualNetworkGateway1:string,
NextHopIp:string,
NextHopType:string,
RuleType:string,
Direction:string,
Access:string,
DestinationAddressPrefix:string,
SourceAddressPrefix:string,
DestinationPortRange:string,
SourcePortRange:string,
Protocol:string,
Description:string,
FlowLogStorageAccount:string,
IsFlowEnabled:bool,
ApplicationGatewayBackendPools:string,
LoadBalancerBackendPools:string,
EnableIpForwarding:bool,
Subnetwork:string,
PublicIpAddresses:string,
VirtualMachine:string,
SourceSystem:string,
Type:string,
_TimeReceived:datetime)

.alter table NTATopologyDetails policy caching hot = 1d

.create-or-alter function NTATopologyDetailsExpand() {
NTATopologyDetailsRaw
| mv-expand events = records
// Alternative for non-nested: | extend events = records
| project
TimeGenerated=todatetime(events.TimeGenerated),
TenantId=toguid(events.TenantId),
BackendAddressPool=tostring(events.BackendAddressPool),
FloatingIpEnabled=tobool(events.FloatingIpEnabled),
BackendPort=toint(events.BackendPort),
FrontendPort=toint(events.FrontendPort),
BackendIpAddress=tostring(events.BackendIpAddress),
FrontendIpAddress=tostring(events.FrontendIpAddress),
SubnetRegion2=tostring(events.SubnetRegion2),
SubnetRegion1=tostring(events.SubnetRegion1),
Subnet2=tostring(events.Subnet2),
Subnet1=tostring(events.Subnet1),
VirtualAppliances=tostring(events.VirtualAppliances),
GatewaySubnet=tostring(events.GatewaySubnet),
PublicFrontendIps=tostring(events.PublicFrontendIps),
PrivateFrontendIps=tostring(events.PrivateFrontendIps),
AppGatewayType=tostring(events.AppGatewayType),
BackendSubnets=tostring(events.BackendSubnets),
FrontendIps=tostring(events.FrontendIps),
FrontendSubnets=tostring(events.FrontendSubnets),
FrontendSubnet=tostring(events.FrontendSubnet),
LoadBalancerType=tostring(events.LoadBalancerType),
UseRemoteGateways=tobool(events.UseRemoteGateways),
AllowGatewayTransit=tobool(events.AllowGatewayTransit),
AllowForwardedTraffic=tobool(events.AllowForwardedTraffic),
AllowVirtualNetworkAccess=tobool(events.AllowVirtualNetworkAccess),
VirtualNetwork2=tostring(events.VirtualNetwork2),
CircuitProvisioningState=tostring(events.CircuitProvisioningState),
VirtualNetwork1=tostring(events.VirtualNetwork1),
ServiceProviderProperties=tostring(events.ServiceProviderProperties),
SkuDetail=tostring(events.SkuDetail),
PrivateEndpointResourceId=tostring(events.PrivateEndpointResourceId),
EncryptionEnforcement=tostring(events.EncryptionEnforcement),
EncryptionEnabled=tobool(events.EncryptionEnabled),
VnetEncryptionSupported=tobool(events.VnetEncryptionSupported),
Status=tostring(events.Status),
ComponentType=tostring(events.ComponentType),
Weight=toint(events.Weight),
Path=tostring(events.Path),
LocalPreference=tostring(events.LocalPreference),
SecondaryNextHop=tostring(events.SecondaryNextHop),
PrimaryNextHop=tostring(events.PrimaryNextHop),
Network=tostring(events.Network),
VlanId=toint(events.VlanId),
SecondaryBytesOut=tolong(events.SecondaryBytesOut),
SecondaryBytesIn=tolong(events.SecondaryBytesIn),
PrimaryBytesOut=tolong(events.PrimaryBytesOut),
PrimaryBytesIn=tolong(events.PrimaryBytesIn),
State=tostring(events.State),
SecondaryPeerAddressPrefix=tostring(events.SecondaryPeerAddressPrefix),
SecondaryAzurePort=tostring(events.SecondaryAzurePort),
PrimaryPeerAddressPrefix=tostring(events.PrimaryPeerAddressPrefix),
PrimaryAzurePort=tostring(events.PrimaryAzurePort),
PeeringType=tostring(events.PeeringType),
PeerAsn=tolong(events.PeerAsn),
AzureAsn=tolong(events.AzureAsn),
ServiceProviderProvisioningState=tostring(events.ServiceProviderProvisioningState),
PrivateLinkResourceId=tostring(events.PrivateLinkResourceId),
EgressBytesTransferred=tolong(events.EgressBytesTransferred),
RoutingWeight=toint(events.RoutingWeight),
VmssName=tostring(events.VmssName),
IsVirtualAppliance=tobool(events.IsVirtualAppliance),
SubnetPrefixes=tostring(events.SubnetPrefixes),
IpAddress=tostring(events.IpAddress),
VpnClientAddressPrefixes=tostring(events.VpnClientAddressPrefixes),
BgpEnabled=tobool(events.BgpEnabled),
Sku=tostring(events.Sku),
VipAddress=tostring(events.VipAddress),
VirtualSubnetwork=tostring(events.VirtualSubnetwork),
GatewayType=tostring(events.GatewayType),
RouteTable=tostring(events.RouteTable),
Nsg=tostring(events.Nsg),
AddressPrefixes=tostring(events.AddressPrefixes),
Tags=tostring(events.Tags),
DiscoveryRegion=tostring(events.DiscoveryRegion),
SubscriptionName=tostring(events.SubscriptionName),
Subscription=tostring(events.Subscription),
AzureResourceType=tostring(events.AzureResourceType),
Region=tostring(events.Region),
Name=tostring(events.Name),
MacAddress=tostring(events.MacAddress),
SchemaVersion=tostring(events.SchemaVersion),
TopologyVersion=tostring(events.TopologyVersion),
TimeProcessed=todatetime(events.TimeProcessed),
SubType=tostring(events.SubType),
Zones=tostring(events.Zones),
IngressBytesTransferred=tolong(events.IngressBytesTransferred),
Priority=toint(events.Priority),
PrivateIpAddresses=tostring(events.PrivateIpAddresses),
ConnectionStatus=tostring(events.ConnectionStatus),
ConnectionType=tostring(events.ConnectionType),
GatewayConnectionType=tostring(events.GatewayConnectionType),
Peer=tostring(events.Peer),
LocalNetworkGateway=tostring(events.LocalNetworkGateway),
VirtualNetworkGateway2=tostring(events.VirtualNetworkGateway2),
VirtualNetworkGateway1=tostring(events.VirtualNetworkGateway1),
NextHopIp=tostring(events.NextHopIp),
NextHopType=tostring(events.NextHopType),
RuleType=tostring(events.RuleType),
Direction=tostring(events.Direction),
Access=tostring(events.Access),
DestinationAddressPrefix=tostring(events.DestinationAddressPrefix),
SourceAddressPrefix=tostring(events.SourceAddressPrefix),
DestinationPortRange=tostring(events.DestinationPortRange),
SourcePortRange=tostring(events.SourcePortRange),
Protocol=tostring(events.Protocol),
Description=tostring(events.Description),
FlowLogStorageAccount=tostring(events.FlowLogStorageAccount),
IsFlowEnabled=tobool(events.IsFlowEnabled),
ApplicationGatewayBackendPools=tostring(events.ApplicationGatewayBackendPools),
LoadBalancerBackendPools=tostring(events.LoadBalancerBackendPools),
EnableIpForwarding=tobool(events.EnableIpForwarding),
Subnetwork=tostring(events.Subnetwork),
PublicIpAddresses=tostring(events.PublicIpAddresses),
VirtualMachine=tostring(events.VirtualMachine),
SourceSystem=tostring(events.SourceSystem),
Type=tostring(events.Type),
_TimeReceived=todatetime(now())
}

.alter table NTATopologyDetails policy update @'[{"Source": "NTATopologyDetailsRaw", "Query": "NTATopologyDetailsExpand()", "IsEnabled": "True", "IsTransactional": true}]'
