// ============================================================================
// Azure Data Explorer KQL Script for DNSQueryLogs - UPDATED VERSION
// ============================================================================
// Generated: 2025-09-14 10:13:28
// Table type: Microsoft
// Schema discovered using hybrid approach (Management API + getschema)
// Data type corrections applied: TenantId->guid, Double->real (empirical fixes)
// All columns including underscore columns included
// Original columns: 29, Final columns: 29
// ============================================================================

.create-merge table DNSQueryLogsRaw (records:dynamic)

.alter-merge table DNSQueryLogsRaw policy retention softdelete = 1d

.alter table DNSQueryLogsRaw policy caching hot = 1h

// JSON mapping - choose appropriate option based on data structure
.create-or-alter table DNSQueryLogsRaw ingestion json mapping 'DNSQueryLogsRawMapping' '[{"column":"records","Properties":{"path":"$.records"}}]'
// Alternative for direct events: '[{"column":"records","Properties":{"path":"$"}}]'

.create-merge table DNSQueryLogs(
TimeGenerated:datetime,
TenantId:guid,
DnsForwardingRulesetId:string,
ResolverPolicyDomainListId:string,
ResolverPolicyRuleAction:string,
ResolverPolicyId:string,
ResolutionPath:string,
QueryResponseTime:int,
PrivateResolverEndpointId:string,
Transport:string,
DestinationPort:int,
DestinationIpAddress:string,
SourcePort:int,
SourceIpAddress:string,
AdditionalRecords:dynamic,
Authority:dynamic,
Answer:dynamic,
ResponseCode:int,
QueryClass:string,
QueryType:string,
QueryName:string,
VirtualNetworkId:string,
Region:string,
Version:string,
OperationName:string,
DnsForwardingRulesetDomain:string,
SourceSystem:string,
Type:string,
_ResourceId:string,
_TimeReceived:datetime)

.alter table DNSQueryLogs policy caching hot = 1d

.create-or-alter function DNSQueryLogsExpand() {
DNSQueryLogsRaw
| mv-expand events = records
// Alternative for non-nested: | extend events = records
| project
TimeGenerated=todatetime(events.TimeGenerated),
TenantId=toguid(events.TenantId),
DnsForwardingRulesetId=tostring(events.DnsForwardingRulesetId),
ResolverPolicyDomainListId=tostring(events.ResolverPolicyDomainListId),
ResolverPolicyRuleAction=tostring(events.ResolverPolicyRuleAction),
ResolverPolicyId=tostring(events.ResolverPolicyId),
ResolutionPath=tostring(events.ResolutionPath),
QueryResponseTime=toint(events.QueryResponseTime),
PrivateResolverEndpointId=tostring(events.PrivateResolverEndpointId),
Transport=tostring(events.Transport),
DestinationPort=toint(events.DestinationPort),
DestinationIpAddress=tostring(events.DestinationIpAddress),
SourcePort=toint(events.SourcePort),
SourceIpAddress=tostring(events.SourceIpAddress),
AdditionalRecords=todynamic(events.AdditionalRecords),
Authority=todynamic(events.Authority),
Answer=todynamic(events.Answer),
ResponseCode=toint(events.ResponseCode),
QueryClass=tostring(events.QueryClass),
QueryType=tostring(events.QueryType),
QueryName=tostring(events.QueryName),
VirtualNetworkId=tostring(events.VirtualNetworkId),
Region=tostring(events.Region),
Version=tostring(events.Version),
OperationName=tostring(events.OperationName),
DnsForwardingRulesetDomain=tostring(events.DnsForwardingRulesetDomain),
SourceSystem=tostring(events.SourceSystem),
Type=tostring(events.Type),
_ResourceId=tostring(events._ResourceId),
_TimeReceived=todatetime(now())
}

.alter table DNSQueryLogs policy update @'[{"Source": "DNSQueryLogsRaw", "Query": "DNSQueryLogsExpand()", "IsEnabled": "True", "IsTransactional": true}]'
