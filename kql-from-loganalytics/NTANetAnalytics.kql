// ============================================================================
// Azure Data Explorer KQL Script for NTANetAnalytics - UPDATED VERSION
// ============================================================================
// Generated: 2025-09-14 10:17:44
// Table type: Microsoft
// Schema discovered using hybrid approach (Management API + getschema)
// Data type corrections applied: TenantId->guid, Double->real (empirical fixes)
// All columns including underscore columns included
// Original columns: 86, Final columns: 86
// ============================================================================

.create-merge table NTANetAnalyticsRaw (records:dynamic)

.alter-merge table NTANetAnalyticsRaw policy retention softdelete = 1d

.alter table NTANetAnalyticsRaw policy caching hot = 1h

// JSON mapping - choose appropriate option based on data structure
.create-or-alter table NTANetAnalyticsRaw ingestion json mapping 'NTANetAnalyticsRawMapping' '[{"column":"records","Properties":{"path":"$.records"}}]'
// Alternative for direct events: '[{"column":"records","Properties":{"path":"$"}}]'

.create-merge table NTANetAnalytics(
TimeGenerated:datetime,
TenantId:guid,
DestPublicIps:string,
SrcPublicIps:string,
CompletedFlows:long,
BytesSrcToDest:long,
BytesDestToSrc:long,
PacketsSrcToDest:long,
PacketsDestToSrc:long,
DeniedOutFlows:long,
AllowedOutFlows:long,
DeniedInFlows:long,
AllowedInFlows:long,
FlowEncryption:string,
AzureRegion:string,
Country:string,
ConnectingVnets:string,
ConnectionName:string,
ConnectionType:string,
AclGroup:string,
ExpressRouteCircuitPeeringType:string,
AclRule:string,
PrivateEndpointResourceId:string,
SrcServiceTags:string,
DestNetworkGroups:string,
SrcNetworkGroups:string,
DestCloud:string,
SrcCloud:string,
DestEnvironment:string,
SrcEnvironment:string,
DestTenantName:string,
SrcTenantName:string,
DestTenantId:string,
SrcTenantId:string,
DestServiceName:string,
SrcServiceName:string,
DestServiceId:string,
SrcServiceId:string,
PrivateLinkResourceName:string,
PrivateLinkResourceId:string,
Status:string,
DestExpressRouteCircuit:string,
SrcExpressRouteCircuit:string,
DestLocalNetworkGateway:string,
FlowStatus:string,
FlowDirection:string,
IsFlowCapturedAtUdrHop:bool,
L7Protocol:string,
L4Protocol:string,
DestPort:int,
SrcPorts:string,
DestIp:string,
SrcIp:string,
FlowEndTime:datetime,
FlowStartTime:datetime,
FlowType:string,
FlowIntervalEndTime:datetime,
FlowIntervalStartTime:datetime,
TimeProcessed:datetime,
FaSchemaVersion:string,
SubType:string,
NsgList:string,
NsgRule:string,
NsgRuleType:string,
MacAddress:string,
SrcLocalNetworkGateway:string,
DestLoadBalancer:string,
SrcLoadBalancer:string,
DestApplicationGateway:string,
SrcApplicationGateway:string,
DestSubnet:string,
SrcSubnet:string,
DestVm:string,
DestServiceTags:string,
SrcVm:string,
SrcNic:string,
DestRegion:string,
SrcRegion:string,
DestSubscription:string,
SrcSubscription:string,
FlowLogResourceId:string,
TargetResourceType:string,
TargetResourceId:string,
DestNic:string,
SourceSystem:string,
Type:string,
_TimeReceived:datetime)

.alter table NTANetAnalytics policy caching hot = 1d

.create-or-alter function NTANetAnalyticsExpand() {
NTANetAnalyticsRaw
| mv-expand events = records
// Alternative for non-nested: | extend events = records
| project
TimeGenerated=todatetime(events.TimeGenerated),
TenantId=toguid(events.TenantId),
DestPublicIps=tostring(events.DestPublicIps),
SrcPublicIps=tostring(events.SrcPublicIps),
CompletedFlows=tolong(events.CompletedFlows),
BytesSrcToDest=tolong(events.BytesSrcToDest),
BytesDestToSrc=tolong(events.BytesDestToSrc),
PacketsSrcToDest=tolong(events.PacketsSrcToDest),
PacketsDestToSrc=tolong(events.PacketsDestToSrc),
DeniedOutFlows=tolong(events.DeniedOutFlows),
AllowedOutFlows=tolong(events.AllowedOutFlows),
DeniedInFlows=tolong(events.DeniedInFlows),
AllowedInFlows=tolong(events.AllowedInFlows),
FlowEncryption=tostring(events.FlowEncryption),
AzureRegion=tostring(events.AzureRegion),
Country=tostring(events.Country),
ConnectingVnets=tostring(events.ConnectingVnets),
ConnectionName=tostring(events.ConnectionName),
ConnectionType=tostring(events.ConnectionType),
AclGroup=tostring(events.AclGroup),
ExpressRouteCircuitPeeringType=tostring(events.ExpressRouteCircuitPeeringType),
AclRule=tostring(events.AclRule),
PrivateEndpointResourceId=tostring(events.PrivateEndpointResourceId),
SrcServiceTags=tostring(events.SrcServiceTags),
DestNetworkGroups=tostring(events.DestNetworkGroups),
SrcNetworkGroups=tostring(events.SrcNetworkGroups),
DestCloud=tostring(events.DestCloud),
SrcCloud=tostring(events.SrcCloud),
DestEnvironment=tostring(events.DestEnvironment),
SrcEnvironment=tostring(events.SrcEnvironment),
DestTenantName=tostring(events.DestTenantName),
SrcTenantName=tostring(events.SrcTenantName),
DestTenantId=tostring(events.DestTenantId),
SrcTenantId=tostring(events.SrcTenantId),
DestServiceName=tostring(events.DestServiceName),
SrcServiceName=tostring(events.SrcServiceName),
DestServiceId=tostring(events.DestServiceId),
SrcServiceId=tostring(events.SrcServiceId),
PrivateLinkResourceName=tostring(events.PrivateLinkResourceName),
PrivateLinkResourceId=tostring(events.PrivateLinkResourceId),
Status=tostring(events.Status),
DestExpressRouteCircuit=tostring(events.DestExpressRouteCircuit),
SrcExpressRouteCircuit=tostring(events.SrcExpressRouteCircuit),
DestLocalNetworkGateway=tostring(events.DestLocalNetworkGateway),
FlowStatus=tostring(events.FlowStatus),
FlowDirection=tostring(events.FlowDirection),
IsFlowCapturedAtUdrHop=tobool(events.IsFlowCapturedAtUdrHop),
L7Protocol=tostring(events.L7Protocol),
L4Protocol=tostring(events.L4Protocol),
DestPort=toint(events.DestPort),
SrcPorts=tostring(events.SrcPorts),
DestIp=tostring(events.DestIp),
SrcIp=tostring(events.SrcIp),
FlowEndTime=todatetime(events.FlowEndTime),
FlowStartTime=todatetime(events.FlowStartTime),
FlowType=tostring(events.FlowType),
FlowIntervalEndTime=todatetime(events.FlowIntervalEndTime),
FlowIntervalStartTime=todatetime(events.FlowIntervalStartTime),
TimeProcessed=todatetime(events.TimeProcessed),
FaSchemaVersion=tostring(events.FaSchemaVersion),
SubType=tostring(events.SubType),
NsgList=tostring(events.NsgList),
NsgRule=tostring(events.NsgRule),
NsgRuleType=tostring(events.NsgRuleType),
MacAddress=tostring(events.MacAddress),
SrcLocalNetworkGateway=tostring(events.SrcLocalNetworkGateway),
DestLoadBalancer=tostring(events.DestLoadBalancer),
SrcLoadBalancer=tostring(events.SrcLoadBalancer),
DestApplicationGateway=tostring(events.DestApplicationGateway),
SrcApplicationGateway=tostring(events.SrcApplicationGateway),
DestSubnet=tostring(events.DestSubnet),
SrcSubnet=tostring(events.SrcSubnet),
DestVm=tostring(events.DestVm),
DestServiceTags=tostring(events.DestServiceTags),
SrcVm=tostring(events.SrcVm),
SrcNic=tostring(events.SrcNic),
DestRegion=tostring(events.DestRegion),
SrcRegion=tostring(events.SrcRegion),
DestSubscription=tostring(events.DestSubscription),
SrcSubscription=tostring(events.SrcSubscription),
FlowLogResourceId=tostring(events.FlowLogResourceId),
TargetResourceType=tostring(events.TargetResourceType),
TargetResourceId=tostring(events.TargetResourceId),
DestNic=tostring(events.DestNic),
SourceSystem=tostring(events.SourceSystem),
Type=tostring(events.Type),
_TimeReceived=todatetime(now())
}

.alter table NTANetAnalytics policy update @'[{"Source": "NTANetAnalyticsRaw", "Query": "NTANetAnalyticsExpand()", "IsEnabled": "True", "IsTransactional": true}]'
