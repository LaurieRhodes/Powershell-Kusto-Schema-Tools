// ============================================================================
// Azure Data Explorer KQL Script for AppPlatformIngressLogs - UPDATED VERSION
// ============================================================================
// Generated: 2025-09-14 11:22:29
// Table type: Microsoft
// Schema discovered using hybrid approach (Management API + getschema)
// Data type corrections applied: TenantId->guid, Double->real (empirical fixes)
// All columns including underscore columns included
// Original columns: 28, Final columns: 28
// ============================================================================

.create-merge table AppPlatformIngressLogsRaw (records:dynamic)

.alter-merge table AppPlatformIngressLogsRaw policy retention softdelete = 1d

.alter table AppPlatformIngressLogsRaw policy caching hot = 1h

// JSON mapping - choose appropriate option based on data structure
.create-or-alter table AppPlatformIngressLogsRaw ingestion json mapping 'AppPlatformIngressLogsRawMapping' '[{"column":"records","Properties":{"path":"$.records"}}]'
// Alternative for direct events: '[{"column":"records","Properties":{"path":"$"}}]'

.create-merge table AppPlatformIngressLogs(
TimeGenerated:datetime,
TenantId:guid,
RemoteAddr:string,
SourceSystem:string,
OperationName:string,
RequestHeaders:string,
ReqId:string,
UpstreamStatus:string,
UpstreamResponseTime:string,
UpstreamResponseLength:string,
UpstreamAddr:string,
ProxyAltUpstreamName:string,
TimeLocal:string,
ProxyUpstreamName:string,
RequestLength:string,
HttpUserAgent:string,
HttpReferer:string,
BodyBytesSent:string,
Status:string,
Request:string,
Host:string,
LocalTime:string,
RemoteUser:string,
RemoteIP:string,
RequestTime:real,
ProxyAlternativeUpstreamName:string,
Type:string,
_ResourceId:string,
_TimeReceived:datetime)

.alter table AppPlatformIngressLogs policy caching hot = 1d

.create-or-alter function AppPlatformIngressLogsExpand() {
AppPlatformIngressLogsRaw
| mv-expand events = records
// Alternative for non-nested: | extend events = records
| project
TimeGenerated=todatetime(events.TimeGenerated),
TenantId=toguid(events.TenantId),
RemoteAddr=tostring(events.RemoteAddr),
SourceSystem=tostring(events.SourceSystem),
OperationName=tostring(events.OperationName),
RequestHeaders=tostring(events.RequestHeaders),
ReqId=tostring(events.ReqId),
UpstreamStatus=tostring(events.UpstreamStatus),
UpstreamResponseTime=tostring(events.UpstreamResponseTime),
UpstreamResponseLength=tostring(events.UpstreamResponseLength),
UpstreamAddr=tostring(events.UpstreamAddr),
ProxyAltUpstreamName=tostring(events.ProxyAltUpstreamName),
TimeLocal=tostring(events.TimeLocal),
ProxyUpstreamName=tostring(events.ProxyUpstreamName),
RequestLength=tostring(events.RequestLength),
HttpUserAgent=tostring(events.HttpUserAgent),
HttpReferer=tostring(events.HttpReferer),
BodyBytesSent=tostring(events.BodyBytesSent),
Status=tostring(events.Status),
Request=tostring(events.Request),
Host=tostring(events.Host),
LocalTime=tostring(events.LocalTime),
RemoteUser=tostring(events.RemoteUser),
RemoteIP=tostring(events.RemoteIP),
RequestTime=toreal(events.RequestTime),
ProxyAlternativeUpstreamName=tostring(events.ProxyAlternativeUpstreamName),
Type=tostring(events.Type),
_ResourceId=tostring(events._ResourceId),
_TimeReceived=todatetime(now())
}

.alter table AppPlatformIngressLogs policy update @'[{"Source": "AppPlatformIngressLogsRaw", "Query": "AppPlatformIngressLogsExpand()", "IsEnabled": "True", "IsTransactional": true}]'
