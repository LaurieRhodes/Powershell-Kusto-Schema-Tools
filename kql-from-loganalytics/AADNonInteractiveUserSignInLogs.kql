// ============================================================================
// Azure Data Explorer KQL Script for AADNonInteractiveUserSignInLogs - UPDATED VERSION
// ============================================================================
// Generated: 2025-09-14 11:18:20
// Table type: Microsoft
// Schema discovered using hybrid approach (Management API + getschema)
// Data type corrections applied: TenantId->guid, Double->real (empirical fixes)
// All columns including underscore columns included
// Original columns: 82, Final columns: 82
// ============================================================================

.create-merge table AADNonInteractiveUserSignInLogsRaw (records:dynamic)

.alter-merge table AADNonInteractiveUserSignInLogsRaw policy retention softdelete = 1d

.alter table AADNonInteractiveUserSignInLogsRaw policy caching hot = 1h

// JSON mapping - choose appropriate option based on data structure
.create-or-alter table AADNonInteractiveUserSignInLogsRaw ingestion json mapping 'AADNonInteractiveUserSignInLogsRawMapping' '[{"column":"records","Properties":{"path":"$.records"}}]'
// Alternative for direct events: '[{"column":"records","Properties":{"path":"$"}}]'

.create-merge table AADNonInteractiveUserSignInLogs(
TimeGenerated:datetime,
TenantId:guid,
ResourceServicePrincipalId:string,
ResourceOwnerTenantId:string,
ResourceIdentity:string,
ResourceDisplayName:string,
ProcessingTimeInMs:string,
OriginalTransferMethod:string,
OriginalRequestId:string,
ResourceTenantId:string,
NetworkLocationDetails:string,
LocationDetails:string,
IsThroughGlobalSecureAccess:bool,
IsTenantRestricted:bool,
IsRisky:bool,
IsInteractive:bool,
IPAddress:string,
IncomingTokenType:string,
MfaDetail:string,
Id:string,
RiskDetail:string,
RiskEventTypes_V2:string,
UserId:string,
UserDisplayName:string,
UserAgent:string,
UniqueTokenIdentifier:string,
TokenIssuerType:string,
TokenIssuerName:string,
Status:string,
RiskEventTypes:string,
TokenProtectionStatusDetails:string,
SignInEventTypes:string,
SessionLifetimePolicies:string,
SessionId:string,
ServicePrincipalId:string,
RiskState:string,
RiskLevelDuringSignIn:string,
RiskLevelAggregated:string,
SignInIdentifierType:string,
HomeTenantName:string,
HomeTenantId:string,
GlobalSecureAccessIpAddress:string,
AlternateSignInName:string,
Agent:string,
AADTenantId:string,
Location:string,
Level:string,
Identity:string,
ResourceGroup:string,
AppDisplayName:string,
CorrelationId:string,
ResultDescription:string,
ResultSignature:string,
ResultType:string,
Category:string,
OperationVersion:string,
OperationName:string,
SourceSystem:string,
DurationMs:long,
AppId:string,
AppliedEventListeners:dynamic,
AppOwnerTenantId:string,
FederatedCredentialId:string,
DeviceDetail:string,
CrossTenantAccessType:string,
CreatedDateTime:datetime,
ConditionalAccessStatus:string,
ConditionalAccessPoliciesV2:dynamic,
ConditionalAccessPolicies:string,
ClientCredentialType:string,
ClientAppUsed:string,
AutonomousSystemNumber:string,
AuthenticationRequirementPolicies:string,
AuthenticationRequirement:string,
AuthenticationProtocol:string,
AuthenticationProcessingDetails:string,
AuthenticationMethodsUsed:string,
AuthenticationDetails:string,
AuthenticationContextClassReferences:string,
UserPrincipalName:string,
UserType:string,
Type:string,
_TimeReceived:datetime)

.alter table AADNonInteractiveUserSignInLogs policy caching hot = 1d

.create-or-alter function AADNonInteractiveUserSignInLogsExpand() {
AADNonInteractiveUserSignInLogsRaw
| mv-expand events = records
// Alternative for non-nested: | extend events = records
| project
TimeGenerated=todatetime(events.TimeGenerated),
TenantId=toguid(events.TenantId),
ResourceServicePrincipalId=tostring(events.ResourceServicePrincipalId),
ResourceOwnerTenantId=tostring(events.ResourceOwnerTenantId),
ResourceIdentity=tostring(events.ResourceIdentity),
ResourceDisplayName=tostring(events.ResourceDisplayName),
ProcessingTimeInMs=tostring(events.ProcessingTimeInMs),
OriginalTransferMethod=tostring(events.OriginalTransferMethod),
OriginalRequestId=tostring(events.OriginalRequestId),
ResourceTenantId=tostring(events.ResourceTenantId),
NetworkLocationDetails=tostring(events.NetworkLocationDetails),
LocationDetails=tostring(events.LocationDetails),
IsThroughGlobalSecureAccess=tobool(events.IsThroughGlobalSecureAccess),
IsTenantRestricted=tobool(events.IsTenantRestricted),
IsRisky=tobool(events.IsRisky),
IsInteractive=tobool(events.IsInteractive),
IPAddress=tostring(events.IPAddress),
IncomingTokenType=tostring(events.IncomingTokenType),
MfaDetail=tostring(events.MfaDetail),
Id=tostring(events.Id),
RiskDetail=tostring(events.RiskDetail),
RiskEventTypes_V2=tostring(events.RiskEventTypes_V2),
UserId=tostring(events.UserId),
UserDisplayName=tostring(events.UserDisplayName),
UserAgent=tostring(events.UserAgent),
UniqueTokenIdentifier=tostring(events.UniqueTokenIdentifier),
TokenIssuerType=tostring(events.TokenIssuerType),
TokenIssuerName=tostring(events.TokenIssuerName),
Status=tostring(events.Status),
RiskEventTypes=tostring(events.RiskEventTypes),
TokenProtectionStatusDetails=tostring(events.TokenProtectionStatusDetails),
SignInEventTypes=tostring(events.SignInEventTypes),
SessionLifetimePolicies=tostring(events.SessionLifetimePolicies),
SessionId=tostring(events.SessionId),
ServicePrincipalId=tostring(events.ServicePrincipalId),
RiskState=tostring(events.RiskState),
RiskLevelDuringSignIn=tostring(events.RiskLevelDuringSignIn),
RiskLevelAggregated=tostring(events.RiskLevelAggregated),
SignInIdentifierType=tostring(events.SignInIdentifierType),
HomeTenantName=tostring(events.HomeTenantName),
HomeTenantId=tostring(events.HomeTenantId),
GlobalSecureAccessIpAddress=tostring(events.GlobalSecureAccessIpAddress),
AlternateSignInName=tostring(events.AlternateSignInName),
Agent=tostring(events.Agent),
AADTenantId=tostring(events.AADTenantId),
Location=tostring(events.Location),
Level=tostring(events.Level),
Identity=tostring(events.Identity),
ResourceGroup=tostring(events.ResourceGroup),
AppDisplayName=tostring(events.AppDisplayName),
CorrelationId=tostring(events.CorrelationId),
ResultDescription=tostring(events.ResultDescription),
ResultSignature=tostring(events.ResultSignature),
ResultType=tostring(events.ResultType),
Category=tostring(events.Category),
OperationVersion=tostring(events.OperationVersion),
OperationName=tostring(events.OperationName),
SourceSystem=tostring(events.SourceSystem),
DurationMs=tolong(events.DurationMs),
AppId=tostring(events.AppId),
AppliedEventListeners=todynamic(events.AppliedEventListeners),
AppOwnerTenantId=tostring(events.AppOwnerTenantId),
FederatedCredentialId=tostring(events.FederatedCredentialId),
DeviceDetail=tostring(events.DeviceDetail),
CrossTenantAccessType=tostring(events.CrossTenantAccessType),
CreatedDateTime=todatetime(events.CreatedDateTime),
ConditionalAccessStatus=tostring(events.ConditionalAccessStatus),
ConditionalAccessPoliciesV2=todynamic(events.ConditionalAccessPoliciesV2),
ConditionalAccessPolicies=tostring(events.ConditionalAccessPolicies),
ClientCredentialType=tostring(events.ClientCredentialType),
ClientAppUsed=tostring(events.ClientAppUsed),
AutonomousSystemNumber=tostring(events.AutonomousSystemNumber),
AuthenticationRequirementPolicies=tostring(events.AuthenticationRequirementPolicies),
AuthenticationRequirement=tostring(events.AuthenticationRequirement),
AuthenticationProtocol=tostring(events.AuthenticationProtocol),
AuthenticationProcessingDetails=tostring(events.AuthenticationProcessingDetails),
AuthenticationMethodsUsed=tostring(events.AuthenticationMethodsUsed),
AuthenticationDetails=tostring(events.AuthenticationDetails),
AuthenticationContextClassReferences=tostring(events.AuthenticationContextClassReferences),
UserPrincipalName=tostring(events.UserPrincipalName),
UserType=tostring(events.UserType),
Type=tostring(events.Type),
_TimeReceived=todatetime(now())
}

.alter table AADNonInteractiveUserSignInLogs policy update @'[{"Source": "AADNonInteractiveUserSignInLogsRaw", "Query": "AADNonInteractiveUserSignInLogsExpand()", "IsEnabled": "True", "IsTransactional": true}]'
