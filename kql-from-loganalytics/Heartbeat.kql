// ============================================================================
// Azure Data Explorer KQL Script for Heartbeat - UPDATED VERSION
// ============================================================================
// Generated: 2025-09-14 10:15:52
// Table type: Microsoft
// Schema discovered using hybrid approach (Management API + getschema)
// Data type corrections applied: TenantId->guid, Double->real (empirical fixes)
// All columns including underscore columns included
// Original columns: 31, Final columns: 31
// ============================================================================

.create-merge table HeartbeatRaw (records:dynamic)

.alter-merge table HeartbeatRaw policy retention softdelete = 1d

.alter table HeartbeatRaw policy caching hot = 1h

// JSON mapping - choose appropriate option based on data structure
.create-or-alter table HeartbeatRaw ingestion json mapping 'HeartbeatRawMapping' '[{"column":"records","Properties":{"path":"$.records"}}]'
// Alternative for direct events: '[{"column":"records","Properties":{"path":"$"}}]'

.create-merge table Heartbeat(
TimeGenerated:datetime,
TenantId:guid,
Solutions:string,
ComputerEnvironment:string,
ResourceType:string,
ResourceId:string,
Resource:string,
ResourceProvider:string,
ResourceGroup:string,
SubscriptionId:guid,
RemoteIPCountry:string,
RemoteIPLatitude:real,
RemoteIPLongitude:real,
IsGatewayInstalled:bool,
SCAgentChannel:string,
Version:string,
OSMinorVersion:string,
OSMajorVersion:string,
OSName:string,
OSType:string,
Category:string,
Computer:string,
ComputerIP:string,
SourceComputerId:guid,
ManagementGroupName:string,
MG:guid,
SourceSystem:string,
VMUUID:guid,
ComputerPrivateIPs:dynamic,
Type:string,
_ResourceId:string,
_TimeReceived:datetime)

.alter table Heartbeat policy caching hot = 1d

.create-or-alter function HeartbeatExpand() {
HeartbeatRaw
| mv-expand events = records
// Alternative for non-nested: | extend events = records
| project
TimeGenerated=todatetime(events.TimeGenerated),
TenantId=toguid(events.TenantId),
Solutions=tostring(events.Solutions),
ComputerEnvironment=tostring(events.ComputerEnvironment),
ResourceType=tostring(events.ResourceType),
ResourceId=tostring(events.ResourceId),
Resource=tostring(events.Resource),
ResourceProvider=tostring(events.ResourceProvider),
ResourceGroup=tostring(events.ResourceGroup),
SubscriptionId=toguid(events.SubscriptionId),
RemoteIPCountry=tostring(events.RemoteIPCountry),
RemoteIPLatitude=toreal(events.RemoteIPLatitude),
RemoteIPLongitude=toreal(events.RemoteIPLongitude),
IsGatewayInstalled=tobool(events.IsGatewayInstalled),
SCAgentChannel=tostring(events.SCAgentChannel),
Version=tostring(events.Version),
OSMinorVersion=tostring(events.OSMinorVersion),
OSMajorVersion=tostring(events.OSMajorVersion),
OSName=tostring(events.OSName),
OSType=tostring(events.OSType),
Category=tostring(events.Category),
Computer=tostring(events.Computer),
ComputerIP=tostring(events.ComputerIP),
SourceComputerId=toguid(events.SourceComputerId),
ManagementGroupName=tostring(events.ManagementGroupName),
MG=toguid(events.MG),
SourceSystem=tostring(events.SourceSystem),
VMUUID=toguid(events.VMUUID),
ComputerPrivateIPs=todynamic(events.ComputerPrivateIPs),
Type=tostring(events.Type),
_ResourceId=tostring(events._ResourceId),
_TimeReceived=todatetime(now())
}

.alter table Heartbeat policy update @'[{"Source": "HeartbeatRaw", "Query": "HeartbeatExpand()", "IsEnabled": "True", "IsTransactional": true}]'
