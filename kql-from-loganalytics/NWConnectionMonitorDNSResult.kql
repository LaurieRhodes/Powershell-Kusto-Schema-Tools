// ============================================================================
// Azure Data Explorer KQL Script for NWConnectionMonitorDNSResult - UPDATED VERSION
// ============================================================================
// Generated: 2025-09-14 10:17:55
// Table type: Microsoft
// Schema discovered using hybrid approach (Management API + getschema)
// Data type corrections applied: TenantId->guid, Double->real (empirical fixes)
// All columns including underscore columns included
// Original columns: 35, Final columns: 35
// ============================================================================

.create-merge table NWConnectionMonitorDNSResultRaw (records:dynamic)

.alter-merge table NWConnectionMonitorDNSResultRaw policy retention softdelete = 1d

.alter table NWConnectionMonitorDNSResultRaw policy caching hot = 1h

// JSON mapping - choose appropriate option based on data structure
.create-or-alter table NWConnectionMonitorDNSResultRaw ingestion json mapping 'NWConnectionMonitorDNSResultRawMapping' '[{"column":"records","Properties":{"path":"$.records"}}]'
// Alternative for direct events: '[{"column":"records","Properties":{"path":"$"}}]'

.create-merge table NWConnectionMonitorDNSResult(
TimeGenerated:datetime,
TenantId:guid,
ValidationIssues:string,
ValidationChecks:string,
ResponseRecordType:string,
ResponseRecords:string,
ResponseRecordCount:int,
TestResultCriterion:string,
TestResult:string,
ChecksFailed:int,
ChecksTotal:int,
Protocol:string,
DestinationAgentId:string,
DestinationName:string,
DestinationIP:string,
DestinationSubnet:string,
DestinationAddress:string,
DestinationResourceId:string,
DestinationType:string,
DestinationPort:int,
SourceAgentId:string,
SourceName:string,
SourceIP:string,
SourceSubnet:string,
SourceAddress:string,
SourceResourceId:string,
SourceType:string,
TestConfigurationName:string,
TestGroupName:string,
ConnectionMonitorResourceId:string,
RecordId:string,
DomainName:string,
SourceSystem:string,
Type:string,
_ResourceId:string,
_TimeReceived:datetime)

.alter table NWConnectionMonitorDNSResult policy caching hot = 1d

.create-or-alter function NWConnectionMonitorDNSResultExpand() {
NWConnectionMonitorDNSResultRaw
| mv-expand events = records
// Alternative for non-nested: | extend events = records
| project
TimeGenerated=todatetime(events.TimeGenerated),
TenantId=toguid(events.TenantId),
ValidationIssues=tostring(events.ValidationIssues),
ValidationChecks=tostring(events.ValidationChecks),
ResponseRecordType=tostring(events.ResponseRecordType),
ResponseRecords=tostring(events.ResponseRecords),
ResponseRecordCount=toint(events.ResponseRecordCount),
TestResultCriterion=tostring(events.TestResultCriterion),
TestResult=tostring(events.TestResult),
ChecksFailed=toint(events.ChecksFailed),
ChecksTotal=toint(events.ChecksTotal),
Protocol=tostring(events.Protocol),
DestinationAgentId=tostring(events.DestinationAgentId),
DestinationName=tostring(events.DestinationName),
DestinationIP=tostring(events.DestinationIP),
DestinationSubnet=tostring(events.DestinationSubnet),
DestinationAddress=tostring(events.DestinationAddress),
DestinationResourceId=tostring(events.DestinationResourceId),
DestinationType=tostring(events.DestinationType),
DestinationPort=toint(events.DestinationPort),
SourceAgentId=tostring(events.SourceAgentId),
SourceName=tostring(events.SourceName),
SourceIP=tostring(events.SourceIP),
SourceSubnet=tostring(events.SourceSubnet),
SourceAddress=tostring(events.SourceAddress),
SourceResourceId=tostring(events.SourceResourceId),
SourceType=tostring(events.SourceType),
TestConfigurationName=tostring(events.TestConfigurationName),
TestGroupName=tostring(events.TestGroupName),
ConnectionMonitorResourceId=tostring(events.ConnectionMonitorResourceId),
RecordId=tostring(events.RecordId),
DomainName=tostring(events.DomainName),
SourceSystem=tostring(events.SourceSystem),
Type=tostring(events.Type),
_ResourceId=tostring(events._ResourceId),
_TimeReceived=todatetime(now())
}

.alter table NWConnectionMonitorDNSResult policy update @'[{"Source": "NWConnectionMonitorDNSResultRaw", "Query": "NWConnectionMonitorDNSResultExpand()", "IsEnabled": "True", "IsTransactional": true}]'
