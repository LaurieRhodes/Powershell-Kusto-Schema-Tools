// ============================================================================
// Azure Data Explorer KQL Script for GoogleWorkspaceReports - UPDATED VERSION
// ============================================================================
// Generated: 2025-09-14 10:15:00
// Table type: Microsoft
// Schema discovered using hybrid approach (Management API + getschema)
// Data type corrections applied: TenantId->guid, Double->real (empirical fixes)
// All columns including underscore columns included
// Original columns: 89, Final columns: 89
// ============================================================================

.create-merge table GoogleWorkspaceReportsRaw (records:dynamic)

.alter-merge table GoogleWorkspaceReportsRaw policy retention softdelete = 1d

.alter table GoogleWorkspaceReportsRaw policy caching hot = 1h

// JSON mapping - choose appropriate option based on data structure
.create-or-alter table GoogleWorkspaceReportsRaw ingestion json mapping 'GoogleWorkspaceReportsRawMapping' '[{"column":"records","Properties":{"path":"$.records"}}]'
// Alternative for direct events: '[{"column":"records","Properties":{"path":"$"}}]'

.create-merge table GoogleWorkspaceReports(
TimeGenerated:datetime,
TenantId:guid,
OwnerDomain:string,
Owner:string,
OsProperty:string,
OriginatingAppId:string,
OrganizerCalendarId:string,
OldVisibility:string,
OldValue:string,
OldEventTitle:string,
OwnerIsSharedDrive:bool,
NotificationType:string,
NotificationMessageId:string,
NeqValue:string,
ModuleName:string,
LoginType:string,
LoginChallengeStatus:string,
LoginChallengeMethod:string,
LastSyncAuditDate:string,
IsSuspicious:bool,
NotificationMethod:string,
IsSecondFactor:bool,
OwnerIsTeamDrive:bool,
ProcessName:string,
Visibility:string,
UserEmail:string,
UserAgentOriginal:string,
UserAadid:string,
TeamDriveId:string,
TargetUserName:string,
TargetUserDomain:string,
TargetCalendarId:string,
PrimaryEvent:bool,
SrcIpAddr:string,
SourceFolderId:string,
SharedDriveId:string,
SerialNumber:string,
ScopeData:string,
Scope:string,
RoleName:string,
Resource_Id:string,
RegisterPrivelege:string,
SourceFolderTitle:string,
VisibilityChange:string,
IosVendorUID:string,
IdApplicationName:string,
DocTitle:string,
DocId:string,
DestinationFolderTitle:string,
DestinationFolderId:string,
ClientType:string,
ClientId:string,
CalendarId:string,
Billable:bool,
DocType:string,
ApplicationName:string,
AppName:string,
ApiKind:string,
ActorProfileId:string,
ActorKey:string,
ActorIsCollaboratorAccount:bool,
ActorEmail:string,
ActorCallerType:string,
AccountState:string,
ApplicationEdition:string,
IosVendorId:string,
DstUserUpn:string,
DvcGuid:string,
GroupDomain:string,
EventVendor:string,
EventUid:string,
EventType:string,
EventTitle:string,
EventStartTime:string,
EventResponseStatus:string,
EventProduct:string,
DestUserUpn:string,
EventOriginalMessage:string,
EventId:string,
EventGuest:string,
EventEndTime:string,
Etag:string,
DvcType:string,
DvcModelNumber:string,
DvcModelName:string,
DvcInterfaceGuid:string,
EventMessage:string,
SourceSystem:string,
Type:string,
_TimeReceived:datetime)

.alter table GoogleWorkspaceReports policy caching hot = 1d

.create-or-alter function GoogleWorkspaceReportsExpand() {
GoogleWorkspaceReportsRaw
| mv-expand events = records
// Alternative for non-nested: | extend events = records
| project
TimeGenerated=todatetime(events.TimeGenerated),
TenantId=toguid(events.TenantId),
OwnerDomain=tostring(events.OwnerDomain),
Owner=tostring(events.Owner),
OsProperty=tostring(events.OsProperty),
OriginatingAppId=tostring(events.OriginatingAppId),
OrganizerCalendarId=tostring(events.OrganizerCalendarId),
OldVisibility=tostring(events.OldVisibility),
OldValue=tostring(events.OldValue),
OldEventTitle=tostring(events.OldEventTitle),
OwnerIsSharedDrive=tobool(events.OwnerIsSharedDrive),
NotificationType=tostring(events.NotificationType),
NotificationMessageId=tostring(events.NotificationMessageId),
NeqValue=tostring(events.NeqValue),
ModuleName=tostring(events.ModuleName),
LoginType=tostring(events.LoginType),
LoginChallengeStatus=tostring(events.LoginChallengeStatus),
LoginChallengeMethod=tostring(events.LoginChallengeMethod),
LastSyncAuditDate=tostring(events.LastSyncAuditDate),
IsSuspicious=tobool(events.IsSuspicious),
NotificationMethod=tostring(events.NotificationMethod),
IsSecondFactor=tobool(events.IsSecondFactor),
OwnerIsTeamDrive=tobool(events.OwnerIsTeamDrive),
ProcessName=tostring(events.ProcessName),
Visibility=tostring(events.Visibility),
UserEmail=tostring(events.UserEmail),
UserAgentOriginal=tostring(events.UserAgentOriginal),
UserAadid=tostring(events.UserAadid),
TeamDriveId=tostring(events.TeamDriveId),
TargetUserName=tostring(events.TargetUserName),
TargetUserDomain=tostring(events.TargetUserDomain),
TargetCalendarId=tostring(events.TargetCalendarId),
PrimaryEvent=tobool(events.PrimaryEvent),
SrcIpAddr=tostring(events.SrcIpAddr),
SourceFolderId=tostring(events.SourceFolderId),
SharedDriveId=tostring(events.SharedDriveId),
SerialNumber=tostring(events.SerialNumber),
ScopeData=tostring(events.ScopeData),
Scope=tostring(events.Scope),
RoleName=tostring(events.RoleName),
Resource_Id=tostring(events.Resource_Id),
RegisterPrivelege=tostring(events.RegisterPrivelege),
SourceFolderTitle=tostring(events.SourceFolderTitle),
VisibilityChange=tostring(events.VisibilityChange),
IosVendorUID=tostring(events.IosVendorUID),
IdApplicationName=tostring(events.IdApplicationName),
DocTitle=tostring(events.DocTitle),
DocId=tostring(events.DocId),
DestinationFolderTitle=tostring(events.DestinationFolderTitle),
DestinationFolderId=tostring(events.DestinationFolderId),
ClientType=tostring(events.ClientType),
ClientId=tostring(events.ClientId),
CalendarId=tostring(events.CalendarId),
Billable=tobool(events.Billable),
DocType=tostring(events.DocType),
ApplicationName=tostring(events.ApplicationName),
AppName=tostring(events.AppName),
ApiKind=tostring(events.ApiKind),
ActorProfileId=tostring(events.ActorProfileId),
ActorKey=tostring(events.ActorKey),
ActorIsCollaboratorAccount=tobool(events.ActorIsCollaboratorAccount),
ActorEmail=tostring(events.ActorEmail),
ActorCallerType=tostring(events.ActorCallerType),
AccountState=tostring(events.AccountState),
ApplicationEdition=tostring(events.ApplicationEdition),
IosVendorId=tostring(events.IosVendorId),
DstUserUpn=tostring(events.DstUserUpn),
DvcGuid=tostring(events.DvcGuid),
GroupDomain=tostring(events.GroupDomain),
EventVendor=tostring(events.EventVendor),
EventUid=tostring(events.EventUid),
EventType=tostring(events.EventType),
EventTitle=tostring(events.EventTitle),
EventStartTime=tostring(events.EventStartTime),
EventResponseStatus=tostring(events.EventResponseStatus),
EventProduct=tostring(events.EventProduct),
DestUserUpn=tostring(events.DestUserUpn),
EventOriginalMessage=tostring(events.EventOriginalMessage),
EventId=tostring(events.EventId),
EventGuest=tostring(events.EventGuest),
EventEndTime=tostring(events.EventEndTime),
Etag=tostring(events.Etag),
DvcType=tostring(events.DvcType),
DvcModelNumber=tostring(events.DvcModelNumber),
DvcModelName=tostring(events.DvcModelName),
DvcInterfaceGuid=tostring(events.DvcInterfaceGuid),
EventMessage=tostring(events.EventMessage),
SourceSystem=tostring(events.SourceSystem),
Type=tostring(events.Type),
_TimeReceived=todatetime(now())
}

.alter table GoogleWorkspaceReports policy update @'[{"Source": "GoogleWorkspaceReportsRaw", "Query": "GoogleWorkspaceReportsExpand()", "IsEnabled": "True", "IsTransactional": true}]'
