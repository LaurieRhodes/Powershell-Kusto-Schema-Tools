// ============================================================================
// Azure Data Explorer KQL Script for RetinaNetworkFlowLogs - UPDATED VERSION
// ============================================================================
// Generated: 2025-09-14 10:19:48
// Table type: Microsoft
// Schema discovered using hybrid approach (Management API + getschema)
// Data type corrections applied: TenantId->guid, Double->real (empirical fixes)
// All columns including underscore columns included
// Original columns: 32, Final columns: 32
// ============================================================================

.create-merge table RetinaNetworkFlowLogsRaw (records:dynamic)

.alter-merge table RetinaNetworkFlowLogsRaw policy retention softdelete = 1d

.alter table RetinaNetworkFlowLogsRaw policy caching hot = 1h

// JSON mapping - choose appropriate option based on data structure
.create-or-alter table RetinaNetworkFlowLogsRaw ingestion json mapping 'RetinaNetworkFlowLogsRawMapping' '[{"column":"records","Properties":{"path":"$.records"}}]'
// Alternative for direct events: '[{"column":"records","Properties":{"path":"$"}}]'

.create-merge table RetinaNetworkFlowLogs(
TimeGenerated:datetime,
TenantId:guid,
Policies:dynamic,
PacketsReceived:int,
PacketsSent:int,
TraceObservationPoint:string,
TrafficDirection:string,
Service:dynamic,
EventType:dynamic,
Reply:bool,
Layer7:dynamic,
NodeName:string,
FlowType:string,
DestinationWorkloads:dynamic,
AdditionalFlowData:dynamic,
DestinationPodName:string,
DestinationClusterName:string,
DestinationIdentity:int,
SourceWorkloads:dynamic,
SourcePodName:string,
SourceNamespace:string,
SourceClusterName:string,
SourceIdentity:int,
Layer4:dynamic,
IP:dynamic,
DropReason:string,
Verdict:string,
UUID:string,
DestinationNamespace:string,
SourceSystem:string,
Type:string,
_ResourceId:string,
_TimeReceived:datetime)

.alter table RetinaNetworkFlowLogs policy caching hot = 1d

.create-or-alter function RetinaNetworkFlowLogsExpand() {
RetinaNetworkFlowLogsRaw
| mv-expand events = records
// Alternative for non-nested: | extend events = records
| project
TimeGenerated=todatetime(events.TimeGenerated),
TenantId=toguid(events.TenantId),
Policies=todynamic(events.Policies),
PacketsReceived=toint(events.PacketsReceived),
PacketsSent=toint(events.PacketsSent),
TraceObservationPoint=tostring(events.TraceObservationPoint),
TrafficDirection=tostring(events.TrafficDirection),
Service=todynamic(events.Service),
EventType=todynamic(events.EventType),
Reply=tobool(events.Reply),
Layer7=todynamic(events.Layer7),
NodeName=tostring(events.NodeName),
FlowType=tostring(events.FlowType),
DestinationWorkloads=todynamic(events.DestinationWorkloads),
AdditionalFlowData=todynamic(events.AdditionalFlowData),
DestinationPodName=tostring(events.DestinationPodName),
DestinationClusterName=tostring(events.DestinationClusterName),
DestinationIdentity=toint(events.DestinationIdentity),
SourceWorkloads=todynamic(events.SourceWorkloads),
SourcePodName=tostring(events.SourcePodName),
SourceNamespace=tostring(events.SourceNamespace),
SourceClusterName=tostring(events.SourceClusterName),
SourceIdentity=toint(events.SourceIdentity),
Layer4=todynamic(events.Layer4),
IP=todynamic(events.IP),
DropReason=tostring(events.DropReason),
Verdict=tostring(events.Verdict),
UUID=tostring(events.UUID),
DestinationNamespace=tostring(events.DestinationNamespace),
SourceSystem=tostring(events.SourceSystem),
Type=tostring(events.Type),
_ResourceId=tostring(events._ResourceId),
_TimeReceived=todatetime(now())
}

.alter table RetinaNetworkFlowLogs policy update @'[{"Source": "RetinaNetworkFlowLogsRaw", "Query": "RetinaNetworkFlowLogsExpand()", "IsEnabled": "True", "IsTransactional": true}]'
