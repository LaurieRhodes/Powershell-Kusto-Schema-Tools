// ============================================================================
// Azure Data Explorer KQL Script for CrowdStrikeHosts - UPDATED VERSION
// ============================================================================
// Generated: 2025-09-14 11:26:01
// Table type: Microsoft
// Schema discovered using hybrid approach (Management API + getschema)
// Data type corrections applied: TenantId->guid, Double->real (empirical fixes)
// All columns including underscore columns included
// Original columns: 94, Final columns: 94
// ============================================================================

.create-merge table CrowdStrikeHostsRaw (records:dynamic)

.alter-merge table CrowdStrikeHostsRaw policy retention softdelete = 1d

.alter table CrowdStrikeHostsRaw policy caching hot = 1h

// JSON mapping - choose appropriate option based on data structure
.create-or-alter table CrowdStrikeHostsRaw ingestion json mapping 'CrowdStrikeHostsRawMapping' '[{"column":"records","Properties":{"path":"$.records"}}]'
// Alternative for direct events: '[{"column":"records","Properties":{"path":"$"}}]'

.create-merge table CrowdStrikeHosts(
TimeGenerated:datetime,
TenantId:guid,
PodId:string,
PodHostname:string,
PodHostIp6:string,
PodHostIp4:string,
PodAnnotations:dynamic,
PlatformName:string,
PlatformId:string,
Ou:dynamic,
OsVersion:string,
OsProductName:string,
OsBuild:string,
Notes:dynamic,
ModifiedTimestamp:string,
MinorVersion:string,
MigrationCompletedTime:string,
Meta:dynamic,
ManagedApps:dynamic,
MajorVersion:string,
MachineDomain:string,
PodIp4:string,
MacAddress:string,
PodIp6:string,
PodName:string,
SystemProductName:string,
SystemManufacturer:string,
Status:string,
SiteName:string,
ServiceProviderAccountId:string,
ServiceProvider:string,
ServicePackMinor:string,
ServicePackMajor:string,
SerialNumber:string,
RtrState:string,
ReleaseGroup:string,
ReducedFunctionalityMode:string,
ProvisionStatus:string,
ProductTypeDesc:string,
ProductType:string,
Policies:dynamic,
PointerSize:string,
PodServiceAccountName:string,
PodNamespace:string,
PodLabels:dynamic,
LocalIp:string,
LinuxSensorMode:string,
LastSeen:string,
DeploymentType:string,
DefaultGatewayIp:string,
CpuVendor:string,
CpuSignature:string,
ConnectionMacAddress:string,
ConnectionIp:string,
ConfigIdPlatform:string,
ConfigIdBuild:string,
ConfigIdBase:string,
Cid:string,
ChassisTypeDesc:string,
ChassisType:string,
BuildNumber:string,
BiosVersion:string,
BiosManufacturer:string,
BaseImageVersion:string,
AgentVersion:string,
AgentLocalTime:string,
AgentLoadFlags:string,
DetectionSuppressionStatus:string,
DeviceId:string,
DevicePolicies:dynamic,
Email:string,
LastReboot:string,
LastLoginUserSid:string,
LastLoginUser:string,
LastLoginUid:string,
LastLoginTimestamp:string,
KernelVersion:string,
K8sClusterVersion:string,
K8sClusterId:string,
K8sClusterGitVersion:string,
Tags:dynamic,
InternetExposure:string,
Hostname:string,
HostUtcOffset:string,
HostHiddenStatus:string,
Groups:dynamic,
GroupHash:string,
FirstSeen:string,
FirstLoginTimestamp:string,
FilesystemContainmentStatus:string,
ExternalIp:string,
InstanceId:string,
SourceSystem:string,
Type:string,
_TimeReceived:datetime)

.alter table CrowdStrikeHosts policy caching hot = 1d

.create-or-alter function CrowdStrikeHostsExpand() {
CrowdStrikeHostsRaw
| mv-expand events = records
// Alternative for non-nested: | extend events = records
| project
TimeGenerated=todatetime(events.TimeGenerated),
TenantId=toguid(events.TenantId),
PodId=tostring(events.PodId),
PodHostname=tostring(events.PodHostname),
PodHostIp6=tostring(events.PodHostIp6),
PodHostIp4=tostring(events.PodHostIp4),
PodAnnotations=todynamic(events.PodAnnotations),
PlatformName=tostring(events.PlatformName),
PlatformId=tostring(events.PlatformId),
Ou=todynamic(events.Ou),
OsVersion=tostring(events.OsVersion),
OsProductName=tostring(events.OsProductName),
OsBuild=tostring(events.OsBuild),
Notes=todynamic(events.Notes),
ModifiedTimestamp=tostring(events.ModifiedTimestamp),
MinorVersion=tostring(events.MinorVersion),
MigrationCompletedTime=tostring(events.MigrationCompletedTime),
Meta=todynamic(events.Meta),
ManagedApps=todynamic(events.ManagedApps),
MajorVersion=tostring(events.MajorVersion),
MachineDomain=tostring(events.MachineDomain),
PodIp4=tostring(events.PodIp4),
MacAddress=tostring(events.MacAddress),
PodIp6=tostring(events.PodIp6),
PodName=tostring(events.PodName),
SystemProductName=tostring(events.SystemProductName),
SystemManufacturer=tostring(events.SystemManufacturer),
Status=tostring(events.Status),
SiteName=tostring(events.SiteName),
ServiceProviderAccountId=tostring(events.ServiceProviderAccountId),
ServiceProvider=tostring(events.ServiceProvider),
ServicePackMinor=tostring(events.ServicePackMinor),
ServicePackMajor=tostring(events.ServicePackMajor),
SerialNumber=tostring(events.SerialNumber),
RtrState=tostring(events.RtrState),
ReleaseGroup=tostring(events.ReleaseGroup),
ReducedFunctionalityMode=tostring(events.ReducedFunctionalityMode),
ProvisionStatus=tostring(events.ProvisionStatus),
ProductTypeDesc=tostring(events.ProductTypeDesc),
ProductType=tostring(events.ProductType),
Policies=todynamic(events.Policies),
PointerSize=tostring(events.PointerSize),
PodServiceAccountName=tostring(events.PodServiceAccountName),
PodNamespace=tostring(events.PodNamespace),
PodLabels=todynamic(events.PodLabels),
LocalIp=tostring(events.LocalIp),
LinuxSensorMode=tostring(events.LinuxSensorMode),
LastSeen=tostring(events.LastSeen),
DeploymentType=tostring(events.DeploymentType),
DefaultGatewayIp=tostring(events.DefaultGatewayIp),
CpuVendor=tostring(events.CpuVendor),
CpuSignature=tostring(events.CpuSignature),
ConnectionMacAddress=tostring(events.ConnectionMacAddress),
ConnectionIp=tostring(events.ConnectionIp),
ConfigIdPlatform=tostring(events.ConfigIdPlatform),
ConfigIdBuild=tostring(events.ConfigIdBuild),
ConfigIdBase=tostring(events.ConfigIdBase),
Cid=tostring(events.Cid),
ChassisTypeDesc=tostring(events.ChassisTypeDesc),
ChassisType=tostring(events.ChassisType),
BuildNumber=tostring(events.BuildNumber),
BiosVersion=tostring(events.BiosVersion),
BiosManufacturer=tostring(events.BiosManufacturer),
BaseImageVersion=tostring(events.BaseImageVersion),
AgentVersion=tostring(events.AgentVersion),
AgentLocalTime=tostring(events.AgentLocalTime),
AgentLoadFlags=tostring(events.AgentLoadFlags),
DetectionSuppressionStatus=tostring(events.DetectionSuppressionStatus),
DeviceId=tostring(events.DeviceId),
DevicePolicies=todynamic(events.DevicePolicies),
Email=tostring(events.Email),
LastReboot=tostring(events.LastReboot),
LastLoginUserSid=tostring(events.LastLoginUserSid),
LastLoginUser=tostring(events.LastLoginUser),
LastLoginUid=tostring(events.LastLoginUid),
LastLoginTimestamp=tostring(events.LastLoginTimestamp),
KernelVersion=tostring(events.KernelVersion),
K8sClusterVersion=tostring(events.K8sClusterVersion),
K8sClusterId=tostring(events.K8sClusterId),
K8sClusterGitVersion=tostring(events.K8sClusterGitVersion),
Tags=todynamic(events.Tags),
InternetExposure=tostring(events.InternetExposure),
Hostname=tostring(events.Hostname),
HostUtcOffset=tostring(events.HostUtcOffset),
HostHiddenStatus=tostring(events.HostHiddenStatus),
Groups=todynamic(events.Groups),
GroupHash=tostring(events.GroupHash),
FirstSeen=tostring(events.FirstSeen),
FirstLoginTimestamp=tostring(events.FirstLoginTimestamp),
FilesystemContainmentStatus=tostring(events.FilesystemContainmentStatus),
ExternalIp=tostring(events.ExternalIp),
InstanceId=tostring(events.InstanceId),
SourceSystem=tostring(events.SourceSystem),
Type=tostring(events.Type),
_TimeReceived=todatetime(now())
}

.alter table CrowdStrikeHosts policy update @'[{"Source": "CrowdStrikeHostsRaw", "Query": "CrowdStrikeHostsExpand()", "IsEnabled": "True", "IsTransactional": true}]'
