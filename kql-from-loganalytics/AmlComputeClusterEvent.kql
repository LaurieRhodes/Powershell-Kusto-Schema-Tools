// ============================================================================
// Azure Data Explorer KQL Script for AmlComputeClusterEvent - UPDATED VERSION
// ============================================================================
// Generated: 2025-09-14 11:21:18
// Table type: Microsoft
// Schema discovered using hybrid approach (Management API + getschema)
// Data type corrections applied: TenantId->guid, Double->real (empirical fixes)
// All columns including underscore columns included
// Original columns: 65, Final columns: 65
// ============================================================================

.create-merge table AmlComputeClusterEventRaw (records:dynamic)

.alter-merge table AmlComputeClusterEventRaw policy retention softdelete = 1d

.alter table AmlComputeClusterEventRaw policy caching hot = 1h

// JSON mapping - choose appropriate option based on data structure
.create-or-alter table AmlComputeClusterEventRaw ingestion json mapping 'AmlComputeClusterEventRawMapping' '[{"column":"records","Properties":{"path":"$.records"}}]'
// Alternative for direct events: '[{"column":"records","Properties":{"path":"$"}}]'

.create-merge table AmlComputeClusterEvent(
TimeGenerated:datetime,
TenantId:guid,
Sku:string,
Version:string,
SubnetId:string,
AllocationState:string,
CurrentNodeCount:int,
TargetNodeCount:int,
EventType:string,
NodeIdleTimeSecondsBeforeScaleDown:int,
PreemptedNodeCount:string,
IsResizeGrow:string,
VmFamilyName:string,
LeavingNodeCount:int,
UnusableNodeCount:int,
IdleNodeCount:int,
RunningNodeCount:int,
PreparingNodeCount:int,
QuotaAllocated:string,
QuotaUtilized:string,
AllocationStateTransitionTime:datetime,
ClusterErrorCodes:string,
CreationApiVersion:string,
InternalOperationName:string,
Node:string,
EnvNamespace:string,
Pod:string,
Container:string,
Host:string,
Offer:string,
Publisher:string,
NodeDeallocationOption:string,
MaximumNodeCount:int,
SourceSystem:string,
Stream:string,
Docker:string,
Kubernetes:string,
Tag:string,
LogEpochTimestamp:real,
OperationVersion:string,
ResultType:string,
ResultSignature:string,
ResultDescription:string,
DurationMs:real,
CallerIpAddress:string,
CorrelationId:string,
env_time:datetime,
Identity:string,
Location:string,
OperationName:string,
Category:string,
ProvisioningState:string,
ClusterName:string,
ClusterType:string,
CreatedBy:string,
CoreCount:int,
VmSize:string,
VmPriority:string,
ScalingType:string,
InitialNodeCount:int,
MinimumNodeCount:int,
Level:string,
FluentdIngestTimestamp:real,
Type:string,
_ResourceId:string,
_TimeReceived:datetime)

.alter table AmlComputeClusterEvent policy caching hot = 1d

.create-or-alter function AmlComputeClusterEventExpand() {
AmlComputeClusterEventRaw
| mv-expand events = records
// Alternative for non-nested: | extend events = records
| project
TimeGenerated=todatetime(events.TimeGenerated),
TenantId=toguid(events.TenantId),
Sku=tostring(events.Sku),
Version=tostring(events.Version),
SubnetId=tostring(events.SubnetId),
AllocationState=tostring(events.AllocationState),
CurrentNodeCount=toint(events.CurrentNodeCount),
TargetNodeCount=toint(events.TargetNodeCount),
EventType=tostring(events.EventType),
NodeIdleTimeSecondsBeforeScaleDown=toint(events.NodeIdleTimeSecondsBeforeScaleDown),
PreemptedNodeCount=tostring(events.PreemptedNodeCount),
IsResizeGrow=tostring(events.IsResizeGrow),
VmFamilyName=tostring(events.VmFamilyName),
LeavingNodeCount=toint(events.LeavingNodeCount),
UnusableNodeCount=toint(events.UnusableNodeCount),
IdleNodeCount=toint(events.IdleNodeCount),
RunningNodeCount=toint(events.RunningNodeCount),
PreparingNodeCount=toint(events.PreparingNodeCount),
QuotaAllocated=tostring(events.QuotaAllocated),
QuotaUtilized=tostring(events.QuotaUtilized),
AllocationStateTransitionTime=todatetime(events.AllocationStateTransitionTime),
ClusterErrorCodes=tostring(events.ClusterErrorCodes),
CreationApiVersion=tostring(events.CreationApiVersion),
InternalOperationName=tostring(events.InternalOperationName),
Node=tostring(events.Node),
EnvNamespace=tostring(events.EnvNamespace),
Pod=tostring(events.Pod),
Container=tostring(events.Container),
Host=tostring(events.Host),
Offer=tostring(events.Offer),
Publisher=tostring(events.Publisher),
NodeDeallocationOption=tostring(events.NodeDeallocationOption),
MaximumNodeCount=toint(events.MaximumNodeCount),
SourceSystem=tostring(events.SourceSystem),
Stream=tostring(events.Stream),
Docker=tostring(events.Docker),
Kubernetes=tostring(events.Kubernetes),
Tag=tostring(events.Tag),
LogEpochTimestamp=toreal(events.LogEpochTimestamp),
OperationVersion=tostring(events.OperationVersion),
ResultType=tostring(events.ResultType),
ResultSignature=tostring(events.ResultSignature),
ResultDescription=tostring(events.ResultDescription),
DurationMs=toreal(events.DurationMs),
CallerIpAddress=tostring(events.CallerIpAddress),
CorrelationId=tostring(events.CorrelationId),
env_time=todatetime(events.env_time),
Identity=tostring(events.Identity),
Location=tostring(events.Location),
OperationName=tostring(events.OperationName),
Category=tostring(events.Category),
ProvisioningState=tostring(events.ProvisioningState),
ClusterName=tostring(events.ClusterName),
ClusterType=tostring(events.ClusterType),
CreatedBy=tostring(events.CreatedBy),
CoreCount=toint(events.CoreCount),
VmSize=tostring(events.VmSize),
VmPriority=tostring(events.VmPriority),
ScalingType=tostring(events.ScalingType),
InitialNodeCount=toint(events.InitialNodeCount),
MinimumNodeCount=toint(events.MinimumNodeCount),
Level=tostring(events.Level),
FluentdIngestTimestamp=toreal(events.FluentdIngestTimestamp),
Type=tostring(events.Type),
_ResourceId=tostring(events._ResourceId),
_TimeReceived=todatetime(now())
}

.alter table AmlComputeClusterEvent policy update @'[{"Source": "AmlComputeClusterEventRaw", "Query": "AmlComputeClusterEventExpand()", "IsEnabled": "True", "IsTransactional": true}]'
